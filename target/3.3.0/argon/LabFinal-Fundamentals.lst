
/Users/cademissner/Desktop/IoT/LabFinal-Fundamentals/target/3.3.0/argon/LabFinal-Fundamentals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000064d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba4f0  000ba4f0  0000a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba514  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e574  000ba518  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000020c  2003e5e4  2003e5e4  0002e5e4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba588  000ba588  0002a588  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba5b0  000ba5b0  0002a5b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00157f83  00000000  00000000  0002a5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00018234  00000000  00000000  00182537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00045ceb  00000000  00000000  0019a76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003300  00000000  00000000  001e0456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b3a0  00000000  00000000  001e3756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044bb6  00000000  00000000  001eeaf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000556ff  00000000  00000000  002336ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b601  00000000  00000000  00288dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000096b8  00000000  00000000  003c43ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fea7 	bl	b8d84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 feaf 	bl	b8da0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e574 	.word	0x2003e574
   b404c:	000ba518 	.word	0x000ba518
   b4050:	2003e5e4 	.word	0x2003e5e4
   b4054:	2003e5e4 	.word	0x2003e5e4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 ffc1 	bl	b7fe8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba4c8 	.word	0x000ba4c8
   b4080:	000ba4ec 	.word	0x000ba4ec

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf60 	b.w	b4f48 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f881 	bl	b5190 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bf61 	b.w	b7f58 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bf43 	b.w	b6f20 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bf41 	b.w	b6f20 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bf47 	b.w	b6f30 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fe8c 	bl	b6dc8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6a39 	.word	0x000b6a39
   b40b8:	000b9050 	.word	0x000b9050

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f003 f9b0 	bl	b7440 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f003 b9c2 	b.w	b7472 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

000b40f4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b40f4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b40f6:	f002 fca7 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b40fa:	4b03      	ldr	r3, [pc, #12]	; (b4108 <_ZN10CloudClass7processEv+0x14>)
   b40fc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b4102:	f002 be9d 	b.w	b6e40 <spark_process>
   b4106:	bf00      	nop
   b4108:	2003e728 	.word	0x2003e728

000b410c <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b410c:	6803      	ldr	r3, [r0, #0]
   b410e:	b12b      	cbz	r3, b411c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4110:	6842      	ldr	r2, [r0, #4]
   b4112:	4293      	cmp	r3, r2
   b4114:	d202      	bcs.n	b411c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4116:	4618      	mov	r0, r3
   b4118:	f004 be2c 	b.w	b8d74 <atoi>
   b411c:	2000      	movs	r0, #0
   b411e:	4770      	bx	lr

000b4120 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4120:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4122:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4124:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4126:	b145      	cbz	r5, b413a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4128:	6843      	ldr	r3, [r0, #4]
   b412a:	429d      	cmp	r5, r3
   b412c:	d205      	bcs.n	b413a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b412e:	4628      	mov	r0, r5
   b4130:	f004 fe76 	bl	b8e20 <strlen>
   b4134:	3001      	adds	r0, #1
   b4136:	4405      	add	r5, r0
   b4138:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b413a:	4620      	mov	r0, r4
   b413c:	bd38      	pop	{r3, r4, r5, pc}

000b413e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b413e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4140:	4604      	mov	r4, r0
   b4142:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4144:	460d      	mov	r5, r1
   b4146:	b921      	cbnz	r1, b4152 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4148:	6803      	ldr	r3, [r0, #0]
   b414a:	1c7a      	adds	r2, r7, #1
   b414c:	6042      	str	r2, [r0, #4]
   b414e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4152:	4608      	mov	r0, r1
   b4154:	f004 fe64 	bl	b8e20 <strlen>
    if (len + l > buff_size)
   b4158:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b415a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b415c:	19f2      	adds	r2, r6, r7
   b415e:	429a      	cmp	r2, r3
   b4160:	d8f6      	bhi.n	b4150 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4162:	6820      	ldr	r0, [r4, #0]
   b4164:	4632      	mov	r2, r6
   b4166:	4629      	mov	r1, r5
   b4168:	4438      	add	r0, r7
   b416a:	f004 fe0b 	bl	b8d84 <memcpy>
    len += l;
   b416e:	6860      	ldr	r0, [r4, #4]
   b4170:	4430      	add	r0, r6
   b4172:	6060      	str	r0, [r4, #4]
   b4174:	e7ec      	b.n	b4150 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4178 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4178:	b538      	push	{r3, r4, r5, lr}
   b417a:	4604      	mov	r4, r0
   b417c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b417e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4182:	6825      	ldr	r5, [r4, #0]
   b4184:	4a04      	ldr	r2, [pc, #16]	; (b4198 <_ZN10BlynkParam3addEi+0x20>)
   b4186:	1a09      	subs	r1, r1, r0
   b4188:	4428      	add	r0, r5
   b418a:	f002 fed9 	bl	b6f40 <snprintf>
   b418e:	6863      	ldr	r3, [r4, #4]
   b4190:	3001      	adds	r0, #1
   b4192:	4403      	add	r3, r0
   b4194:	6063      	str	r3, [r4, #4]
    }
   b4196:	bd38      	pop	{r3, r4, r5, pc}
   b4198:	000b9065 	.word	0x000b9065

000b419c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b419c:	b538      	push	{r3, r4, r5, lr}
   b419e:	4604      	mov	r4, r0
   b41a0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b41a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b41a6:	6825      	ldr	r5, [r4, #0]
   b41a8:	4a04      	ldr	r2, [pc, #16]	; (b41bc <_ZN10BlynkParam3addEl+0x20>)
   b41aa:	1a09      	subs	r1, r1, r0
   b41ac:	4428      	add	r0, r5
   b41ae:	f002 fec7 	bl	b6f40 <snprintf>
   b41b2:	6863      	ldr	r3, [r4, #4]
   b41b4:	3001      	adds	r0, #1
   b41b6:	4403      	add	r3, r0
   b41b8:	6063      	str	r3, [r4, #4]
    }
   b41ba:	bd38      	pop	{r3, r4, r5, pc}
   b41bc:	000b9068 	.word	0x000b9068

000b41c0 <BlynkWidgetWrite2>:
    display.clearDisplay();
    display.display();

}

BLYNK_WRITE(V2) {
   b41c0:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
   b41c2:	6808      	ldr	r0, [r1, #0]
   b41c4:	f004 fdd6 	bl	b8d74 <atoi>
    if (param.asInt() == 1) {
   b41c8:	2801      	cmp	r0, #1
   b41ca:	d174      	bne.n	b42b6 <BlynkWidgetWrite2+0xf6>
        char prevOn;
        if (digitalRead(RED_LED) == HIGH) {
   b41cc:	2008      	movs	r0, #8
   b41ce:	f003 ffa5 	bl	b811c <digitalRead>
   b41d2:	2801      	cmp	r0, #1
   b41d4:	d04c      	beq.n	b4270 <BlynkWidgetWrite2+0xb0>
            prevOn = 'r';
        } else if (digitalRead(GREEN_LED) == HIGH) {
   b41d6:	2007      	movs	r0, #7
   b41d8:	f003 ffa0 	bl	b811c <digitalRead>
   b41dc:	2801      	cmp	r0, #1
   b41de:	d049      	beq.n	b4274 <BlynkWidgetWrite2+0xb4>
            prevOn = 'g';
        } else if (digitalRead(BLUE_LED) == HIGH) {
   b41e0:	2006      	movs	r0, #6
   b41e2:	f003 ff9b 	bl	b811c <digitalRead>
            prevOn = 'b';
        } else {
            prevOn = 'n';
   b41e6:	2801      	cmp	r0, #1
   b41e8:	bf0c      	ite	eq
   b41ea:	2462      	moveq	r4, #98	; 0x62
   b41ec:	246e      	movne	r4, #110	; 0x6e
        }    

        digitalWrite(RED_LED, HIGH);
   b41ee:	2101      	movs	r1, #1
   b41f0:	2008      	movs	r0, #8
   b41f2:	f003 ff7a 	bl	b80ea <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   b41f6:	2100      	movs	r1, #0
   b41f8:	2007      	movs	r0, #7
   b41fa:	f003 ff76 	bl	b80ea <digitalWrite>
        digitalWrite(BLUE_LED, LOW);
   b41fe:	2100      	movs	r1, #0
   b4200:	2006      	movs	r0, #6
   b4202:	f003 ff72 	bl	b80ea <digitalWrite>
        delay(1000);
   b4206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b420a:	f002 fecd 	bl	b6fa8 <delay>

        digitalWrite(RED_LED, LOW);
   b420e:	2100      	movs	r1, #0
   b4210:	2008      	movs	r0, #8
   b4212:	f003 ff6a 	bl	b80ea <digitalWrite>
        digitalWrite(GREEN_LED, HIGH);
   b4216:	2101      	movs	r1, #1
   b4218:	2007      	movs	r0, #7
   b421a:	f003 ff66 	bl	b80ea <digitalWrite>
        delay(1000);
   b421e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4222:	f002 fec1 	bl	b6fa8 <delay>

        digitalWrite(GREEN_LED, LOW);
   b4226:	2100      	movs	r1, #0
   b4228:	2007      	movs	r0, #7
   b422a:	f003 ff5e 	bl	b80ea <digitalWrite>
        digitalWrite(BLUE_LED, HIGH);
   b422e:	2101      	movs	r1, #1
   b4230:	2006      	movs	r0, #6
   b4232:	f003 ff5a 	bl	b80ea <digitalWrite>
        delay(1000);
   b4236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b423a:	f002 feb5 	bl	b6fa8 <delay>

        digitalWrite(GREEN_LED, HIGH);
   b423e:	2101      	movs	r1, #1
   b4240:	2007      	movs	r0, #7
   b4242:	f003 ff52 	bl	b80ea <digitalWrite>
        digitalWrite(RED_LED, HIGH);
   b4246:	2101      	movs	r1, #1
   b4248:	2008      	movs	r0, #8
   b424a:	f003 ff4e 	bl	b80ea <digitalWrite>
        delay(3000);
   b424e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4252:	f002 fea9 	bl	b6fa8 <delay>

        if (prevOn == 'r') {
   b4256:	2c72      	cmp	r4, #114	; 0x72
   b4258:	d10e      	bne.n	b4278 <BlynkWidgetWrite2+0xb8>
            digitalWrite(RED_LED, HIGH);
   b425a:	2101      	movs	r1, #1
        } else if (prevOn == 'b') {
            digitalWrite(BLUE_LED, HIGH);
            digitalWrite(RED_LED, LOW);
            digitalWrite(GREEN_LED, LOW);
        } else {
            digitalWrite(RED_LED, LOW);
   b425c:	2008      	movs	r0, #8
   b425e:	f003 ff44 	bl	b80ea <digitalWrite>
            digitalWrite(GREEN_LED, LOW);
   b4262:	2100      	movs	r1, #0
   b4264:	2007      	movs	r0, #7
   b4266:	f003 ff40 	bl	b80ea <digitalWrite>
            digitalWrite(BLUE_LED, LOW);
   b426a:	2100      	movs	r1, #0
   b426c:	2006      	movs	r0, #6
   b426e:	e00f      	b.n	b4290 <BlynkWidgetWrite2+0xd0>
            prevOn = 'r';
   b4270:	2472      	movs	r4, #114	; 0x72
   b4272:	e7bc      	b.n	b41ee <BlynkWidgetWrite2+0x2e>
            prevOn = 'g';
   b4274:	2467      	movs	r4, #103	; 0x67
   b4276:	e7ba      	b.n	b41ee <BlynkWidgetWrite2+0x2e>
        } else if (prevOn == 'g') {
   b4278:	2c67      	cmp	r4, #103	; 0x67
   b427a:	d10d      	bne.n	b4298 <BlynkWidgetWrite2+0xd8>
            digitalWrite(GREEN_LED, HIGH);
   b427c:	2101      	movs	r1, #1
   b427e:	2007      	movs	r0, #7
   b4280:	f003 ff33 	bl	b80ea <digitalWrite>
            digitalWrite(BLUE_LED, LOW);
   b4284:	2100      	movs	r1, #0
   b4286:	2006      	movs	r0, #6
   b4288:	f003 ff2f 	bl	b80ea <digitalWrite>
            digitalWrite(RED_LED, LOW);
   b428c:	2100      	movs	r1, #0
   b428e:	2008      	movs	r0, #8
        }
    }      
}
   b4290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            digitalWrite(BLUE_LED, LOW);
   b4294:	f003 bf29 	b.w	b80ea <digitalWrite>
        } else if (prevOn == 'b') {
   b4298:	2c62      	cmp	r4, #98	; 0x62
   b429a:	d10a      	bne.n	b42b2 <BlynkWidgetWrite2+0xf2>
            digitalWrite(BLUE_LED, HIGH);
   b429c:	2101      	movs	r1, #1
   b429e:	2006      	movs	r0, #6
   b42a0:	f003 ff23 	bl	b80ea <digitalWrite>
            digitalWrite(RED_LED, LOW);
   b42a4:	2100      	movs	r1, #0
   b42a6:	2008      	movs	r0, #8
   b42a8:	f003 ff1f 	bl	b80ea <digitalWrite>
            digitalWrite(GREEN_LED, LOW);
   b42ac:	2100      	movs	r1, #0
   b42ae:	2007      	movs	r0, #7
   b42b0:	e7ee      	b.n	b4290 <BlynkWidgetWrite2+0xd0>
            digitalWrite(RED_LED, LOW);
   b42b2:	2100      	movs	r1, #0
   b42b4:	e7d2      	b.n	b425c <BlynkWidgetWrite2+0x9c>
}
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b42b8:	b508      	push	{r3, lr}
        state = CONNECTING;
   b42ba:	2300      	movs	r3, #0
   b42bc:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b42be:	6800      	ldr	r0, [r0, #0]
   b42c0:	f003 fcac 	bl	b7c1c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b42c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b42c8:	f002 bae3 	b.w	b6892 <BlynkNoOpCbk>

000b42cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b42cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b42d0:	188f      	adds	r7, r1, r2
   b42d2:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b42d4:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b42d6:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b42da:	4606      	mov	r6, r0
   b42dc:	4689      	mov	r9, r1
   b42de:	4690      	mov	r8, r2
    if (it >= param.end())
   b42e0:	f080 80c2 	bcs.w	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b42e4:	a805      	add	r0, sp, #20
   b42e6:	880d      	ldrh	r5, [r1, #0]
   b42e8:	f7ff ff1a 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
   b42ec:	6803      	ldr	r3, [r0, #0]
   b42ee:	42bb      	cmp	r3, r7
   b42f0:	f080 80ba 	bcs.w	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b42f4:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b42f6:	7803      	ldrb	r3, [r0, #0]
   b42f8:	2b41      	cmp	r3, #65	; 0x41
   b42fa:	d149      	bne.n	b4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b42fc:	3001      	adds	r0, #1
   b42fe:	f004 fd39 	bl	b8d74 <atoi>
   b4302:	2805      	cmp	r0, #5
   b4304:	dd37      	ble.n	b4376 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4306:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4308:	f247 2376 	movw	r3, #29302	; 0x7276
   b430c:	429d      	cmp	r5, r3
   b430e:	f000 80d3 	beq.w	b44b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4312:	d841      	bhi.n	b4398 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4314:	f247 2361 	movw	r3, #29281	; 0x7261
   b4318:	429d      	cmp	r5, r3
   b431a:	f000 80a8 	beq.w	b446e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b431e:	f247 2364 	movw	r3, #29284	; 0x7264
   b4322:	429d      	cmp	r5, r3
   b4324:	d06b      	beq.n	b43fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4326:	f646 5370 	movw	r3, #28016	; 0x6d70
   b432a:	429d      	cmp	r5, r3
   b432c:	d141      	bne.n	b43b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b432e:	4d78      	ldr	r5, [pc, #480]	; (b4510 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4330:	4e78      	ldr	r6, [pc, #480]	; (b4514 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4332:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4528 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4336:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4338:	42b8      	cmp	r0, r7
   b433a:	f080 8095 	bcs.w	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b433e:	7803      	ldrb	r3, [r0, #0]
   b4340:	2b41      	cmp	r3, #65	; 0x41
   b4342:	d14b      	bne.n	b43dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4344:	3001      	adds	r0, #1
   b4346:	f004 fd15 	bl	b8d74 <atoi>
   b434a:	2805      	cmp	r0, #5
   b434c:	dd39      	ble.n	b43c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b434e:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4350:	a805      	add	r0, sp, #20
   b4352:	f7ff fee5 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4356:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b435a:	4629      	mov	r1, r5
   b435c:	4648      	mov	r0, r9
   b435e:	f004 fd55 	bl	b8e0c <strcmp>
   b4362:	4601      	mov	r1, r0
   b4364:	2800      	cmp	r0, #0
   b4366:	d13d      	bne.n	b43e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4368:	4620      	mov	r0, r4
   b436a:	f003 fead 	bl	b80c8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b436e:	a805      	add	r0, sp, #20
   b4370:	f7ff fed6 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4374:	e7df      	b.n	b4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4376:	9805      	ldr	r0, [sp, #20]
   b4378:	3001      	adds	r0, #1
   b437a:	f004 fcfb 	bl	b8d74 <atoi>
   b437e:	2800      	cmp	r0, #0
   b4380:	dbc1      	blt.n	b4306 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4382:	9805      	ldr	r0, [sp, #20]
   b4384:	3001      	adds	r0, #1
   b4386:	f004 fcf5 	bl	b8d74 <atoi>
   b438a:	300e      	adds	r0, #14
   b438c:	b2c4      	uxtb	r4, r0
   b438e:	e7bb      	b.n	b4308 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4390:	a805      	add	r0, sp, #20
   b4392:	f7ff febb 	bl	b410c <_ZNK10BlynkParam8iterator5asIntEv>
   b4396:	e7f9      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4398:	f247 7364 	movw	r3, #30564	; 0x7764
   b439c:	429d      	cmp	r5, r3
   b439e:	d04f      	beq.n	b4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b43a0:	f247 7376 	movw	r3, #30582	; 0x7776
   b43a4:	429d      	cmp	r5, r3
   b43a6:	f000 8097 	beq.w	b44d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b43aa:	f247 7361 	movw	r3, #30561	; 0x7761
   b43ae:	429d      	cmp	r5, r3
   b43b0:	d06f      	beq.n	b4492 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b43b2:	2300      	movs	r3, #0
   b43b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b43b8:	2202      	movs	r2, #2
   b43ba:	9200      	str	r2, [sp, #0]
   b43bc:	8b72      	ldrh	r2, [r6, #26]
   b43be:	4619      	mov	r1, r3
   b43c0:	e03a      	b.n	b4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b43c2:	9805      	ldr	r0, [sp, #20]
   b43c4:	3001      	adds	r0, #1
   b43c6:	f004 fcd5 	bl	b8d74 <atoi>
   b43ca:	2800      	cmp	r0, #0
   b43cc:	dbbf      	blt.n	b434e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b43ce:	9805      	ldr	r0, [sp, #20]
   b43d0:	3001      	adds	r0, #1
   b43d2:	f004 fccf 	bl	b8d74 <atoi>
   b43d6:	300e      	adds	r0, #14
   b43d8:	b2c4      	uxtb	r4, r0
   b43da:	e7b9      	b.n	b4350 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b43dc:	a805      	add	r0, sp, #20
   b43de:	f7ff fe95 	bl	b410c <_ZNK10BlynkParam8iterator5asIntEv>
   b43e2:	e7f9      	b.n	b43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b43e4:	4631      	mov	r1, r6
   b43e6:	4648      	mov	r0, r9
   b43e8:	f004 fd10 	bl	b8e0c <strcmp>
   b43ec:	b128      	cbz	r0, b43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b43ee:	4641      	mov	r1, r8
   b43f0:	4648      	mov	r0, r9
   b43f2:	f004 fd0b 	bl	b8e0c <strcmp>
   b43f6:	2800      	cmp	r0, #0
   b43f8:	d1b9      	bne.n	b436e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b43fa:	2101      	movs	r1, #1
   b43fc:	e7b4      	b.n	b4368 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b43fe:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4400:	4945      	ldr	r1, [pc, #276]	; (b4518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4402:	9307      	str	r3, [sp, #28]
   b4404:	a807      	add	r0, sp, #28
   b4406:	2310      	movs	r3, #16
   b4408:	2500      	movs	r5, #0
   b440a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b440e:	f7ff fe96 	bl	b413e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4412:	a807      	add	r0, sp, #28
   b4414:	4621      	mov	r1, r4
   b4416:	f7ff feaf 	bl	b4178 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b441a:	4620      	mov	r0, r4
   b441c:	f003 fe7e 	bl	b811c <digitalRead>
        rsp.add(analogRead(pin));
   b4420:	4601      	mov	r1, r0
   b4422:	a807      	add	r0, sp, #28
   b4424:	f7ff feba 	bl	b419c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4428:	9b08      	ldr	r3, [sp, #32]
   b442a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b442e:	3b01      	subs	r3, #1
   b4430:	9300      	str	r3, [sp, #0]
   b4432:	9b07      	ldr	r3, [sp, #28]
   b4434:	462a      	mov	r2, r5
   b4436:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4438:	4630      	mov	r0, r6
   b443a:	f000 fa83 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b443e:	e013      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4440:	a805      	add	r0, sp, #20
   b4442:	f7ff fe6d 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
   b4446:	6803      	ldr	r3, [r0, #0]
   b4448:	429f      	cmp	r7, r3
   b444a:	d90d      	bls.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b444c:	b2a4      	uxth	r4, r4
   b444e:	2101      	movs	r1, #1
   b4450:	4620      	mov	r0, r4
   b4452:	f003 fe39 	bl	b80c8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4456:	a805      	add	r0, sp, #20
   b4458:	f7ff fe58 	bl	b410c <_ZNK10BlynkParam8iterator5asIntEv>
   b445c:	1e01      	subs	r1, r0, #0
   b445e:	bf18      	it	ne
   b4460:	2101      	movne	r1, #1
   b4462:	4620      	mov	r0, r4
   b4464:	f003 fe41 	bl	b80ea <digitalWrite>
    }
}
   b4468:	b00f      	add	sp, #60	; 0x3c
   b446a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b446e:	ab0a      	add	r3, sp, #40	; 0x28
   b4470:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4472:	a807      	add	r0, sp, #28
   b4474:	2310      	movs	r3, #16
   b4476:	4929      	ldr	r1, [pc, #164]	; (b451c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b4478:	2500      	movs	r5, #0
   b447a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b447e:	f7ff fe5e 	bl	b413e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4482:	a807      	add	r0, sp, #28
   b4484:	4621      	mov	r1, r4
   b4486:	f7ff fe77 	bl	b4178 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b448a:	4620      	mov	r0, r4
   b448c:	f003 fe59 	bl	b8142 <analogRead>
   b4490:	e7c6      	b.n	b4420 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b4492:	a805      	add	r0, sp, #20
   b4494:	f7ff fe44 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
   b4498:	6803      	ldr	r3, [r0, #0]
   b449a:	429f      	cmp	r7, r3
   b449c:	d9e4      	bls.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b449e:	b2a4      	uxth	r4, r4
   b44a0:	2101      	movs	r1, #1
   b44a2:	4620      	mov	r0, r4
   b44a4:	f003 fe10 	bl	b80c8 <pinMode>
        analogWrite(pin, it.asInt());
   b44a8:	a805      	add	r0, sp, #20
   b44aa:	f7ff fe2f 	bl	b410c <_ZNK10BlynkParam8iterator5asIntEv>
   b44ae:	4601      	mov	r1, r0
   b44b0:	4620      	mov	r0, r4
   b44b2:	f003 fe5d 	bl	b8170 <_Z11analogWritetm>
    } break;
   b44b6:	e7d7      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b44b8:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b44ba:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b44be:	f002 f9e9 	bl	b6894 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b44c2:	4603      	mov	r3, r0
            handler(req);
   b44c4:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b44c6:	b123      	cbz	r3, b44d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b44c8:	4a15      	ldr	r2, [pc, #84]	; (b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b44ca:	4293      	cmp	r3, r2
   b44cc:	d001      	beq.n	b44d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b44ce:	4798      	blx	r3
   b44d0:	e7ca      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b44d2:	f002 f9dc 	bl	b688e <BlynkWidgetRead>
        }
    }
   b44d6:	e7c7      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b44d8:	a805      	add	r0, sp, #20
   b44da:	f7ff fe21 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b44de:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b44e0:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b44e4:	eba3 0109 	sub.w	r1, r3, r9
   b44e8:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b44ec:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b44ee:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b44f2:	910c      	str	r1, [sp, #48]	; 0x30
   b44f4:	f002 f9d8 	bl	b68a8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b44f8:	4603      	mov	r3, r0
            handler(req, param);
   b44fa:	a90a      	add	r1, sp, #40	; 0x28
   b44fc:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b44fe:	b123      	cbz	r3, b450a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4500:	4a08      	ldr	r2, [pc, #32]	; (b4524 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4502:	4293      	cmp	r3, r2
   b4504:	d001      	beq.n	b450a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4506:	4798      	blx	r3
   b4508:	e7ae      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b450a:	f002 f9c1 	bl	b6890 <BlynkWidgetWrite>
    } break;
   b450e:	e7ab      	b.n	b4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4510:	000b906c 	.word	0x000b906c
   b4514:	000b906f 	.word	0x000b906f
   b4518:	000b9077 	.word	0x000b9077
   b451c:	000b907a 	.word	0x000b907a
   b4520:	000b688f 	.word	0x000b688f
   b4524:	000b6891 	.word	0x000b6891
   b4528:	000b9073 	.word	0x000b9073

000b452c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4530:	b08c      	sub	sp, #48	; 0x30
   b4532:	af04      	add	r7, sp, #16
   b4534:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4536:	2205      	movs	r2, #5
   b4538:	6800      	ldr	r0, [r0, #0]
   b453a:	1d39      	adds	r1, r7, #4
   b453c:	f003 f8b5 	bl	b76aa <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4540:	b398      	cbz	r0, b45aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4542:	2805      	cmp	r0, #5
   b4544:	d004      	beq.n	b4550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4546:	2000      	movs	r0, #0
}
   b4548:	3720      	adds	r7, #32
   b454a:	46bd      	mov	sp, r7
   b454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4550:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4554:	ba5b      	rev16	r3, r3
   b4556:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4558:	f8a7 3005 	strh.w	r3, [r7, #5]
   b455c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4560:	ba5b      	rev16	r3, r3
   b4562:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b4566:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b456a:	2a00      	cmp	r2, #0
   b456c:	d0eb      	beq.n	b4546 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b456e:	793b      	ldrb	r3, [r7, #4]
   b4570:	bb23      	cbnz	r3, b45bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b4572:	f002 f98a 	bl	b688a <_Z11BlynkMillisv>
   b4576:	4602      	mov	r2, r0
   b4578:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b457a:	7f60      	ldrb	r0, [r4, #29]
   b457c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4580:	b9c0      	cbnz	r0, b45b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b4582:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b4586:	2901      	cmp	r1, #1
   b4588:	d114      	bne.n	b45b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b458a:	2b09      	cmp	r3, #9
   b458c:	d00f      	beq.n	b45ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b458e:	2bc8      	cmp	r3, #200	; 0xc8
   b4590:	d001      	beq.n	b4596 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b4592:	2b04      	cmp	r3, #4
   b4594:	d1d8      	bne.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b4596:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b4598:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b459a:	4620      	mov	r0, r4
                state = CONNECTED;
   b459c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b459e:	f000 fa7f 	bl	b4aa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b45a2:	f7ff fda7 	bl	b40f4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b45a6:	f002 f974 	bl	b6892 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b45aa:	2001      	movs	r0, #1
   b45ac:	e7cc      	b.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b45ae:	2303      	movs	r3, #3
   b45b0:	7763      	strb	r3, [r4, #29]
                break;
   b45b2:	e7c9      	b.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b45b4:	1f58      	subs	r0, r3, #5
   b45b6:	bf18      	it	ne
   b45b8:	2001      	movne	r0, #1
   b45ba:	e7c5      	b.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b45bc:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b45c0:	d903      	bls.n	b45ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b45c2:	4620      	mov	r0, r4
   b45c4:	f7ff fe78 	bl	b42b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b45c8:	e7ef      	b.n	b45aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b45ca:	f108 0308 	add.w	r3, r8, #8
   b45ce:	466e      	mov	r6, sp
   b45d0:	08db      	lsrs	r3, r3, #3
   b45d2:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b45d6:	469d      	mov	sp, r3
   b45d8:	ad04      	add	r5, sp, #16
   b45da:	6820      	ldr	r0, [r4, #0]
   b45dc:	4642      	mov	r2, r8
   b45de:	4629      	mov	r1, r5
   b45e0:	f003 f863 	bl	b76aa <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b45e4:	4580      	cmp	r8, r0
   b45e6:	f04f 0000 	mov.w	r0, #0
   b45ea:	d17f      	bne.n	b46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b45ec:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b45f0:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b45f2:	f002 f94a 	bl	b688a <_Z11BlynkMillisv>
    switch (hdr.type)
   b45f6:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b45f8:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b45fa:	2b14      	cmp	r3, #20
   b45fc:	f000 80a6 	beq.w	b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4600:	d848      	bhi.n	b4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4602:	2b0f      	cmp	r3, #15
   b4604:	f000 80a2 	beq.w	b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4608:	d807      	bhi.n	b461a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b460a:	2b02      	cmp	r3, #2
   b460c:	d048      	beq.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b460e:	2b06      	cmp	r3, #6
   b4610:	d051      	beq.n	b46b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4612:	4620      	mov	r0, r4
   b4614:	f7ff fe50 	bl	b42b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4618:	e058      	b.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b461a:	2b11      	cmp	r3, #17
   b461c:	d1f9      	bne.n	b4612 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b461e:	2300      	movs	r3, #0
   b4620:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4622:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4626:	442b      	add	r3, r5
        if (it >= param.end())
   b4628:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b462a:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b462e:	d24d      	bcs.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4630:	f107 000c 	add.w	r0, r7, #12
   b4634:	f8d5 8000 	ldr.w	r8, [r5]
   b4638:	f7ff fd72 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b463c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b463e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4642:	1b5d      	subs	r5, r3, r5
   b4644:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4646:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b464a:	687b      	ldr	r3, [r7, #4]
   b464c:	61fd      	str	r5, [r7, #28]
   b464e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4652:	8363      	strh	r3, [r4, #26]
   b4654:	4b64      	ldr	r3, [pc, #400]	; (b47e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4656:	4598      	cmp	r8, r3
   b4658:	f000 80bf 	beq.w	b47da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b465c:	f200 808c 	bhi.w	b4778 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4660:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4664:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4668:	4413      	add	r3, r2
   b466a:	4598      	cmp	r8, r3
   b466c:	f000 809d 	beq.w	b47aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4670:	d879      	bhi.n	b4766 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b4672:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b4676:	3b06      	subs	r3, #6
   b4678:	4598      	cmp	r8, r3
   b467a:	f000 809c 	beq.w	b47b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b467e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4682:	3303      	adds	r3, #3
   b4684:	4598      	cmp	r8, r3
   b4686:	d16b      	bne.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4688:	f107 0114 	add.w	r1, r7, #20
   b468c:	4638      	mov	r0, r7
   b468e:	f002 f8ff 	bl	b6890 <BlynkWidgetWrite>
   b4692:	e065      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b4694:	2b29      	cmp	r3, #41	; 0x29
   b4696:	d01b      	beq.n	b46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b4698:	2b37      	cmp	r3, #55	; 0x37
   b469a:	d017      	beq.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b469c:	2b1d      	cmp	r3, #29
   b469e:	d1b8      	bne.n	b4612 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b46a0:	7f63      	ldrb	r3, [r4, #29]
   b46a2:	b943      	cbnz	r3, b46b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b46a4:	2301      	movs	r3, #1
   b46a6:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b46a8:	4620      	mov	r0, r4
   b46aa:	f000 f9f9 	bl	b4aa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b46ae:	f7ff fd21 	bl	b40f4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b46b2:	f002 f8ee 	bl	b6892 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b46b6:	2300      	movs	r3, #0
   b46b8:	21c8      	movs	r1, #200	; 0xc8
   b46ba:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b46be:	9100      	str	r1, [sp, #0]
   b46c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b46c4:	4619      	mov	r1, r3
   b46c6:	4620      	mov	r0, r4
   b46c8:	f000 f93c 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b46cc:	2001      	movs	r0, #1
   b46ce:	e00d      	b.n	b46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b46d0:	68a3      	ldr	r3, [r4, #8]
   b46d2:	b91b      	cbnz	r3, b46dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b46d4:	2040      	movs	r0, #64	; 0x40
   b46d6:	f002 fc23 	bl	b6f20 <malloc>
   b46da:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b46dc:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b46e0:	44a8      	add	r8, r5
        if (it >= param.end())
   b46e2:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b46e4:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b46e8:	d302      	bcc.n	b46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b46ea:	2000      	movs	r0, #0
   b46ec:	46b5      	mov	sp, r6
   b46ee:	e72b      	b.n	b4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b46f0:	4629      	mov	r1, r5
   b46f2:	2240      	movs	r2, #64	; 0x40
   b46f4:	68a0      	ldr	r0, [r4, #8]
   b46f6:	f004 fb9b 	bl	b8e30 <strncpy>
        redir_serv[63] = '\0';
   b46fa:	68a3      	ldr	r3, [r4, #8]
   b46fc:	2500      	movs	r5, #0
   b46fe:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4702:	f107 0014 	add.w	r0, r7, #20
   b4706:	f7ff fd0b 	bl	b4120 <_ZN10BlynkParam8iteratorppEv>
   b470a:	6803      	ldr	r3, [r0, #0]
   b470c:	4598      	cmp	r8, r3
   b470e:	d91b      	bls.n	b4748 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4710:	6978      	ldr	r0, [r7, #20]
   b4712:	b120      	cbz	r0, b471e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b4714:	69bb      	ldr	r3, [r7, #24]
   b4716:	4298      	cmp	r0, r3
   b4718:	d214      	bcs.n	b4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b471a:	f004 fb2f 	bl	b8d7c <atol>
            redir_port = it.asLong();
   b471e:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4720:	6820      	ldr	r0, [r4, #0]
   b4722:	f003 fa7b 	bl	b7c1c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4726:	6823      	ldr	r3, [r4, #0]
   b4728:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b472a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b472c:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b472e:	2300      	movs	r3, #0
   b4730:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4732:	f002 f8aa 	bl	b688a <_Z11BlynkMillisv>
   b4736:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b473a:	3808      	subs	r0, #8
   b473c:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4740:	6160      	str	r0, [r4, #20]
   b4742:	e7c3      	b.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4744:	4628      	mov	r0, r5
   b4746:	e7ea      	b.n	b471e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4748:	2550      	movs	r5, #80	; 0x50
   b474a:	e7e9      	b.n	b4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b474c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b474e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4752:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4756:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4758:	4629      	mov	r1, r5
   b475a:	4620      	mov	r0, r4
   b475c:	f7ff fdb6 	bl	b42cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4760:	2300      	movs	r3, #0
   b4762:	8363      	strh	r3, [r4, #26]
   b4764:	e7b2      	b.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4766:	4b21      	ldr	r3, [pc, #132]	; (b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b4768:	4598      	cmp	r8, r3
   b476a:	d1f9      	bne.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b476c:	f107 0114 	add.w	r1, r7, #20
   b4770:	4638      	mov	r0, r7
   b4772:	f002 f88d 	bl	b6890 <BlynkWidgetWrite>
   b4776:	e7f3      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4778:	4b1d      	ldr	r3, [pc, #116]	; (b47f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b477a:	4598      	cmp	r8, r3
   b477c:	d021      	beq.n	b47c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b477e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4782:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4786:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b478a:	4598      	cmp	r8, r3
   b478c:	d01f      	beq.n	b47ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b478e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4792:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b4796:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b479a:	4598      	cmp	r8, r3
   b479c:	d1e0      	bne.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b479e:	f107 0114 	add.w	r1, r7, #20
   b47a2:	4638      	mov	r0, r7
   b47a4:	f002 f874 	bl	b6890 <BlynkWidgetWrite>
   b47a8:	e7da      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b47aa:	f107 0114 	add.w	r1, r7, #20
   b47ae:	4638      	mov	r0, r7
   b47b0:	f002 f86e 	bl	b6890 <BlynkWidgetWrite>
   b47b4:	e7d4      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b47b6:	f107 0114 	add.w	r1, r7, #20
   b47ba:	4638      	mov	r0, r7
   b47bc:	f002 f868 	bl	b6890 <BlynkWidgetWrite>
   b47c0:	e7ce      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b47c2:	f107 0114 	add.w	r1, r7, #20
   b47c6:	4638      	mov	r0, r7
   b47c8:	f002 f862 	bl	b6890 <BlynkWidgetWrite>
   b47cc:	e7c8      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b47ce:	f107 0114 	add.w	r1, r7, #20
   b47d2:	4638      	mov	r0, r7
   b47d4:	f002 f85c 	bl	b6890 <BlynkWidgetWrite>
   b47d8:	e7c2      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b47da:	f107 0114 	add.w	r1, r7, #20
   b47de:	4638      	mov	r0, r7
   b47e0:	f002 f856 	bl	b6890 <BlynkWidgetWrite>
   b47e4:	e7bc      	b.n	b4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b47e6:	bf00      	nop
   b47e8:	00736676 	.word	0x00736676
   b47ec:	00676264 	.word	0x00676264
   b47f0:	6e6f6361 	.word	0x6e6f6361

000b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b47f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47f8:	4604      	mov	r4, r0
   b47fa:	b08c      	sub	sp, #48	; 0x30
   b47fc:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b47fe:	f7ff fc79 	bl	b40f4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4802:	7f63      	ldrb	r3, [r4, #29]
   b4804:	2b02      	cmp	r3, #2
   b4806:	d01e      	beq.n	b4846 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4808:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b480a:	8b62      	ldrh	r2, [r4, #26]
   b480c:	3301      	adds	r3, #1
   b480e:	b2db      	uxtb	r3, r3
   b4810:	7723      	strb	r3, [r4, #28]
   b4812:	b9aa      	cbnz	r2, b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4814:	2b02      	cmp	r3, #2
   b4816:	d813      	bhi.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4818:	6820      	ldr	r0, [r4, #0]
   b481a:	f003 f8c7 	bl	b79ac <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b481e:	b1a8      	cbz	r0, b484c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4820:	b925      	cbnz	r5, b482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b4822:	6820      	ldr	r0, [r4, #0]
   b4824:	f003 f9a0 	bl	b7b68 <_ZN9TCPClient9availableEv>
   b4828:	2800      	cmp	r0, #0
   b482a:	dd0f      	ble.n	b484c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b482c:	4620      	mov	r0, r4
   b482e:	f7ff fe7d 	bl	b452c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4832:	2800      	cmp	r0, #0
   b4834:	d1f5      	bne.n	b4822 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b4836:	6820      	ldr	r0, [r4, #0]
   b4838:	f003 f9f0 	bl	b7c1c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b483c:	f002 f829 	bl	b6892 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4840:	7f23      	ldrb	r3, [r4, #28]
   b4842:	3b01      	subs	r3, #1
   b4844:	7723      	strb	r3, [r4, #28]
}
   b4846:	b00c      	add	sp, #48	; 0x30
   b4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b484c:	f002 f81d 	bl	b688a <_Z11BlynkMillisv>
   b4850:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4852:	6820      	ldr	r0, [r4, #0]
   b4854:	f003 f8aa 	bl	b79ac <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4858:	7f67      	ldrb	r7, [r4, #29]
   b485a:	2f01      	cmp	r7, #1
   b485c:	4606      	mov	r6, r0
   b485e:	d124      	bne.n	b48aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4860:	b920      	cbnz	r0, b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4862:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4864:	4620      	mov	r0, r4
   b4866:	f7ff fd27 	bl	b42b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b486a:	e7e9      	b.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b486c:	68e3      	ldr	r3, [r4, #12]
   b486e:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4872:	1aeb      	subs	r3, r5, r3
   b4874:	4293      	cmp	r3, r2
   b4876:	d8f5      	bhi.n	b4864 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4878:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b487c:	4293      	cmp	r3, r2
   b487e:	d803      	bhi.n	b4888 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4880:	6923      	ldr	r3, [r4, #16]
   b4882:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4884:	4293      	cmp	r3, r2
   b4886:	d9db      	bls.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4888:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b488a:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b488e:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4890:	4293      	cmp	r3, r2
   b4892:	d9d5      	bls.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4894:	2300      	movs	r3, #0
   b4896:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b489a:	9300      	str	r3, [sp, #0]
   b489c:	461a      	mov	r2, r3
   b489e:	2106      	movs	r1, #6
   b48a0:	4620      	mov	r0, r4
   b48a2:	f000 f84f 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b48a6:	6165      	str	r5, [r4, #20]
                return false;
   b48a8:	e7ca      	b.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b48aa:	2f00      	cmp	r7, #0
   b48ac:	d1c8      	bne.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b48ae:	6963      	ldr	r3, [r4, #20]
   b48b0:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b48b2:	b140      	cbz	r0, b48c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b48b4:	f241 7270 	movw	r2, #6000	; 0x1770
   b48b8:	4293      	cmp	r3, r2
   b48ba:	d9c1      	bls.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b48bc:	6820      	ldr	r0, [r4, #0]
   b48be:	f003 f9ad 	bl	b7c1c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b48c2:	7767      	strb	r7, [r4, #29]
            return false;
   b48c4:	e7bc      	b.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b48c6:	f241 3288 	movw	r2, #5000	; 0x1388
   b48ca:	4293      	cmp	r3, r2
   b48cc:	d9b8      	bls.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b48ce:	6820      	ldr	r0, [r4, #0]
   b48d0:	f003 f9a4 	bl	b7c1c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b48d4:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b48d8:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b48dc:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b48e0:	f1be 0f00 	cmp.w	lr, #0
   b48e4:	d01b      	beq.n	b491e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b48e6:	4633      	mov	r3, r6
   b48e8:	4642      	mov	r2, r8
   b48ea:	4671      	mov	r1, lr
   b48ec:	4660      	mov	r0, ip
   b48ee:	f002 ffdf 	bl	b78b0 <_ZN9TCPClient7connectEPKctm>
   b48f2:	2801      	cmp	r0, #1
   b48f4:	d1d7      	bne.n	b48a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48f6:	6863      	ldr	r3, [r4, #4]
   b48f8:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b48fa:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48fc:	4618      	mov	r0, r3
            msgIdOut = 1;
   b48fe:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4900:	f004 fa8e 	bl	b8e20 <strlen>
   b4904:	2200      	movs	r2, #0
   b4906:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b490a:	9b05      	ldr	r3, [sp, #20]
   b490c:	9000      	str	r0, [sp, #0]
   b490e:	462a      	mov	r2, r5
   b4910:	211d      	movs	r1, #29
   b4912:	4620      	mov	r0, r4
   b4914:	f000 f816 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4918:	6923      	ldr	r3, [r4, #16]
   b491a:	6163      	str	r3, [r4, #20]
            return true;
   b491c:	e790      	b.n	b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b491e:	4b08      	ldr	r3, [pc, #32]	; (b4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4920:	9306      	str	r3, [sp, #24]
   b4922:	f10c 0720 	add.w	r7, ip, #32
   b4926:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4928:	ae07      	add	r6, sp, #28
   b492a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b492c:	683b      	ldr	r3, [r7, #0]
   b492e:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4930:	4642      	mov	r2, r8
   b4932:	4673      	mov	r3, lr
   b4934:	a906      	add	r1, sp, #24
   b4936:	4660      	mov	r0, ip
   b4938:	f003 f89a 	bl	b7a70 <_ZN9TCPClient7connectE9IPAddresstm>
   b493c:	e7d9      	b.n	b48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b493e:	bf00      	nop
   b4940:	000ba0d4 	.word	0x000ba0d4

000b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4948:	b083      	sub	sp, #12
   b494a:	af00      	add	r7, sp, #0
   b494c:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b494e:	6800      	ldr	r0, [r0, #0]
   b4950:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4952:	4688      	mov	r8, r1
   b4954:	4616      	mov	r6, r2
   b4956:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4958:	46eb      	mov	fp, sp
   b495a:	f003 f827 	bl	b79ac <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b495e:	2800      	cmp	r0, #0
   b4960:	d07f      	beq.n	b4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4962:	f1b8 0f1d 	cmp.w	r8, #29
   b4966:	d804      	bhi.n	b4972 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4968:	4b4c      	ldr	r3, [pc, #304]	; (b4a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b496a:	fa23 f308 	lsr.w	r3, r3, r8
   b496e:	07db      	lsls	r3, r3, #31
   b4970:	d402      	bmi.n	b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4972:	7f63      	ldrb	r3, [r4, #29]
   b4974:	2b01      	cmp	r3, #1
   b4976:	d174      	bne.n	b4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4978:	b946      	cbnz	r6, b498c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b497a:	8b66      	ldrh	r6, [r4, #26]
   b497c:	b936      	cbnz	r6, b498c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b497e:	8b23      	ldrh	r3, [r4, #24]
   b4980:	3301      	adds	r3, #1
   b4982:	b29b      	uxth	r3, r3
   b4984:	2b00      	cmp	r3, #0
   b4986:	d071      	beq.n	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4988:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b498a:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b498c:	f1a8 030c 	sub.w	r3, r8, #12
   b4990:	2b08      	cmp	r3, #8
   b4992:	d816      	bhi.n	b49c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4994:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4998:	4293      	cmp	r3, r2
   b499a:	bf38      	it	cc
   b499c:	4613      	movcc	r3, r2
   b499e:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b49a2:	f001 ff72 	bl	b688a <_Z11BlynkMillisv>
   b49a6:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b49aa:	2800      	cmp	r0, #0
   b49ac:	db60      	blt.n	b4a70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b49ae:	2100      	movs	r1, #0
   b49b0:	4620      	mov	r0, r4
   b49b2:	f7ff ff1f 	bl	b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b49b6:	f001 ff68 	bl	b688a <_Z11BlynkMillisv>
   b49ba:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b49be:	2800      	cmp	r0, #0
   b49c0:	daf5      	bge.n	b49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b49c2:	f1b9 0f00 	cmp.w	r9, #0
   b49c6:	d05a      	beq.n	b4a7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b49c8:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b49ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b49cc:	2a00      	cmp	r2, #0
   b49ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b49d0:	bf08      	it	eq
   b49d2:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b49d4:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b49d8:	f10a 0307 	add.w	r3, sl, #7
   b49dc:	f023 0307 	bic.w	r3, r3, #7
   b49e0:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b49e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b49e6:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b49ea:	18ea      	adds	r2, r5, r3
   b49ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b49f0:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b49f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b49f6:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b49fa:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b49fe:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4a02:	f1b9 0f00 	cmp.w	r9, #0
   b4a06:	d03c      	beq.n	b4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4a08:	2d00      	cmp	r5, #0
   b4a0a:	d03a      	beq.n	b4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4a0c:	462a      	mov	r2, r5
   b4a0e:	4649      	mov	r1, r9
   b4a10:	f10d 0005 	add.w	r0, sp, #5
   b4a14:	f004 f9b6 	bl	b8d84 <memcpy>
        pos += length;
   b4a18:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4a1c:	b13b      	cbz	r3, b4a2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4a20:	b12b      	cbz	r3, b4a2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4a22:	461a      	mov	r2, r3
   b4a24:	687b      	ldr	r3, [r7, #4]
   b4a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4a28:	4418      	add	r0, r3
   b4a2a:	f004 f9ab 	bl	b8d84 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4a2e:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4a30:	4555      	cmp	r5, sl
   b4a32:	d22a      	bcs.n	b4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4a34:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4a38:	687b      	ldr	r3, [r7, #4]
   b4a3a:	6820      	ldr	r0, [r4, #0]
   b4a3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4a40:	bf28      	it	cs
   b4a42:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4a46:	1959      	adds	r1, r3, r5
   b4a48:	f002 fe63 	bl	b7712 <_ZN9TCPClient5writeEPKhj>
   b4a4c:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4a4e:	2000      	movs	r0, #0
   b4a50:	f001 ff19 	bl	b6886 <_Z10BlynkDelaym>
        if (w == 0) {
   b4a54:	b9be      	cbnz	r6, b4a86 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4a56:	6820      	ldr	r0, [r4, #0]
   b4a58:	f003 f8e0 	bl	b7c1c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4a5c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4a5e:	f001 ff18 	bl	b6892 <BlynkNoOpCbk>
}
   b4a62:	370c      	adds	r7, #12
   b4a64:	46dd      	mov	sp, fp
   b4a66:	46bd      	mov	sp, r7
   b4a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4a6c:	2301      	movs	r3, #1
   b4a6e:	e78b      	b.n	b4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4a70:	7f21      	ldrb	r1, [r4, #28]
   b4a72:	2900      	cmp	r1, #0
   b4a74:	d1a5      	bne.n	b49c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4a76:	4620      	mov	r0, r4
   b4a78:	f7ff febc 	bl	b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4a7c:	e7a1      	b.n	b49c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a7e:	2305      	movs	r3, #5
   b4a80:	e7a3      	b.n	b49ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4a82:	2005      	movs	r0, #5
   b4a84:	e7c9      	b.n	b4a1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4a86:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4a88:	e7d2      	b.n	b4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4a8a:	d003      	beq.n	b4a94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	f7ff fc13 	bl	b42b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4a92:	e7e6      	b.n	b4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4a94:	f001 fef9 	bl	b688a <_Z11BlynkMillisv>
   b4a98:	6120      	str	r0, [r4, #16]
   b4a9a:	e7e2      	b.n	b4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4a9c:	20000045 	.word	0x20000045

000b4aa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4aa0:	b500      	push	{lr}
   b4aa2:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4aa4:	ab04      	add	r3, sp, #16
   b4aa6:	2200      	movs	r2, #0
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	234f      	movs	r3, #79	; 0x4f
   b4aac:	9300      	str	r3, [sp, #0]
   b4aae:	9202      	str	r2, [sp, #8]
   b4ab0:	4b03      	ldr	r3, [pc, #12]	; (b4ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4ab2:	2111      	movs	r1, #17
   b4ab4:	f7ff ff46 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4ab8:	b015      	add	sp, #84	; 0x54
   b4aba:	f85d fb04 	ldr.w	pc, [sp], #4
   b4abe:	bf00      	nop
   b4ac0:	000b90db 	.word	0x000b90db

000b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b4ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ac6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4aca:	ab08      	add	r3, sp, #32
   b4acc:	2400      	movs	r4, #0
   b4ace:	4605      	mov	r5, r0
   b4ad0:	460f      	mov	r7, r1
   b4ad2:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b4ad4:	a805      	add	r0, sp, #20
   b4ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4ada:	490e      	ldr	r1, [pc, #56]	; (b4b14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b4adc:	4616      	mov	r6, r2
   b4ade:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b4ae2:	f7ff fb2c 	bl	b413e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b4ae6:	4639      	mov	r1, r7
   b4ae8:	a805      	add	r0, sp, #20
   b4aea:	f7ff fb45 	bl	b4178 <_ZN10BlynkParam3addEi>
        add(last);
   b4aee:	4631      	mov	r1, r6
   b4af0:	a805      	add	r0, sp, #20
   b4af2:	f7ff fb41 	bl	b4178 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4af6:	9b06      	ldr	r3, [sp, #24]
   b4af8:	3b01      	subs	r3, #1
   b4afa:	9300      	str	r3, [sp, #0]
   b4afc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4b00:	9b05      	ldr	r3, [sp, #20]
   b4b02:	4622      	mov	r2, r4
   b4b04:	2114      	movs	r1, #20
   b4b06:	4628      	mov	r0, r5
   b4b08:	f7ff ff1c 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4b0c:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4b12:	bf00      	nop
   b4b14:	000b907d 	.word	0x000b907d

000b4b18 <_Z14setLightPointsv>:
void setLightPoints() {
   b4b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b1c:	ed2d 8b02 	vpush	{d8}
        double voltage = (reading * 3.3) / 4095.0;
   b4b20:	f20f 39c4 	addw	r9, pc, #964	; 0x3c4
   b4b24:	e9d9 8900 	ldrd	r8, r9, [r9]
   b4b28:	a7eb      	add	r7, pc, #940	; (adr r7, b4ed8 <_Z14setLightPointsv+0x3c0>)
   b4b2a:	e9d7 6700 	ldrd	r6, r7, [r7]
void setLightPoints() {
   b4b2e:	b085      	sub	sp, #20
   b4b30:	f04f 0b00 	mov.w	fp, #0
    while (digitalRead(BUTTON_IN) == LOW) {
   b4b34:	2002      	movs	r0, #2
   b4b36:	f003 faf1 	bl	b811c <digitalRead>
   b4b3a:	4682      	mov	sl, r0
   b4b3c:	2800      	cmp	r0, #0
   b4b3e:	f000 8086 	beq.w	b4c4e <_Z14setLightPointsv+0x136>
        double voltage = (reading * 3.3) / 4095.0;
   b4b42:	a7e9      	add	r7, pc, #932	; (adr r7, b4ee8 <_Z14setLightPointsv+0x3d0>)
   b4b44:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (digitalRead(BUTTON_IN) == HIGH) {
   b4b48:	2002      	movs	r0, #2
   b4b4a:	f003 fae7 	bl	b811c <digitalRead>
   b4b4e:	2801      	cmp	r0, #1
   b4b50:	4605      	mov	r5, r0
   b4b52:	f040 80d3 	bne.w	b4cfc <_Z14setLightPointsv+0x1e4>
        lightPointTemp = map(analogRead(DIAL_IN), 0, 4095, 0, 65535);
   b4b56:	2013      	movs	r0, #19
   b4b58:	f003 faf3 	bl	b8142 <analogRead>
   b4b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4b60:	9300      	str	r3, [sp, #0]
   b4b62:	2300      	movs	r3, #0
   b4b64:	4619      	mov	r1, r3
   b4b66:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4b6a:	f002 fa11 	bl	b6f90 <_Z3mapiiiii>
   b4b6e:	fa1f fb80 	uxth.w	fp, r0
        uint16_t lightVal = proxSensor.getAmbient();
   b4b72:	48df      	ldr	r0, [pc, #892]	; (b4ef0 <_Z14setLightPointsv+0x3d8>)
        display.clearDisplay();
   b4b74:	4cdf      	ldr	r4, [pc, #892]	; (b4ef4 <_Z14setLightPointsv+0x3dc>)
        uint16_t lightVal = proxSensor.getAmbient();
   b4b76:	f001 fd66 	bl	b6646 <_ZN8VCNL404010getAmbientEv>
   b4b7a:	4681      	mov	r9, r0
        display.clearDisplay();
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f001 f9c7 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4b82:	f04f 0a00 	mov.w	sl, #0
        display.setTextSize(2);
   b4b86:	4620      	mov	r0, r4
   b4b88:	2102      	movs	r1, #2
   b4b8a:	f001 f808 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
        return printNumber(val, base) + t;
   b4b8e:	220a      	movs	r2, #10
   b4b90:	4659      	mov	r1, fp
   b4b92:	f8c4 a010 	str.w	sl, [r4, #16]
   b4b96:	4620      	mov	r0, r4
   b4b98:	f002 fc6b 	bl	b7472 <_ZN5Print11printNumberEmh>
        n += println();
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	f002 fc52 	bl	b7446 <_ZN5Print7printlnEv>
        display.setTextSize(1);
   b4ba2:	4629      	mov	r1, r5
   b4ba4:	4620      	mov	r0, r4
   b4ba6:	f000 fffa 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
        display.print("Light: ");
   b4baa:	49d3      	ldr	r1, [pc, #844]	; (b4ef8 <_Z14setLightPointsv+0x3e0>)
   b4bac:	4620      	mov	r0, r4
   b4bae:	f002 fc43 	bl	b7438 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4bb2:	220a      	movs	r2, #10
   b4bb4:	4649      	mov	r1, r9
   b4bb6:	4620      	mov	r0, r4
   b4bb8:	f002 fc5b 	bl	b7472 <_ZN5Print11printNumberEmh>
        n += println();
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	f002 fc42 	bl	b7446 <_ZN5Print7printlnEv>
        display.display();
   b4bc2:	4620      	mov	r0, r4
   b4bc4:	f001 fc12 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>
        uint16_t reading = analogRead(TEMP_IN);
   b4bc8:	2012      	movs	r0, #18
   b4bca:	f003 faba 	bl	b8142 <analogRead>
        double voltage = (reading * 3.3) / 4095.0;
   b4bce:	b280      	uxth	r0, r0
   b4bd0:	f003 fe26 	bl	b8820 <__aeabi_i2d>
   b4bd4:	4632      	mov	r2, r6
   b4bd6:	463b      	mov	r3, r7
   b4bd8:	f003 fe8c 	bl	b88f4 <__aeabi_dmul>
   b4bdc:	a3be      	add	r3, pc, #760	; (adr r3, b4ed8 <_Z14setLightPointsv+0x3c0>)
   b4bde:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4be2:	f003 ffb1 	bl	b8b48 <__aeabi_ddiv>
        double temperature = (voltage - 0.5) * 100;
   b4be6:	4bc5      	ldr	r3, [pc, #788]	; (b4efc <_Z14setLightPointsv+0x3e4>)
   b4be8:	2200      	movs	r2, #0
   b4bea:	f003 fccb 	bl	b8584 <__aeabi_dsub>
   b4bee:	4bc4      	ldr	r3, [pc, #784]	; (b4f00 <_Z14setLightPointsv+0x3e8>)
   b4bf0:	2200      	movs	r2, #0
   b4bf2:	f003 fe7f 	bl	b88f4 <__aeabi_dmul>
   b4bf6:	4602      	mov	r2, r0
   b4bf8:	460b      	mov	r3, r1
   b4bfa:	ec43 2b18 	vmov	d8, r2, r3
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4bfe:	a3b8      	add	r3, pc, #736	; (adr r3, b4ee0 <_Z14setLightPointsv+0x3c8>)
   b4c00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c04:	f003 fe76 	bl	b88f4 <__aeabi_dmul>
   b4c08:	4bbe      	ldr	r3, [pc, #760]	; (b4f04 <_Z14setLightPointsv+0x3ec>)
   b4c0a:	2200      	movs	r2, #0
   b4c0c:	f003 fcbc 	bl	b8588 <__adddf3>
   b4c10:	ec41 0b10 	vmov	d0, r0, r1
   b4c14:	f003 fc62 	bl	b84dc <round>
   b4c18:	ec59 8b10 	vmov	r8, r9, d0
        int temperatureC = round(temperature);
   b4c1c:	eeb0 0a48 	vmov.f32	s0, s16
   b4c20:	eef0 0a68 	vmov.f32	s1, s17
   b4c24:	f003 fc5a 	bl	b84dc <round>
   b4c28:	ec51 0b10 	vmov	r0, r1, d0
   b4c2c:	f004 f874 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V0, temperatureC);
   b4c30:	4651      	mov	r1, sl
        int temperatureC = round(temperature);
   b4c32:	4602      	mov	r2, r0
        Blynk.virtualWrite(V0, temperatureC);
   b4c34:	48b4      	ldr	r0, [pc, #720]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4c36:	f7ff ff45 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4c3a:	4649      	mov	r1, r9
   b4c3c:	4640      	mov	r0, r8
   b4c3e:	f004 f86b 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V1, temperatureF);
   b4c42:	4629      	mov	r1, r5
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4c44:	4602      	mov	r2, r0
        Blynk.virtualWrite(V1, temperatureF);
   b4c46:	48b0      	ldr	r0, [pc, #704]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4c48:	f7ff ff3c 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    while (digitalRead(BUTTON_IN) == HIGH) {
   b4c4c:	e77c      	b.n	b4b48 <_Z14setLightPointsv+0x30>
        display.clearDisplay();
   b4c4e:	4ca9      	ldr	r4, [pc, #676]	; (b4ef4 <_Z14setLightPointsv+0x3dc>)
   b4c50:	4620      	mov	r0, r4
   b4c52:	f001 f95d 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setTextSize(2);
   b4c56:	4620      	mov	r0, r4
   b4c58:	2102      	movs	r1, #2
   b4c5a:	f000 ffa0 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
   b4c5e:	f8c4 a010 	str.w	sl, [r4, #16]
        display.println("Release");
   b4c62:	49aa      	ldr	r1, [pc, #680]	; (b4f0c <_Z14setLightPointsv+0x3f4>)
   b4c64:	4620      	mov	r0, r4
   b4c66:	f002 fbfa 	bl	b745e <_ZN5Print7printlnEPKc>
        display.println("button.");
   b4c6a:	49a9      	ldr	r1, [pc, #676]	; (b4f10 <_Z14setLightPointsv+0x3f8>)
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	f002 fbf6 	bl	b745e <_ZN5Print7printlnEPKc>
        display.display();
   b4c72:	4620      	mov	r0, r4
   b4c74:	f001 fbba 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>
        uint16_t reading = analogRead(TEMP_IN);
   b4c78:	2012      	movs	r0, #18
   b4c7a:	f003 fa62 	bl	b8142 <analogRead>
        double voltage = (reading * 3.3) / 4095.0;
   b4c7e:	b280      	uxth	r0, r0
   b4c80:	f003 fdce 	bl	b8820 <__aeabi_i2d>
   b4c84:	4642      	mov	r2, r8
   b4c86:	464b      	mov	r3, r9
   b4c88:	f003 fe34 	bl	b88f4 <__aeabi_dmul>
   b4c8c:	4632      	mov	r2, r6
   b4c8e:	463b      	mov	r3, r7
   b4c90:	f003 ff5a 	bl	b8b48 <__aeabi_ddiv>
        double temperature = (voltage - 0.5) * 100;
   b4c94:	4b99      	ldr	r3, [pc, #612]	; (b4efc <_Z14setLightPointsv+0x3e4>)
   b4c96:	2200      	movs	r2, #0
   b4c98:	f003 fc74 	bl	b8584 <__aeabi_dsub>
   b4c9c:	4b98      	ldr	r3, [pc, #608]	; (b4f00 <_Z14setLightPointsv+0x3e8>)
   b4c9e:	2200      	movs	r2, #0
   b4ca0:	f003 fe28 	bl	b88f4 <__aeabi_dmul>
   b4ca4:	4602      	mov	r2, r0
   b4ca6:	460b      	mov	r3, r1
   b4ca8:	ec43 2b18 	vmov	d8, r2, r3
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4cac:	a38c      	add	r3, pc, #560	; (adr r3, b4ee0 <_Z14setLightPointsv+0x3c8>)
   b4cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cb2:	f003 fe1f 	bl	b88f4 <__aeabi_dmul>
   b4cb6:	4b93      	ldr	r3, [pc, #588]	; (b4f04 <_Z14setLightPointsv+0x3ec>)
   b4cb8:	2200      	movs	r2, #0
   b4cba:	f003 fc65 	bl	b8588 <__adddf3>
   b4cbe:	ec41 0b10 	vmov	d0, r0, r1
   b4cc2:	f003 fc0b 	bl	b84dc <round>
   b4cc6:	ec55 4b10 	vmov	r4, r5, d0
        int temperatureC = round(temperature);
   b4cca:	eeb0 0a48 	vmov.f32	s0, s16
   b4cce:	eef0 0a68 	vmov.f32	s1, s17
   b4cd2:	f003 fc03 	bl	b84dc <round>
   b4cd6:	ec51 0b10 	vmov	r0, r1, d0
   b4cda:	f004 f81d 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V0, temperatureC);
   b4cde:	4651      	mov	r1, sl
        int temperatureC = round(temperature);
   b4ce0:	4602      	mov	r2, r0
        Blynk.virtualWrite(V0, temperatureC);
   b4ce2:	4889      	ldr	r0, [pc, #548]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4ce4:	f7ff feee 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4ce8:	4629      	mov	r1, r5
   b4cea:	4620      	mov	r0, r4
   b4cec:	f004 f814 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V1, temperatureF);
   b4cf0:	2101      	movs	r1, #1
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4cf2:	4602      	mov	r2, r0
        Blynk.virtualWrite(V1, temperatureF);
   b4cf4:	4884      	ldr	r0, [pc, #528]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4cf6:	f7ff fee5 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    while (digitalRead(BUTTON_IN) == LOW) {
   b4cfa:	e71b      	b.n	b4b34 <_Z14setLightPointsv+0x1c>
    lightPoint1 = lightPointTemp;
   b4cfc:	4d85      	ldr	r5, [pc, #532]	; (b4f14 <_Z14setLightPointsv+0x3fc>)
        double voltage = (reading * 3.3) / 4095.0;
   b4cfe:	a77a      	add	r7, pc, #488	; (adr r7, b4ee8 <_Z14setLightPointsv+0x3d0>)
   b4d00:	e9d7 6700 	ldrd	r6, r7, [r7]
    lightPoint1 = lightPointTemp;
   b4d04:	f8a5 b000 	strh.w	fp, [r5]
    while (digitalRead(BUTTON_IN) == LOW) {
   b4d08:	2002      	movs	r0, #2
   b4d0a:	f003 fa07 	bl	b811c <digitalRead>
   b4d0e:	4604      	mov	r4, r0
   b4d10:	2800      	cmp	r0, #0
   b4d12:	f000 8088 	beq.w	b4e26 <_Z14setLightPointsv+0x30e>
        double voltage = (reading * 3.3) / 4095.0;
   b4d16:	a774      	add	r7, pc, #464	; (adr r7, b4ee8 <_Z14setLightPointsv+0x3d0>)
   b4d18:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (digitalRead(BUTTON_IN) == HIGH) {
   b4d1c:	2002      	movs	r0, #2
   b4d1e:	f003 f9fd 	bl	b811c <digitalRead>
   b4d22:	2801      	cmp	r0, #1
   b4d24:	4604      	mov	r4, r0
   b4d26:	f040 80f7 	bne.w	b4f18 <_Z14setLightPointsv+0x400>
        lightPointTemp = map(analogRead(DIAL_IN), 0, 4095, 0, 65535);
   b4d2a:	2013      	movs	r0, #19
   b4d2c:	f003 fa09 	bl	b8142 <analogRead>
   b4d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4d34:	9300      	str	r3, [sp, #0]
   b4d36:	2300      	movs	r3, #0
   b4d38:	4619      	mov	r1, r3
   b4d3a:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4d3e:	f002 f927 	bl	b6f90 <_Z3mapiiiii>
   b4d42:	fa1f fb80 	uxth.w	fp, r0
        uint16_t lightVal = proxSensor.getAmbient();
   b4d46:	486a      	ldr	r0, [pc, #424]	; (b4ef0 <_Z14setLightPointsv+0x3d8>)
        display.clearDisplay();
   b4d48:	f8df 81a8 	ldr.w	r8, [pc, #424]	; b4ef4 <_Z14setLightPointsv+0x3dc>
        uint16_t lightVal = proxSensor.getAmbient();
   b4d4c:	f001 fc7b 	bl	b6646 <_ZN8VCNL404010getAmbientEv>
   b4d50:	9003      	str	r0, [sp, #12]
        display.clearDisplay();
   b4d52:	4640      	mov	r0, r8
   b4d54:	f001 f8dc 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4d58:	f04f 0a00 	mov.w	sl, #0
        display.setTextSize(2);
   b4d5c:	4640      	mov	r0, r8
   b4d5e:	2102      	movs	r1, #2
   b4d60:	f000 ff1d 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
        return printNumber(val, base) + t;
   b4d64:	220a      	movs	r2, #10
   b4d66:	4659      	mov	r1, fp
   b4d68:	f8c8 a010 	str.w	sl, [r8, #16]
   b4d6c:	4640      	mov	r0, r8
   b4d6e:	f002 fb80 	bl	b7472 <_ZN5Print11printNumberEmh>
        n += println();
   b4d72:	4640      	mov	r0, r8
   b4d74:	f002 fb67 	bl	b7446 <_ZN5Print7printlnEv>
        display.setTextSize(1);
   b4d78:	4621      	mov	r1, r4
   b4d7a:	4640      	mov	r0, r8
   b4d7c:	f000 ff0f 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
        display.print("Light: ");
   b4d80:	495d      	ldr	r1, [pc, #372]	; (b4ef8 <_Z14setLightPointsv+0x3e0>)
   b4d82:	4640      	mov	r0, r8
   b4d84:	f002 fb58 	bl	b7438 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4d88:	9b03      	ldr	r3, [sp, #12]
   b4d8a:	220a      	movs	r2, #10
   b4d8c:	4619      	mov	r1, r3
   b4d8e:	4640      	mov	r0, r8
   b4d90:	f002 fb6f 	bl	b7472 <_ZN5Print11printNumberEmh>
        n += println();
   b4d94:	4640      	mov	r0, r8
   b4d96:	f002 fb56 	bl	b7446 <_ZN5Print7printlnEv>
        display.display();
   b4d9a:	4640      	mov	r0, r8
   b4d9c:	f001 fb26 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>
        uint16_t reading = analogRead(TEMP_IN);
   b4da0:	2012      	movs	r0, #18
   b4da2:	f003 f9ce 	bl	b8142 <analogRead>
        double voltage = (reading * 3.3) / 4095.0;
   b4da6:	b280      	uxth	r0, r0
   b4da8:	f003 fd3a 	bl	b8820 <__aeabi_i2d>
   b4dac:	4632      	mov	r2, r6
   b4dae:	463b      	mov	r3, r7
   b4db0:	f003 fda0 	bl	b88f4 <__aeabi_dmul>
   b4db4:	a348      	add	r3, pc, #288	; (adr r3, b4ed8 <_Z14setLightPointsv+0x3c0>)
   b4db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dba:	f003 fec5 	bl	b8b48 <__aeabi_ddiv>
        double temperature = (voltage - 0.5) * 100;
   b4dbe:	4b4f      	ldr	r3, [pc, #316]	; (b4efc <_Z14setLightPointsv+0x3e4>)
   b4dc0:	2200      	movs	r2, #0
   b4dc2:	f003 fbdf 	bl	b8584 <__aeabi_dsub>
   b4dc6:	4b4e      	ldr	r3, [pc, #312]	; (b4f00 <_Z14setLightPointsv+0x3e8>)
   b4dc8:	2200      	movs	r2, #0
   b4dca:	f003 fd93 	bl	b88f4 <__aeabi_dmul>
   b4dce:	4602      	mov	r2, r0
   b4dd0:	460b      	mov	r3, r1
   b4dd2:	ec43 2b18 	vmov	d8, r2, r3
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4dd6:	a342      	add	r3, pc, #264	; (adr r3, b4ee0 <_Z14setLightPointsv+0x3c8>)
   b4dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ddc:	f003 fd8a 	bl	b88f4 <__aeabi_dmul>
   b4de0:	4b48      	ldr	r3, [pc, #288]	; (b4f04 <_Z14setLightPointsv+0x3ec>)
   b4de2:	2200      	movs	r2, #0
   b4de4:	f003 fbd0 	bl	b8588 <__adddf3>
   b4de8:	ec41 0b10 	vmov	d0, r0, r1
   b4dec:	f003 fb76 	bl	b84dc <round>
   b4df0:	ec59 8b10 	vmov	r8, r9, d0
        int temperatureC = round(temperature);
   b4df4:	eeb0 0a48 	vmov.f32	s0, s16
   b4df8:	eef0 0a68 	vmov.f32	s1, s17
   b4dfc:	f003 fb6e 	bl	b84dc <round>
   b4e00:	ec51 0b10 	vmov	r0, r1, d0
   b4e04:	f003 ff88 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V0, temperatureC);
   b4e08:	4651      	mov	r1, sl
        int temperatureC = round(temperature);
   b4e0a:	4602      	mov	r2, r0
        Blynk.virtualWrite(V0, temperatureC);
   b4e0c:	483e      	ldr	r0, [pc, #248]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4e0e:	f7ff fe59 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4e12:	4649      	mov	r1, r9
   b4e14:	4640      	mov	r0, r8
   b4e16:	f003 ff7f 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V1, temperatureF);
   b4e1a:	4621      	mov	r1, r4
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4e1c:	4602      	mov	r2, r0
        Blynk.virtualWrite(V1, temperatureF);
   b4e1e:	483a      	ldr	r0, [pc, #232]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4e20:	f7ff fe50 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    while (digitalRead(BUTTON_IN) == HIGH) {
   b4e24:	e77a      	b.n	b4d1c <_Z14setLightPointsv+0x204>
        display.clearDisplay();
   b4e26:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b4ef4 <_Z14setLightPointsv+0x3dc>
   b4e2a:	4640      	mov	r0, r8
   b4e2c:	f001 f870 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setTextSize(2);
   b4e30:	4640      	mov	r0, r8
   b4e32:	2102      	movs	r1, #2
   b4e34:	f000 feb3 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
   b4e38:	f8c8 4010 	str.w	r4, [r8, #16]
        display.println("Release");
   b4e3c:	4933      	ldr	r1, [pc, #204]	; (b4f0c <_Z14setLightPointsv+0x3f4>)
   b4e3e:	4640      	mov	r0, r8
   b4e40:	f002 fb0d 	bl	b745e <_ZN5Print7printlnEPKc>
        display.println("button.");
   b4e44:	4932      	ldr	r1, [pc, #200]	; (b4f10 <_Z14setLightPointsv+0x3f8>)
   b4e46:	4640      	mov	r0, r8
   b4e48:	f002 fb09 	bl	b745e <_ZN5Print7printlnEPKc>
        display.display();
   b4e4c:	4640      	mov	r0, r8
   b4e4e:	f001 facd 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>
        uint16_t reading = analogRead(TEMP_IN);
   b4e52:	2012      	movs	r0, #18
   b4e54:	f003 f975 	bl	b8142 <analogRead>
        double voltage = (reading * 3.3) / 4095.0;
   b4e58:	b280      	uxth	r0, r0
   b4e5a:	f003 fce1 	bl	b8820 <__aeabi_i2d>
   b4e5e:	4632      	mov	r2, r6
   b4e60:	463b      	mov	r3, r7
   b4e62:	f003 fd47 	bl	b88f4 <__aeabi_dmul>
   b4e66:	a31c      	add	r3, pc, #112	; (adr r3, b4ed8 <_Z14setLightPointsv+0x3c0>)
   b4e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e6c:	f003 fe6c 	bl	b8b48 <__aeabi_ddiv>
        double temperature = (voltage - 0.5) * 100;
   b4e70:	4b22      	ldr	r3, [pc, #136]	; (b4efc <_Z14setLightPointsv+0x3e4>)
   b4e72:	2200      	movs	r2, #0
   b4e74:	f003 fb86 	bl	b8584 <__aeabi_dsub>
   b4e78:	4b21      	ldr	r3, [pc, #132]	; (b4f00 <_Z14setLightPointsv+0x3e8>)
   b4e7a:	2200      	movs	r2, #0
   b4e7c:	f003 fd3a 	bl	b88f4 <__aeabi_dmul>
   b4e80:	4602      	mov	r2, r0
   b4e82:	460b      	mov	r3, r1
   b4e84:	ec43 2b18 	vmov	d8, r2, r3
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4e88:	a315      	add	r3, pc, #84	; (adr r3, b4ee0 <_Z14setLightPointsv+0x3c8>)
   b4e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e8e:	f003 fd31 	bl	b88f4 <__aeabi_dmul>
   b4e92:	4b1c      	ldr	r3, [pc, #112]	; (b4f04 <_Z14setLightPointsv+0x3ec>)
   b4e94:	2200      	movs	r2, #0
   b4e96:	f003 fb77 	bl	b8588 <__adddf3>
   b4e9a:	ec41 0b10 	vmov	d0, r0, r1
   b4e9e:	f003 fb1d 	bl	b84dc <round>
   b4ea2:	ec59 8b10 	vmov	r8, r9, d0
        int temperatureC = round(temperature);
   b4ea6:	eeb0 0a48 	vmov.f32	s0, s16
   b4eaa:	eef0 0a68 	vmov.f32	s1, s17
   b4eae:	f003 fb15 	bl	b84dc <round>
   b4eb2:	ec51 0b10 	vmov	r0, r1, d0
   b4eb6:	f003 ff2f 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V0, temperatureC);
   b4eba:	4621      	mov	r1, r4
        int temperatureC = round(temperature);
   b4ebc:	4602      	mov	r2, r0
        Blynk.virtualWrite(V0, temperatureC);
   b4ebe:	4812      	ldr	r0, [pc, #72]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4ec0:	f7ff fe00 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4ec4:	4649      	mov	r1, r9
   b4ec6:	4640      	mov	r0, r8
   b4ec8:	f003 ff26 	bl	b8d18 <__aeabi_d2iz>
        Blynk.virtualWrite(V1, temperatureF);
   b4ecc:	2101      	movs	r1, #1
        int temperatureF = round((1.8 * temperature) + 32.0);
   b4ece:	4602      	mov	r2, r0
        Blynk.virtualWrite(V1, temperatureF);
   b4ed0:	480d      	ldr	r0, [pc, #52]	; (b4f08 <_Z14setLightPointsv+0x3f0>)
   b4ed2:	f7ff fdf7 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    while (digitalRead(BUTTON_IN) == LOW) {
   b4ed6:	e717      	b.n	b4d08 <_Z14setLightPointsv+0x1f0>
   b4ed8:	00000000 	.word	0x00000000
   b4edc:	40affe00 	.word	0x40affe00
   b4ee0:	cccccccd 	.word	0xcccccccd
   b4ee4:	3ffccccc 	.word	0x3ffccccc
   b4ee8:	66666666 	.word	0x66666666
   b4eec:	400a6666 	.word	0x400a6666
   b4ef0:	2003e6b4 	.word	0x2003e6b4
   b4ef4:	2003e640 	.word	0x2003e640
   b4ef8:	000b9090 	.word	0x000b9090
   b4efc:	3fe00000 	.word	0x3fe00000
   b4f00:	40590000 	.word	0x40590000
   b4f04:	40400000 	.word	0x40400000
   b4f08:	2003e5e4 	.word	0x2003e5e4
   b4f0c:	000b9080 	.word	0x000b9080
   b4f10:	000b9088 	.word	0x000b9088
   b4f14:	2003e6b0 	.word	0x2003e6b0
    if (lightPointTemp > lightPoint1) {
   b4f18:	882a      	ldrh	r2, [r5, #0]
   b4f1a:	4b09      	ldr	r3, [pc, #36]	; (b4f40 <_Z14setLightPointsv+0x428>)
    display.clearDisplay();
   b4f1c:	4809      	ldr	r0, [pc, #36]	; (b4f44 <_Z14setLightPointsv+0x42c>)
    if (lightPointTemp > lightPoint1) {
   b4f1e:	455a      	cmp	r2, fp
        lightPoint2 = lightPointTemp;
   b4f20:	bf32      	itee	cc
   b4f22:	f8a3 b000 	strhcc.w	fp, [r3]
        lightPoint2 = lightPoint1;
   b4f26:	801a      	strhcs	r2, [r3, #0]
        lightPoint1 = lightPointTemp;
   b4f28:	f8a5 b000 	strhcs.w	fp, [r5]
    display.clearDisplay();
   b4f2c:	f000 fff0 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   b4f30:	4804      	ldr	r0, [pc, #16]	; (b4f44 <_Z14setLightPointsv+0x42c>)
}
   b4f32:	b005      	add	sp, #20
   b4f34:	ecbd 8b02 	vpop	{d8}
   b4f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display();
   b4f3c:	f001 ba56 	b.w	b63ec <_ZN16Adafruit_SSD13067displayEv>
   b4f40:	2003e6b2 	.word	0x2003e6b2
   b4f44:	2003e640 	.word	0x2003e640

000b4f48 <setup>:

void setup() {
   b4f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f4c:	ed2d 8b02 	vpush	{d8}
   b4f50:	b095      	sub	sp, #84	; 0x54
    Serial.begin(9600);
   b4f52:	f002 ff7b 	bl	b7e4c <_Z16_fetch_usbserialv>
   b4f56:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f5a:	f002 ff6b 	bl	b7e34 <_ZN9USBSerial5beginEl>

    pinMode(BUTTON_IN, INPUT);
   b4f5e:	2100      	movs	r1, #0
   b4f60:	2002      	movs	r0, #2
   b4f62:	f003 f8b1 	bl	b80c8 <pinMode>
    pinMode(RED_LED, OUTPUT);
   b4f66:	2101      	movs	r1, #1
   b4f68:	2008      	movs	r0, #8
   b4f6a:	f003 f8ad 	bl	b80c8 <pinMode>
    pinMode(GREEN_LED, OUTPUT);
   b4f6e:	2101      	movs	r1, #1
   b4f70:	2007      	movs	r0, #7
   b4f72:	f003 f8a9 	bl	b80c8 <pinMode>
    pinMode(BLUE_LED, OUTPUT);
   b4f76:	2101      	movs	r1, #1
   b4f78:	2006      	movs	r0, #6
   b4f7a:	f003 f8a5 	bl	b80c8 <pinMode>

    Wire.begin();
   b4f7e:	f003 f935 	bl	b81ec <_Z19__fetch_global_Wirev>
   b4f82:	f002 f89d 	bl	b70c0 <_ZN7TwoWire5beginEv>
    proxSensor.begin();
   b4f86:	f003 f931 	bl	b81ec <_Z19__fetch_global_Wirev>
   b4f8a:	4601      	mov	r1, r0
   b4f8c:	4868      	ldr	r0, [pc, #416]	; (b5130 <setup+0x1e8>)
        this->authkey = auth;
   b4f8e:	4d69      	ldr	r5, [pc, #420]	; (b5134 <setup+0x1ec>)
   b4f90:	f001 fc4e 	bl	b6830 <_ZN8VCNL40405beginER7TwoWire>
    display.setup();
   b4f94:	4868      	ldr	r0, [pc, #416]	; (b5138 <setup+0x1f0>)
   b4f96:	f001 fcd9 	bl	b694c <_ZN16OledWingAdafruit5setupEv>
    proxSensor.powerOffProximity();
   b4f9a:	4865      	ldr	r0, [pc, #404]	; (b5130 <setup+0x1e8>)
   b4f9c:	f001 fbff 	bl	b679e <_ZN8VCNL404017powerOffProximityEv>
    proxSensor.powerOnAmbient();
   b4fa0:	4863      	ldr	r0, [pc, #396]	; (b5130 <setup+0x1e8>)
   b4fa2:	f001 fbce 	bl	b6742 <_ZN8VCNL404014powerOnAmbientEv>
    Blynk.begin("gev9UlWHupS8yCBJ2wpDXDNm6THMu0oS", IPAddress(167, 172, 234, 162), 8080);
   b4fa6:	23a2      	movs	r3, #162	; 0xa2
   b4fa8:	22ac      	movs	r2, #172	; 0xac
   b4faa:	21a7      	movs	r1, #167	; 0xa7
   b4fac:	9300      	str	r3, [sp, #0]
   b4fae:	a802      	add	r0, sp, #8
   b4fb0:	23ea      	movs	r3, #234	; 0xea
   b4fb2:	f002 f943 	bl	b723c <_ZN9IPAddressC1Ehhhh>
   b4fb6:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4fb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4fbc:	f001 fc63 	bl	b6886 <_Z10BlynkDelaym>
   b4fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4fc2:	af09      	add	r7, sp, #36	; 0x24
   b4fc4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4fc6:	6823      	ldr	r3, [r4, #0]
   b4fc8:	703b      	strb	r3, [r7, #0]
   b4fca:	4b5c      	ldr	r3, [pc, #368]	; (b513c <setup+0x1f4>)
   b4fcc:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4fce:	f001 fc5c 	bl	b688a <_Z11BlynkMillisv>
   b4fd2:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4fd6:	3808      	subs	r0, #8
   b4fd8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4fdc:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4fe0:	6168      	str	r0, [r5, #20]
   b4fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4fe6:	ae0f      	add	r6, sp, #60	; 0x3c
   b4fe8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4fea:	682c      	ldr	r4, [r5, #0]
   b4fec:	683b      	ldr	r3, [r7, #0]
   b4fee:	7033      	strb	r3, [r6, #0]
   b4ff0:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4ff2:	f641 7390 	movw	r3, #8080	; 0x1f90
   b4ff6:	8723      	strh	r3, [r4, #56]	; 0x38
   b4ff8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4ffa:	f04f 0800 	mov.w	r8, #0
   b4ffe:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b5002:	3420      	adds	r4, #32
   b5004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5006:	6833      	ldr	r3, [r6, #0]
   b5008:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b500a:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b500e:	6828      	ldr	r0, [r5, #0]
   b5010:	f002 fe04 	bl	b7c1c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5014:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b5018:	f001 fc37 	bl	b688a <_Z11BlynkMillisv>
   b501c:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b501e:	7f6b      	ldrb	r3, [r5, #29]
   b5020:	2b01      	cmp	r3, #1
   b5022:	d00c      	beq.n	b503e <setup+0xf6>
               (BlynkMillis() - started < timeout))
   b5024:	f001 fc31 	bl	b688a <_Z11BlynkMillisv>
   b5028:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b502a:	42b0      	cmp	r0, r6
   b502c:	d804      	bhi.n	b5038 <setup+0xf0>
            run();
   b502e:	2100      	movs	r1, #0
   b5030:	4628      	mov	r0, r5
   b5032:	f7ff fbdf 	bl	b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5036:	e7f2      	b.n	b501e <setup+0xd6>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b5038:	7f6b      	ldrb	r3, [r5, #29]
   b503a:	2b01      	cmp	r3, #1
   b503c:	d1e7      	bne.n	b500e <setup+0xc6>

    display.clearDisplay();
   b503e:	4c3e      	ldr	r4, [pc, #248]	; (b5138 <setup+0x1f0>)
   b5040:	4620      	mov	r0, r4
   b5042:	f000 ff65 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5046:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b504a:	6163      	str	r3, [r4, #20]
    display.setTextColor(WHITE);
    display.display();
   b504c:	4620      	mov	r0, r4
   b504e:	f001 f9cd 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>

    setLightPoints();
   b5052:	f7ff fd61 	bl	b4b18 <_Z14setLightPointsv>

    uint16_t reading = analogRead(TEMP_IN);
   b5056:	2012      	movs	r0, #18
   b5058:	f003 f873 	bl	b8142 <analogRead>
    double voltage = (reading * 3.3) / 4095.0;
   b505c:	b280      	uxth	r0, r0
   b505e:	f003 fbdf 	bl	b8820 <__aeabi_i2d>
   b5062:	a32d      	add	r3, pc, #180	; (adr r3, b5118 <setup+0x1d0>)
   b5064:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5068:	f003 fc44 	bl	b88f4 <__aeabi_dmul>
   b506c:	a32c      	add	r3, pc, #176	; (adr r3, b5120 <setup+0x1d8>)
   b506e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5072:	f003 fd69 	bl	b8b48 <__aeabi_ddiv>
    double temperature = (voltage - 0.5) * 100;
   b5076:	4b32      	ldr	r3, [pc, #200]	; (b5140 <setup+0x1f8>)
   b5078:	2200      	movs	r2, #0
   b507a:	f003 fa83 	bl	b8584 <__aeabi_dsub>
   b507e:	4b31      	ldr	r3, [pc, #196]	; (b5144 <setup+0x1fc>)
   b5080:	2200      	movs	r2, #0
   b5082:	f003 fc37 	bl	b88f4 <__aeabi_dmul>
   b5086:	4602      	mov	r2, r0
   b5088:	460b      	mov	r3, r1
   b508a:	ec43 2b18 	vmov	d8, r2, r3
    int temperatureF = round((1.8 * temperature) + 32.0);
   b508e:	a326      	add	r3, pc, #152	; (adr r3, b5128 <setup+0x1e0>)
   b5090:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5094:	f003 fc2e 	bl	b88f4 <__aeabi_dmul>
   b5098:	2200      	movs	r2, #0
   b509a:	4b2b      	ldr	r3, [pc, #172]	; (b5148 <setup+0x200>)
   b509c:	f003 fa74 	bl	b8588 <__adddf3>
   b50a0:	ec41 0b10 	vmov	d0, r0, r1
   b50a4:	f003 fa1a 	bl	b84dc <round>
   b50a8:	ec59 8b10 	vmov	r8, r9, d0
    int temperatureC = round(temperature);
   b50ac:	eeb0 0a48 	vmov.f32	s0, s16
   b50b0:	eef0 0a68 	vmov.f32	s1, s17
   b50b4:	f003 fa12 	bl	b84dc <round>

    display.clearDisplay();
   b50b8:	4620      	mov	r0, r4
    int temperatureC = round(temperature);
   b50ba:	ec57 6b10 	vmov	r6, r7, d0
    display.clearDisplay();
   b50be:	f000 ff27 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(2);
   b50c2:	4620      	mov	r0, r4
   b50c4:	2102      	movs	r1, #2
   b50c6:	f000 fd6a 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b50ca:	2300      	movs	r3, #0
   b50cc:	6123      	str	r3, [r4, #16]
    int temperatureF = round((1.8 * temperature) + 32.0);
   b50ce:	4649      	mov	r1, r9
   b50d0:	4640      	mov	r0, r8
   b50d2:	f003 fe21 	bl	b8d18 <__aeabi_d2iz>
   b50d6:	220a      	movs	r2, #10
   b50d8:	4601      	mov	r1, r0
   b50da:	4620      	mov	r0, r4
   b50dc:	f7fe fff6 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    display.setCursor(0, 0);
    display.print(temperatureF);
    display.println(" F");
   b50e0:	491a      	ldr	r1, [pc, #104]	; (b514c <setup+0x204>)
   b50e2:	4620      	mov	r0, r4
   b50e4:	f002 f9bb 	bl	b745e <_ZN5Print7printlnEPKc>
    int temperatureC = round(temperature);
   b50e8:	4639      	mov	r1, r7
   b50ea:	4630      	mov	r0, r6
   b50ec:	f003 fe14 	bl	b8d18 <__aeabi_d2iz>
   b50f0:	220a      	movs	r2, #10
   b50f2:	4601      	mov	r1, r0
   b50f4:	4620      	mov	r0, r4
   b50f6:	f7fe ffe9 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    display.print(temperatureC);
    display.println(" C");
   b50fa:	4915      	ldr	r1, [pc, #84]	; (b5150 <setup+0x208>)
   b50fc:	4620      	mov	r0, r4
   b50fe:	f002 f9ae 	bl	b745e <_ZN5Print7printlnEPKc>
    display.display();
   b5102:	4620      	mov	r0, r4
}
   b5104:	b015      	add	sp, #84	; 0x54
   b5106:	ecbd 8b02 	vpop	{d8}
   b510a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    display.display();
   b510e:	f001 b96d 	b.w	b63ec <_ZN16Adafruit_SSD13067displayEv>
   b5112:	bf00      	nop
   b5114:	f3af 8000 	nop.w
   b5118:	66666666 	.word	0x66666666
   b511c:	400a6666 	.word	0x400a6666
   b5120:	00000000 	.word	0x00000000
   b5124:	40affe00 	.word	0x40affe00
   b5128:	cccccccd 	.word	0xcccccccd
   b512c:	3ffccccc 	.word	0x3ffccccc
   b5130:	2003e6b4 	.word	0x2003e6b4
   b5134:	2003e5e4 	.word	0x2003e5e4
   b5138:	2003e640 	.word	0x2003e640
   b513c:	000b9098 	.word	0x000b9098
   b5140:	3fe00000 	.word	0x3fe00000
   b5144:	40590000 	.word	0x40590000
   b5148:	40400000 	.word	0x40400000
   b514c:	000b90b9 	.word	0x000b90b9
   b5150:	000b90bc 	.word	0x000b90bc

000b5154 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA20_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b5154:	b530      	push	{r4, r5, lr}
   b5156:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b515a:	ab08      	add	r3, sp, #32
   b515c:	2400      	movs	r4, #0
   b515e:	4605      	mov	r5, r0
   b5160:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b5162:	a805      	add	r0, sp, #20
   b5164:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b5168:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b516c:	f7fe ffe7 	bl	b413e <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5170:	9b06      	ldr	r3, [sp, #24]
   b5172:	3b01      	subs	r3, #1
   b5174:	9300      	str	r3, [sp, #0]
   b5176:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b517a:	9b05      	ldr	r3, [sp, #20]
   b517c:	4622      	mov	r2, r4
   b517e:	210e      	movs	r1, #14
   b5180:	4628      	mov	r0, r5
   b5182:	f7ff fbdf 	bl	b4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b5186:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b518a:	bd30      	pop	{r4, r5, pc}
   b518c:	0000      	movs	r0, r0
	...

000b5190 <loop>:

void loop() {
   b5190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    display.loop();
   b5192:	4873      	ldr	r0, [pc, #460]	; (b5360 <loop+0x1d0>)
void loop() {
   b5194:	ed2d 8b02 	vpush	{d8}
    display.loop();
   b5198:	f001 fc01 	bl	b699e <_ZN16OledWingAdafruit4loopEv>

    char ledOn;
    if (digitalRead(RED_LED) == HIGH) {
   b519c:	2008      	movs	r0, #8
   b519e:	f002 ffbd 	bl	b811c <digitalRead>
   b51a2:	2801      	cmp	r0, #1
   b51a4:	f000 80a6 	beq.w	b52f4 <loop+0x164>
        ledOn = 'r';
    } else if (digitalRead(GREEN_LED) == HIGH) {
   b51a8:	2007      	movs	r0, #7
   b51aa:	f002 ffb7 	bl	b811c <digitalRead>
   b51ae:	2801      	cmp	r0, #1
   b51b0:	f000 80a2 	beq.w	b52f8 <loop+0x168>
        ledOn = 'g';
    } else if (digitalRead(BLUE_LED) == HIGH) {
   b51b4:	2006      	movs	r0, #6
   b51b6:	f002 ffb1 	bl	b811c <digitalRead>
        ledOn = 'b';
    } else {
        ledOn = 'n';
   b51ba:	2801      	cmp	r0, #1
   b51bc:	bf0c      	ite	eq
   b51be:	2462      	moveq	r4, #98	; 0x62
   b51c0:	246e      	movne	r4, #110	; 0x6e
    }

    uint16_t lightVal = proxSensor.getAmbient();
   b51c2:	4868      	ldr	r0, [pc, #416]	; (b5364 <loop+0x1d4>)
   b51c4:	f001 fa3f 	bl	b6646 <_ZN8VCNL404010getAmbientEv>
    if (lightVal < lightPoint1) {
   b51c8:	4b67      	ldr	r3, [pc, #412]	; (b5368 <loop+0x1d8>)
   b51ca:	881b      	ldrh	r3, [r3, #0]
   b51cc:	4283      	cmp	r3, r0
   b51ce:	f240 8095 	bls.w	b52fc <loop+0x16c>
        digitalWrite(BLUE_LED, HIGH);
   b51d2:	2101      	movs	r1, #1
   b51d4:	2006      	movs	r0, #6
   b51d6:	f002 ff88 	bl	b80ea <digitalWrite>
        digitalWrite(RED_LED, LOW);
   b51da:	2100      	movs	r1, #0
   b51dc:	2008      	movs	r0, #8
   b51de:	f002 ff84 	bl	b80ea <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   b51e2:	2100      	movs	r1, #0
   b51e4:	2007      	movs	r0, #7
   b51e6:	f002 ff80 	bl	b80ea <digitalWrite>

        if (ledOn != 'b' && ledOn != 'n') {
   b51ea:	2c62      	cmp	r4, #98	; 0x62
   b51ec:	d005      	beq.n	b51fa <loop+0x6a>
   b51ee:	2c6e      	cmp	r4, #110	; 0x6e
   b51f0:	d003      	beq.n	b51fa <loop+0x6a>
            Blynk.notify("Light point passed.");
   b51f2:	495e      	ldr	r1, [pc, #376]	; (b536c <loop+0x1dc>)
   b51f4:	485e      	ldr	r0, [pc, #376]	; (b5370 <loop+0x1e0>)
   b51f6:	f7ff ffad 	bl	b5154 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA20_cEEvRKT_>
        if (ledOn != 'r' && ledOn != 'n') {
            Blynk.notify("Light point passed.");
        }
    }

    uint16_t reading = analogRead(TEMP_IN);
   b51fa:	2012      	movs	r0, #18
   b51fc:	f002 ffa1 	bl	b8142 <analogRead>
    double voltage = (reading * 3.3) / 4095.0;
   b5200:	b280      	uxth	r0, r0
   b5202:	f003 fb0d 	bl	b8820 <__aeabi_i2d>
   b5206:	a350      	add	r3, pc, #320	; (adr r3, b5348 <loop+0x1b8>)
   b5208:	e9d3 2300 	ldrd	r2, r3, [r3]
   b520c:	f003 fb72 	bl	b88f4 <__aeabi_dmul>
   b5210:	a34f      	add	r3, pc, #316	; (adr r3, b5350 <loop+0x1c0>)
   b5212:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5216:	f003 fc97 	bl	b8b48 <__aeabi_ddiv>
    double temperature = (voltage - 0.5) * 100;
   b521a:	4b56      	ldr	r3, [pc, #344]	; (b5374 <loop+0x1e4>)
    int temperatureC = round(temperature);

    Blynk.virtualWrite(V0, temperatureC);
    Blynk.virtualWrite(V1, temperatureF);
    
    if (displayInfo == 't') {   
   b521c:	4d56      	ldr	r5, [pc, #344]	; (b5378 <loop+0x1e8>)
    double temperature = (voltage - 0.5) * 100;
   b521e:	2200      	movs	r2, #0
   b5220:	f003 f9b0 	bl	b8584 <__aeabi_dsub>
   b5224:	4b55      	ldr	r3, [pc, #340]	; (b537c <loop+0x1ec>)
   b5226:	2200      	movs	r2, #0
   b5228:	f003 fb64 	bl	b88f4 <__aeabi_dmul>
   b522c:	4602      	mov	r2, r0
   b522e:	460b      	mov	r3, r1
   b5230:	ec43 2b18 	vmov	d8, r2, r3
    int temperatureF = round((1.8 * temperature) + 32.0);
   b5234:	a348      	add	r3, pc, #288	; (adr r3, b5358 <loop+0x1c8>)
   b5236:	e9d3 2300 	ldrd	r2, r3, [r3]
   b523a:	f003 fb5b 	bl	b88f4 <__aeabi_dmul>
   b523e:	4b50      	ldr	r3, [pc, #320]	; (b5380 <loop+0x1f0>)
   b5240:	2200      	movs	r2, #0
   b5242:	f003 f9a1 	bl	b8588 <__adddf3>
   b5246:	ec41 0b10 	vmov	d0, r0, r1
   b524a:	f003 f947 	bl	b84dc <round>
   b524e:	ec51 0b10 	vmov	r0, r1, d0
   b5252:	f003 fd61 	bl	b8d18 <__aeabi_d2iz>
    int temperatureC = round(temperature);
   b5256:	eeb0 0a48 	vmov.f32	s0, s16
   b525a:	eef0 0a68 	vmov.f32	s1, s17
    int temperatureF = round((1.8 * temperature) + 32.0);
   b525e:	4607      	mov	r7, r0
    int temperatureC = round(temperature);
   b5260:	f003 f93c 	bl	b84dc <round>
   b5264:	ec51 0b10 	vmov	r0, r1, d0
   b5268:	f003 fd56 	bl	b8d18 <__aeabi_d2iz>
    Blynk.virtualWrite(V0, temperatureC);
   b526c:	2100      	movs	r1, #0
   b526e:	4602      	mov	r2, r0
    int temperatureC = round(temperature);
   b5270:	4606      	mov	r6, r0
    Blynk.virtualWrite(V0, temperatureC);
   b5272:	483f      	ldr	r0, [pc, #252]	; (b5370 <loop+0x1e0>)
   b5274:	f7ff fc26 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    Blynk.virtualWrite(V1, temperatureF);
   b5278:	483d      	ldr	r0, [pc, #244]	; (b5370 <loop+0x1e0>)
   b527a:	463a      	mov	r2, r7
   b527c:	2101      	movs	r1, #1
   b527e:	f7ff fc21 	bl	b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    if (displayInfo == 't') {   
   b5282:	782b      	ldrb	r3, [r5, #0]
   b5284:	2b74      	cmp	r3, #116	; 0x74
   b5286:	d159      	bne.n	b533c <loop+0x1ac>
        display.clearDisplay();
   b5288:	4c35      	ldr	r4, [pc, #212]	; (b5360 <loop+0x1d0>)
   b528a:	4620      	mov	r0, r4
   b528c:	f000 fe40 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setTextSize(2);
   b5290:	2102      	movs	r1, #2
   b5292:	4620      	mov	r0, r4
   b5294:	f000 fc83 	bl	b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>
   b5298:	2300      	movs	r3, #0
   b529a:	6123      	str	r3, [r4, #16]
size_t Print::print(T n, int base)
   b529c:	220a      	movs	r2, #10
   b529e:	4639      	mov	r1, r7
   b52a0:	4620      	mov	r0, r4
   b52a2:	f7fe ff13 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        display.setCursor(0, 0);
        display.print(temperatureF);
        display.println(" F");
   b52a6:	4937      	ldr	r1, [pc, #220]	; (b5384 <loop+0x1f4>)
   b52a8:	4620      	mov	r0, r4
   b52aa:	f002 f8d8 	bl	b745e <_ZN5Print7printlnEPKc>
   b52ae:	220a      	movs	r2, #10
   b52b0:	4631      	mov	r1, r6
   b52b2:	4620      	mov	r0, r4
   b52b4:	f7fe ff0a 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        display.print(temperatureC);
        display.println(" C");
   b52b8:	4933      	ldr	r1, [pc, #204]	; (b5388 <loop+0x1f8>)
   b52ba:	4620      	mov	r0, r4
   b52bc:	f002 f8cf 	bl	b745e <_ZN5Print7printlnEPKc>
        display.display();
   b52c0:	4620      	mov	r0, r4
   b52c2:	f001 f893 	bl	b63ec <_ZN16Adafruit_SSD13067displayEv>
    } else {
        setLightPoints();
        displayInfo = 't';
    }

    if (display.pressedA()) {
   b52c6:	4826      	ldr	r0, [pc, #152]	; (b5360 <loop+0x1d0>)
   b52c8:	f001 fb82 	bl	b69d0 <_ZN16OledWingAdafruit8pressedAEv>
   b52cc:	b108      	cbz	r0, b52d2 <loop+0x142>
        displayInfo = 't';
   b52ce:	2374      	movs	r3, #116	; 0x74
   b52d0:	702b      	strb	r3, [r5, #0]
    }

    if (display.pressedB()) {
   b52d2:	4823      	ldr	r0, [pc, #140]	; (b5360 <loop+0x1d0>)
   b52d4:	f001 fb86 	bl	b69e4 <_ZN16OledWingAdafruit8pressedBEv>
   b52d8:	b108      	cbz	r0, b52de <loop+0x14e>
        displayInfo = 'l';
   b52da:	236c      	movs	r3, #108	; 0x6c
   b52dc:	702b      	strb	r3, [r5, #0]
    }

    Blynk.run();
   b52de:	4824      	ldr	r0, [pc, #144]	; (b5370 <loop+0x1e0>)
   b52e0:	2100      	movs	r1, #0
   b52e2:	f7ff fa87 	bl	b47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

    delay(100);
   b52e6:	ecbd 8b02 	vpop	{d8}
    delay(100);
   b52ea:	2064      	movs	r0, #100	; 0x64
   b52ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(100);
   b52f0:	f001 be5a 	b.w	b6fa8 <delay>
        ledOn = 'r';
   b52f4:	2472      	movs	r4, #114	; 0x72
   b52f6:	e764      	b.n	b51c2 <loop+0x32>
        ledOn = 'g';
   b52f8:	2467      	movs	r4, #103	; 0x67
   b52fa:	e762      	b.n	b51c2 <loop+0x32>
    } else if (lightVal <= lightPoint2) {
   b52fc:	4b23      	ldr	r3, [pc, #140]	; (b538c <loop+0x1fc>)
   b52fe:	881b      	ldrh	r3, [r3, #0]
   b5300:	4283      	cmp	r3, r0
        digitalWrite(BLUE_LED, LOW);
   b5302:	f04f 0100 	mov.w	r1, #0
   b5306:	f04f 0006 	mov.w	r0, #6
    } else if (lightVal <= lightPoint2) {
   b530a:	d30b      	bcc.n	b5324 <loop+0x194>
        digitalWrite(BLUE_LED, LOW);
   b530c:	f002 feed 	bl	b80ea <digitalWrite>
        digitalWrite(RED_LED, LOW);
   b5310:	2100      	movs	r1, #0
   b5312:	2008      	movs	r0, #8
   b5314:	f002 fee9 	bl	b80ea <digitalWrite>
        digitalWrite(GREEN_LED, HIGH);
   b5318:	2101      	movs	r1, #1
   b531a:	2007      	movs	r0, #7
   b531c:	f002 fee5 	bl	b80ea <digitalWrite>
        if (ledOn != 'g' && ledOn != 'n') {
   b5320:	2c67      	cmp	r4, #103	; 0x67
   b5322:	e763      	b.n	b51ec <loop+0x5c>
        digitalWrite(BLUE_LED, LOW);
   b5324:	f002 fee1 	bl	b80ea <digitalWrite>
        digitalWrite(RED_LED, HIGH);
   b5328:	2101      	movs	r1, #1
   b532a:	2008      	movs	r0, #8
   b532c:	f002 fedd 	bl	b80ea <digitalWrite>
        digitalWrite(GREEN_LED, LOW);
   b5330:	2100      	movs	r1, #0
   b5332:	2007      	movs	r0, #7
   b5334:	f002 fed9 	bl	b80ea <digitalWrite>
        if (ledOn != 'r' && ledOn != 'n') {
   b5338:	2c72      	cmp	r4, #114	; 0x72
   b533a:	e757      	b.n	b51ec <loop+0x5c>
        setLightPoints();
   b533c:	f7ff fbec 	bl	b4b18 <_Z14setLightPointsv>
        displayInfo = 't';
   b5340:	2374      	movs	r3, #116	; 0x74
   b5342:	702b      	strb	r3, [r5, #0]
   b5344:	e7bf      	b.n	b52c6 <loop+0x136>
   b5346:	bf00      	nop
   b5348:	66666666 	.word	0x66666666
   b534c:	400a6666 	.word	0x400a6666
   b5350:	00000000 	.word	0x00000000
   b5354:	40affe00 	.word	0x40affe00
   b5358:	cccccccd 	.word	0xcccccccd
   b535c:	3ffccccc 	.word	0x3ffccccc
   b5360:	2003e640 	.word	0x2003e640
   b5364:	2003e6b4 	.word	0x2003e6b4
   b5368:	2003e6b0 	.word	0x2003e6b0
   b536c:	000b90bf 	.word	0x000b90bf
   b5370:	2003e5e4 	.word	0x2003e5e4
   b5374:	3fe00000 	.word	0x3fe00000
   b5378:	2003e574 	.word	0x2003e574
   b537c:	40590000 	.word	0x40590000
   b5380:	40400000 	.word	0x40400000
   b5384:	000b90b9 	.word	0x000b90b9
   b5388:	000b90bc 	.word	0x000b90bc
   b538c:	2003e6b2 	.word	0x2003e6b2

000b5390 <_GLOBAL__sub_I_Blynk>:
   b5390:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b5392:	4c10      	ldr	r4, [pc, #64]	; (b53d4 <_GLOBAL__sub_I_Blynk+0x44>)
SYSTEM_THREAD(ENABLED);
   b5394:	2100      	movs	r1, #0
   b5396:	2001      	movs	r0, #1
   b5398:	f001 fd36 	bl	b6e08 <system_thread_set_state>
   b539c:	4620      	mov	r0, r4
   b539e:	f002 fc87 	bl	b7cb0 <_ZN9TCPClientC1Ev>
   b53a2:	f104 001c 	add.w	r0, r4, #28
   b53a6:	f001 ff05 	bl	b71b4 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b53aa:	4a0b      	ldr	r2, [pc, #44]	; (b53d8 <_GLOBAL__sub_I_Blynk+0x48>)
OledWingAdafruit display;
   b53ac:	480b      	ldr	r0, [pc, #44]	; (b53dc <_GLOBAL__sub_I_Blynk+0x4c>)
   b53ae:	2300      	movs	r3, #0
   b53b0:	e9c2 4300 	strd	r4, r3, [r2]
   b53b4:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b53b8:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b53bc:	6193      	str	r3, [r2, #24]
   b53be:	8393      	strh	r3, [r2, #28]
   b53c0:	2107      	movs	r1, #7
   b53c2:	6363      	str	r3, [r4, #52]	; 0x34
   b53c4:	8723      	strh	r3, [r4, #56]	; 0x38
   b53c6:	f001 fa93 	bl	b68f0 <_ZN16OledWingAdafruitC1Ei>
   b53ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
VCNL4040 proxSensor;
   b53ce:	4804      	ldr	r0, [pc, #16]	; (b53e0 <_GLOBAL__sub_I_Blynk+0x50>)
   b53d0:	f001 b8ff 	b.w	b65d2 <_ZN8VCNL4040C1Ev>
   b53d4:	2003e604 	.word	0x2003e604
   b53d8:	2003e5e4 	.word	0x2003e5e4
   b53dc:	2003e640 	.word	0x2003e640
   b53e0:	2003e6b4 	.word	0x2003e6b4

000b53e4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b53e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e8:	b085      	sub	sp, #20
   b53ea:	461f      	mov	r7, r3
   b53ec:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b53f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b53f4:	eba8 0902 	sub.w	r9, r8, r2
   b53f8:	eba7 0a01 	sub.w	sl, r7, r1
   b53fc:	f1b9 0f00 	cmp.w	r9, #0
   b5400:	bfb8      	it	lt
   b5402:	f1c9 0900 	rsblt	r9, r9, #0
   b5406:	f1ba 0f00 	cmp.w	sl, #0
   b540a:	bfb8      	it	lt
   b540c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5410:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5412:	4683      	mov	fp, r0
   b5414:	460c      	mov	r4, r1
   b5416:	4615      	mov	r5, r2
    if (steep) {
   b5418:	dd04      	ble.n	b5424 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b541a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b541c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b541e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5420:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5422:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5424:	42bc      	cmp	r4, r7
   b5426:	dd05      	ble.n	b5434 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5428:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b542a:	4645      	mov	r5, r8
   b542c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b542e:	4622      	mov	r2, r4
   b5430:	463c      	mov	r4, r7
   b5432:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5434:	1b3e      	subs	r6, r7, r4
   b5436:	b2b2      	uxth	r2, r6
   b5438:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b543a:	eba8 0205 	sub.w	r2, r8, r5
   b543e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5442:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5446:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b544a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b544e:	4545      	cmp	r5, r8
   b5450:	bfb4      	ite	lt
   b5452:	2201      	movlt	r2, #1
   b5454:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5458:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b545a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b545c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b545e:	42bc      	cmp	r4, r7
   b5460:	dc1c      	bgt.n	b549c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5462:	f8db 2000 	ldr.w	r2, [fp]
   b5466:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5468:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b546a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b546e:	bfc7      	ittee	gt
   b5470:	4629      	movgt	r1, r5
   b5472:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5474:	462a      	movle	r2, r5
   b5476:	4621      	movle	r1, r4
   b5478:	4658      	mov	r0, fp
   b547a:	47c0      	blx	r8
        }
        err -= dy;
   b547c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b547e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5480:	1ab6      	subs	r6, r6, r2
   b5482:	b2b1      	uxth	r1, r6
   b5484:	b236      	sxth	r6, r6
        if (err < 0) {
   b5486:	2e00      	cmp	r6, #0
   b5488:	da05      	bge.n	b5496 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b548a:	9a02      	ldr	r2, [sp, #8]
   b548c:	4415      	add	r5, r2
            err += dx;
   b548e:	9a00      	ldr	r2, [sp, #0]
   b5490:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5492:	b22d      	sxth	r5, r5
            err += dx;
   b5494:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5496:	3401      	adds	r4, #1
   b5498:	b224      	sxth	r4, r4
   b549a:	e7e0      	b.n	b545e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b549c:	b005      	add	sp, #20
   b549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b54a2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b54a2:	4770      	bx	lr

000b54a4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b54a4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b54a6:	6804      	ldr	r4, [r0, #0]
   b54a8:	6924      	ldr	r4, [r4, #16]
   b54aa:	46a4      	mov	ip, r4
}
   b54ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b54b0:	4760      	bx	ip

000b54b2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b54b2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b54b4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b54b6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b54ba:	9502      	str	r5, [sp, #8]
   b54bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b54be:	46a4      	mov	ip, r4
}
   b54c0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b54c2:	4760      	bx	ip

000b54c4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b54c4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b54c6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b54c8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b54cc:	9502      	str	r5, [sp, #8]
   b54ce:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b54d0:	46a4      	mov	ip, r4
}
   b54d2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b54d4:	4760      	bx	ip

000b54d6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b54d6:	b470      	push	{r4, r5, r6}
   b54d8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b54dc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b54e0:	6804      	ldr	r4, [r0, #0]
   b54e2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b54e6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b54e8:	46a4      	mov	ip, r4
}
   b54ea:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b54ec:	4760      	bx	ip

000b54ee <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b54ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b54f2:	461c      	mov	r4, r3
    startWrite();
   b54f4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b54f6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b54fa:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b54fc:	4605      	mov	r5, r0
   b54fe:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5500:	3c01      	subs	r4, #1
   b5502:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5504:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5506:	b224      	sxth	r4, r4
    startWrite();
   b5508:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b550a:	682b      	ldr	r3, [r5, #0]
   b550c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5510:	9400      	str	r4, [sp, #0]
   b5512:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5514:	4628      	mov	r0, r5
   b5516:	463b      	mov	r3, r7
   b5518:	4632      	mov	r2, r6
   b551a:	4639      	mov	r1, r7
   b551c:	47a0      	blx	r4
    endWrite();
   b551e:	682b      	ldr	r3, [r5, #0]
   b5520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5522:	4628      	mov	r0, r5
}
   b5524:	b002      	add	sp, #8
   b5526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b552a:	4718      	bx	r3

000b552c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b552c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5530:	461d      	mov	r5, r3
    startWrite();
   b5532:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5534:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5538:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b553a:	4604      	mov	r4, r0
   b553c:	4617      	mov	r7, r2
   b553e:	460e      	mov	r6, r1
    startWrite();
   b5540:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5542:	e9cd 7800 	strd	r7, r8, [sp]
   b5546:	6822      	ldr	r2, [r4, #0]
   b5548:	1e6b      	subs	r3, r5, #1
   b554a:	4433      	add	r3, r6
   b554c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b554e:	4620      	mov	r0, r4
   b5550:	b21b      	sxth	r3, r3
   b5552:	463a      	mov	r2, r7
   b5554:	4631      	mov	r1, r6
   b5556:	47a8      	blx	r5
    endWrite();
   b5558:	6823      	ldr	r3, [r4, #0]
   b555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b555c:	4620      	mov	r0, r4
}
   b555e:	b002      	add	sp, #8
   b5560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5564:	4718      	bx	r3

000b5566 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5566:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b556a:	461e      	mov	r6, r3
    startWrite();
   b556c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b556e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5572:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5574:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5578:	460c      	mov	r4, r1
   b557a:	4605      	mov	r5, r0
   b557c:	4617      	mov	r7, r2
    startWrite();
   b557e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5580:	4426      	add	r6, r4
   b5582:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5584:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5586:	da0b      	bge.n	b55a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5588:	f8cd 8000 	str.w	r8, [sp]
   b558c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5590:	4621      	mov	r1, r4
   b5592:	464b      	mov	r3, r9
   b5594:	463a      	mov	r2, r7
   b5596:	4628      	mov	r0, r5
   b5598:	3401      	adds	r4, #1
   b559a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b559c:	b224      	sxth	r4, r4
   b559e:	e7f0      	b.n	b5582 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b55a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55a2:	4628      	mov	r0, r5
}
   b55a4:	b002      	add	sp, #8
   b55a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b55aa:	4718      	bx	r3

000b55ac <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b55ac:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b55ae:	6802      	ldr	r2, [r0, #0]
   b55b0:	9101      	str	r1, [sp, #4]
   b55b2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b55b6:	9100      	str	r1, [sp, #0]
   b55b8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b55ba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b55be:	2200      	movs	r2, #0
   b55c0:	4611      	mov	r1, r2
   b55c2:	47a0      	blx	r4
}
   b55c4:	b002      	add	sp, #8
   b55c6:	bd10      	pop	{r4, pc}

000b55c8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b55c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b55cc:	4299      	cmp	r1, r3
        uint16_t color) {
   b55ce:	4616      	mov	r6, r2
   b55d0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b55d4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b55d8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b55da:	4680      	mov	r8, r0
   b55dc:	460d      	mov	r5, r1
   b55de:	461c      	mov	r4, r3
    if(x0 == x1){
   b55e0:	d113      	bne.n	b560a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b55e2:	42be      	cmp	r6, r7
   b55e4:	bfc8      	it	gt
   b55e6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b55e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b55ec:	bfc4      	itt	gt
   b55ee:	463e      	movgt	r6, r7
   b55f0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b55f2:	1c7b      	adds	r3, r7, #1
   b55f4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b55f6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b55f8:	b21b      	sxth	r3, r3
   b55fa:	4632      	mov	r2, r6
   b55fc:	4629      	mov	r1, r5
   b55fe:	4640      	mov	r0, r8
   b5600:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5602:	b003      	add	sp, #12
   b5604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5608:	4760      	bx	ip
    } else if(y0 == y1){
   b560a:	42be      	cmp	r6, r7
   b560c:	d10a      	bne.n	b5624 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b560e:	4299      	cmp	r1, r3
   b5610:	bfc2      	ittt	gt
   b5612:	460b      	movgt	r3, r1
   b5614:	4625      	movgt	r5, r4
   b5616:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5618:	1c63      	adds	r3, r4, #1
   b561a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b561e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5620:	1b5b      	subs	r3, r3, r5
   b5622:	e7e9      	b.n	b55f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5624:	6953      	ldr	r3, [r2, #20]
   b5626:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5628:	e9cd 7900 	strd	r7, r9, [sp]
   b562c:	f8d8 3000 	ldr.w	r3, [r8]
   b5630:	4640      	mov	r0, r8
   b5632:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5634:	4632      	mov	r2, r6
   b5636:	4623      	mov	r3, r4
   b5638:	4629      	mov	r1, r5
   b563a:	47b8      	blx	r7
        endWrite();
   b563c:	f8d8 3000 	ldr.w	r3, [r8]
   b5640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5642:	4640      	mov	r0, r8
}
   b5644:	b003      	add	sp, #12
   b5646:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b564a:	4718      	bx	r3

000b564c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b564c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5650:	461d      	mov	r5, r3
    startWrite();
   b5652:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5654:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5658:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b565a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b565e:	4604      	mov	r4, r0
   b5660:	460f      	mov	r7, r1
   b5662:	4616      	mov	r6, r2
    startWrite();
   b5664:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5666:	6823      	ldr	r3, [r4, #0]
   b5668:	f8cd 8000 	str.w	r8, [sp]
   b566c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5670:	4632      	mov	r2, r6
   b5672:	462b      	mov	r3, r5
   b5674:	4639      	mov	r1, r7
   b5676:	4620      	mov	r0, r4
   b5678:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b567a:	6823      	ldr	r3, [r4, #0]
   b567c:	f8cd 8000 	str.w	r8, [sp]
   b5680:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5684:	4432      	add	r2, r6
   b5686:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b568a:	4639      	mov	r1, r7
   b568c:	462b      	mov	r3, r5
   b568e:	4620      	mov	r0, r4
   b5690:	b212      	sxth	r2, r2
   b5692:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5694:	6823      	ldr	r3, [r4, #0]
   b5696:	f8cd 8000 	str.w	r8, [sp]
   b569a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b569e:	4632      	mov	r2, r6
   b56a0:	464b      	mov	r3, r9
   b56a2:	4639      	mov	r1, r7
   b56a4:	4620      	mov	r0, r4
   b56a6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b56a8:	1e6b      	subs	r3, r5, #1
   b56aa:	19d9      	adds	r1, r3, r7
   b56ac:	6823      	ldr	r3, [r4, #0]
   b56ae:	f8cd 8000 	str.w	r8, [sp]
   b56b2:	6a1d      	ldr	r5, [r3, #32]
   b56b4:	4620      	mov	r0, r4
   b56b6:	464b      	mov	r3, r9
   b56b8:	4632      	mov	r2, r6
   b56ba:	b209      	sxth	r1, r1
   b56bc:	47a8      	blx	r5
    endWrite();
   b56be:	6823      	ldr	r3, [r4, #0]
   b56c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56c2:	4620      	mov	r0, r4
}
   b56c4:	b002      	add	sp, #8
   b56c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b56ca:	4718      	bx	r3

000b56cc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b56cc:	4770      	bx	lr

000b56ce <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b56ce:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b56d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b56d6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b56d8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b56da:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b56de:	bf59      	ittee	pl
   b56e0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b56e2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b56e4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b56e6:	81c3      	strhmi	r3, [r0, #14]
}
   b56e8:	4770      	bx	lr
	...

000b56ec <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b56ec:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b56ee:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b56f0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b56f2:	4a07      	ldr	r2, [pc, #28]	; (b5710 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b56f4:	4d07      	ldr	r5, [pc, #28]	; (b5714 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b56f6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b56f8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b56fa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b56fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5700:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5704:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5706:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5708:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b570a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b570c:	6204      	str	r4, [r0, #32]
}
   b570e:	bd30      	pop	{r4, r5, pc}
   b5710:	01000101 	.word	0x01000101
   b5714:	000b9634 	.word	0x000b9634

000b5718 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b571c:	b089      	sub	sp, #36	; 0x24
   b571e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5722:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5724:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5728:	9304      	str	r3, [sp, #16]
   b572a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b572e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5730:	9305      	str	r3, [sp, #20]
   b5732:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5736:	4604      	mov	r4, r0
    startWrite();
   b5738:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b573a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b573e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5742:	bf48      	it	mi
   b5744:	f108 020e 	addmi.w	r2, r8, #14
   b5748:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b574c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b574e:	4635      	mov	r5, r6
   b5750:	9b03      	ldr	r3, [sp, #12]
   b5752:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5754:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5758:	189a      	adds	r2, r3, r2
   b575a:	9b05      	ldr	r3, [sp, #20]
   b575c:	428b      	cmp	r3, r1
   b575e:	b212      	sxth	r2, r2
   b5760:	dd27      	ble.n	b57b2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5762:	9b04      	ldr	r3, [sp, #16]
   b5764:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5766:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b576a:	9306      	str	r3, [sp, #24]
   b576c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5770:	4580      	cmp	r8, r0
   b5772:	fa1f f189 	uxth.w	r1, r9
   b5776:	dd17      	ble.n	b57a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5778:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b577a:	bf05      	ittet	eq
   b577c:	9b06      	ldreq	r3, [sp, #24]
   b577e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5780:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5782:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5784:	bf18      	it	ne
   b5786:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5788:	062b      	lsls	r3, r5, #24
   b578a:	d50a      	bpl.n	b57a2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b578c:	9b02      	ldr	r3, [sp, #8]
   b578e:	6820      	ldr	r0, [r4, #0]
   b5790:	9207      	str	r2, [sp, #28]
   b5792:	4419      	add	r1, r3
   b5794:	6983      	ldr	r3, [r0, #24]
   b5796:	b209      	sxth	r1, r1
   b5798:	461f      	mov	r7, r3
   b579a:	4620      	mov	r0, r4
   b579c:	4653      	mov	r3, sl
   b579e:	47b8      	blx	r7
   b57a0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b57a2:	f109 0901 	add.w	r9, r9, #1
   b57a6:	e7e1      	b.n	b576c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b57a8:	9b01      	ldr	r3, [sp, #4]
   b57aa:	3301      	adds	r3, #1
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	445e      	add	r6, fp
   b57b0:	e7ce      	b.n	b5750 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b57b2:	6823      	ldr	r3, [r4, #0]
   b57b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57b6:	4620      	mov	r0, r4
}
   b57b8:	b009      	add	sp, #36	; 0x24
   b57ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b57be:	4718      	bx	r3

000b57c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b57c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57c4:	ed2d 8b02 	vpush	{d8}
   b57c8:	b091      	sub	sp, #68	; 0x44
   b57ca:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b57cc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b57ce:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b57d2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b57d6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b57da:	9103      	str	r1, [sp, #12]
   b57dc:	461f      	mov	r7, r3
   b57de:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b57e2:	9304      	str	r3, [sp, #16]
   b57e4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b57e6:	2a00      	cmp	r2, #0
   b57e8:	f040 80c5 	bne.w	b5976 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b57ec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b57f0:	428b      	cmp	r3, r1
   b57f2:	f340 814c 	ble.w	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b57f6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b57fa:	42b3      	cmp	r3, r6
   b57fc:	f340 8147 	ble.w	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5800:	2306      	movs	r3, #6
   b5802:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5806:	2b00      	cmp	r3, #0
   b5808:	f340 8141 	ble.w	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b580c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5810:	2b00      	cmp	r3, #0
   b5812:	f340 813c 	ble.w	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5816:	7f03      	ldrb	r3, [r0, #28]
   b5818:	b91b      	cbnz	r3, b5822 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b581a:	2faf      	cmp	r7, #175	; 0xaf
   b581c:	bf84      	itt	hi
   b581e:	3701      	addhi	r7, #1
   b5820:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5822:	f8db 3000 	ldr.w	r3, [fp]
   b5826:	4658      	mov	r0, fp
   b5828:	695b      	ldr	r3, [r3, #20]
   b582a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b582c:	2205      	movs	r2, #5
   b582e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5830:	2200      	movs	r2, #0
   b5832:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5834:	4a98      	ldr	r2, [pc, #608]	; (b5a98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5836:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b583a:	18d3      	adds	r3, r2, r3
   b583c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b583e:	b2b3      	uxth	r3, r6
   b5840:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5842:	9a05      	ldr	r2, [sp, #20]
   b5844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5846:	5c9b      	ldrb	r3, [r3, r2]
   b5848:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b584a:	b2ab      	uxth	r3, r5
   b584c:	930b      	str	r3, [sp, #44]	; 0x2c
   b584e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5852:	9308      	str	r3, [sp, #32]
   b5854:	9b03      	ldr	r3, [sp, #12]
   b5856:	fb02 f905 	mul.w	r9, r2, r5
   b585a:	fa19 f983 	uxtah	r9, r9, r3
   b585e:	fa0f f389 	sxth.w	r3, r9
   b5862:	ee08 3a10 	vmov	s16, r3
   b5866:	2308      	movs	r3, #8
   b5868:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b586a:	9b03      	ldr	r3, [sp, #12]
   b586c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5870:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5874:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5878:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b587a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b587e:	07d2      	lsls	r2, r2, #31
   b5880:	d552      	bpl.n	b5928 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5882:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5884:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5888:	d13e      	bne.n	b5908 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b588a:	2c01      	cmp	r4, #1
   b588c:	d13c      	bne.n	b5908 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b588e:	699b      	ldr	r3, [r3, #24]
   b5890:	9906      	ldr	r1, [sp, #24]
   b5892:	461f      	mov	r7, r3
   b5894:	9b04      	ldr	r3, [sp, #16]
   b5896:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5898:	b212      	sxth	r2, r2
   b589a:	4651      	mov	r1, sl
   b589c:	4658      	mov	r0, fp
   b589e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b58a0:	f109 0301 	add.w	r3, r9, #1
   b58a4:	fa4f f983 	sxtb.w	r9, r3
   b58a8:	9b07      	ldr	r3, [sp, #28]
   b58aa:	085b      	lsrs	r3, r3, #1
   b58ac:	9307      	str	r3, [sp, #28]
   b58ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b58b0:	3b01      	subs	r3, #1
   b58b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b58b6:	930a      	str	r3, [sp, #40]	; 0x28
   b58b8:	d1de      	bne.n	b5878 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b58ba:	9f05      	ldr	r7, [sp, #20]
   b58bc:	3701      	adds	r7, #1
   b58be:	b27b      	sxtb	r3, r7
   b58c0:	9305      	str	r3, [sp, #20]
   b58c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b58c4:	3b01      	subs	r3, #1
   b58c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b58ca:	9309      	str	r3, [sp, #36]	; 0x24
   b58cc:	d1b9      	bne.n	b5842 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b58ce:	9b04      	ldr	r3, [sp, #16]
   b58d0:	4543      	cmp	r3, r8
   b58d2:	d00f      	beq.n	b58f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b58d4:	2d01      	cmp	r5, #1
   b58d6:	f8db 3000 	ldr.w	r3, [fp]
   b58da:	d13b      	bne.n	b5954 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b58dc:	2c01      	cmp	r4, #1
   b58de:	d139      	bne.n	b5954 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b58e0:	9908      	ldr	r1, [sp, #32]
   b58e2:	f8cd 8000 	str.w	r8, [sp]
   b58e6:	3105      	adds	r1, #5
   b58e8:	6a1c      	ldr	r4, [r3, #32]
   b58ea:	4632      	mov	r2, r6
   b58ec:	2308      	movs	r3, #8
   b58ee:	b209      	sxth	r1, r1
   b58f0:	4658      	mov	r0, fp
   b58f2:	47a0      	blx	r4
        endWrite();
   b58f4:	f8db 3000 	ldr.w	r3, [fp]
   b58f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58fa:	4658      	mov	r0, fp
}
   b58fc:	b011      	add	sp, #68	; 0x44
   b58fe:	ecbd 8b02 	vpop	{d8}
   b5902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5906:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5908:	9906      	ldr	r1, [sp, #24]
   b590a:	fb14 f202 	smulbb	r2, r4, r2
   b590e:	440a      	add	r2, r1
   b5910:	9904      	ldr	r1, [sp, #16]
   b5912:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5914:	9400      	str	r4, [sp, #0]
   b5916:	69db      	ldr	r3, [r3, #28]
   b5918:	ee18 1a10 	vmov	r1, s16
   b591c:	461f      	mov	r7, r3
   b591e:	b212      	sxth	r2, r2
   b5920:	462b      	mov	r3, r5
   b5922:	4658      	mov	r0, fp
   b5924:	47b8      	blx	r7
   b5926:	e7bb      	b.n	b58a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5928:	9a04      	ldr	r2, [sp, #16]
   b592a:	4542      	cmp	r2, r8
   b592c:	d0b8      	beq.n	b58a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b592e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5930:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5934:	d107      	bne.n	b5946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5936:	2c01      	cmp	r4, #1
   b5938:	d105      	bne.n	b5946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b593a:	699b      	ldr	r3, [r3, #24]
   b593c:	9906      	ldr	r1, [sp, #24]
   b593e:	461f      	mov	r7, r3
   b5940:	440a      	add	r2, r1
   b5942:	4643      	mov	r3, r8
   b5944:	e7a8      	b.n	b5898 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5946:	9906      	ldr	r1, [sp, #24]
   b5948:	f8cd 8004 	str.w	r8, [sp, #4]
   b594c:	fb14 f202 	smulbb	r2, r4, r2
   b5950:	440a      	add	r2, r1
   b5952:	e7df      	b.n	b5914 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5956:	f8cd 8004 	str.w	r8, [sp, #4]
   b595a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b595e:	9a08      	ldr	r2, [sp, #32]
   b5960:	00e4      	lsls	r4, r4, #3
   b5962:	440a      	add	r2, r1
   b5964:	4611      	mov	r1, r2
   b5966:	9400      	str	r4, [sp, #0]
   b5968:	69dc      	ldr	r4, [r3, #28]
   b596a:	4632      	mov	r2, r6
   b596c:	462b      	mov	r3, r5
   b596e:	b209      	sxth	r1, r1
   b5970:	4658      	mov	r0, fp
   b5972:	47a0      	blx	r4
        endWrite();
   b5974:	e7be      	b.n	b58f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5976:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5978:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b597a:	6812      	ldr	r2, [r2, #0]
   b597c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b597e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5980:	b2ff      	uxtb	r7, r7
   b5982:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5986:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b598a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b598c:	789a      	ldrb	r2, [r3, #2]
   b598e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5990:	78da      	ldrb	r2, [r3, #3]
   b5992:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5994:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5996:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b599a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b599e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b59a0:	d801      	bhi.n	b59a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b59a2:	2c01      	cmp	r4, #1
   b59a4:	d957      	bls.n	b5a56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b59a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b59aa:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b59ac:	fa0f f38a 	sxth.w	r3, sl
   b59b0:	9307      	str	r3, [sp, #28]
        startWrite();
   b59b2:	f8db 3000 	ldr.w	r3, [fp]
   b59b6:	4658      	mov	r0, fp
   b59b8:	695b      	ldr	r3, [r3, #20]
   b59ba:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59bc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b59be:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59c2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59c4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b59c8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b59ca:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59cc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b59ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b59d0:	429f      	cmp	r7, r3
   b59d2:	d28f      	bcs.n	b58f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59d4:	9b07      	ldr	r3, [sp, #28]
   b59d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b59d8:	443b      	add	r3, r7
   b59da:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b59de:	2200      	movs	r2, #0
   b59e0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59e4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59e6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59ea:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59ee:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59f2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b59f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b59f6:	9905      	ldr	r1, [sp, #20]
   b59f8:	4291      	cmp	r1, r2
   b59fa:	d241      	bcs.n	b5a80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b59fc:	1c5a      	adds	r2, r3, #1
   b59fe:	b2d2      	uxtb	r2, r2
   b5a00:	075b      	lsls	r3, r3, #29
   b5a02:	920d      	str	r2, [sp, #52]	; 0x34
   b5a04:	d107      	bne.n	b5a16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5a06:	9b06      	ldr	r3, [sp, #24]
   b5a08:	9906      	ldr	r1, [sp, #24]
   b5a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5a0c:	3301      	adds	r3, #1
   b5a0e:	b29b      	uxth	r3, r3
   b5a10:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5a14:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5a16:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5a1a:	d012      	beq.n	b5a42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5a1c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a1e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5a22:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5a26:	d11a      	bne.n	b5a5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5a28:	2c01      	cmp	r4, #1
   b5a2a:	d118      	bne.n	b5a5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5a2e:	699b      	ldr	r3, [r3, #24]
   b5a30:	4411      	add	r1, r2
   b5a32:	9a05      	ldr	r2, [sp, #20]
   b5a34:	4411      	add	r1, r2
   b5a36:	461e      	mov	r6, r3
   b5a38:	4652      	mov	r2, sl
   b5a3a:	9b04      	ldr	r3, [sp, #16]
   b5a3c:	b209      	sxth	r1, r1
   b5a3e:	4658      	mov	r0, fp
   b5a40:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5a42:	9e05      	ldr	r6, [sp, #20]
   b5a44:	3601      	adds	r6, #1
   b5a46:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5a48:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5a4c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5a4e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5a54:	e7ce      	b.n	b59f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5a56:	2300      	movs	r3, #0
   b5a58:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5a5c:	e7a9      	b.n	b59b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a5e:	9805      	ldr	r0, [sp, #20]
   b5a60:	9a08      	ldr	r2, [sp, #32]
   b5a62:	4402      	add	r2, r0
   b5a64:	fb02 1105 	mla	r1, r2, r5, r1
   b5a68:	9a04      	ldr	r2, [sp, #16]
   b5a6a:	e9cd 4200 	strd	r4, r2, [sp]
   b5a6e:	69db      	ldr	r3, [r3, #28]
   b5a70:	ee18 2a10 	vmov	r2, s16
   b5a74:	461e      	mov	r6, r3
   b5a76:	b209      	sxth	r1, r1
   b5a78:	462b      	mov	r3, r5
   b5a7a:	4658      	mov	r0, fp
   b5a7c:	47b0      	blx	r6
   b5a7e:	e7e0      	b.n	b5a42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5a82:	3701      	adds	r7, #1
   b5a84:	4498      	add	r8, r3
   b5a86:	fa5f f888 	uxtb.w	r8, r8
   b5a8a:	b2ff      	uxtb	r7, r7
   b5a8c:	e79f      	b.n	b59ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5a8e:	b011      	add	sp, #68	; 0x44
   b5a90:	ecbd 8b02 	vpop	{d8}
   b5a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a98:	000b912c 	.word	0x000b912c

000b5a9c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5a9e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5aa0:	b085      	sub	sp, #20
   b5aa2:	4604      	mov	r4, r0
   b5aa4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5aa6:	2a00      	cmp	r2, #0
   b5aa8:	d134      	bne.n	b5b14 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5aaa:	290a      	cmp	r1, #10
   b5aac:	d108      	bne.n	b5ac0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5aae:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5ab0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5ab2:	7e42      	ldrb	r2, [r0, #25]
   b5ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5ab8:	8263      	strh	r3, [r4, #18]
}
   b5aba:	2001      	movs	r0, #1
   b5abc:	b005      	add	sp, #20
   b5abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5ac0:	290d      	cmp	r1, #13
   b5ac2:	d0fa      	beq.n	b5aba <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5ac4:	7ee1      	ldrb	r1, [r4, #27]
   b5ac6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5ac8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5aca:	b171      	cbz	r1, b5aea <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5acc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5ad0:	2106      	movs	r1, #6
   b5ad2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5ad6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5ada:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5adc:	bfc1      	itttt	gt
   b5ade:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5ae2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5ae4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5ae8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5aea:	8ae2      	ldrh	r2, [r4, #22]
   b5aec:	9201      	str	r2, [sp, #4]
   b5aee:	8aa2      	ldrh	r2, [r4, #20]
   b5af0:	9200      	str	r2, [sp, #0]
   b5af2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5af6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5afa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5afe:	4620      	mov	r0, r4
   b5b00:	f7ff fe5e 	bl	b57c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5b04:	7e23      	ldrb	r3, [r4, #24]
   b5b06:	8a22      	ldrh	r2, [r4, #16]
   b5b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5b0c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5b10:	8223      	strh	r3, [r4, #16]
   b5b12:	e7d2      	b.n	b5aba <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5b14:	290a      	cmp	r1, #10
   b5b16:	d107      	bne.n	b5b28 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5b18:	2300      	movs	r3, #0
   b5b1a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5b1c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5b1e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5b20:	8a43      	ldrh	r3, [r0, #18]
   b5b22:	fb01 3302 	mla	r3, r1, r2, r3
   b5b26:	e7c7      	b.n	b5ab8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5b28:	290d      	cmp	r1, #13
   b5b2a:	d0c6      	beq.n	b5aba <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5b2c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5b2e:	42a9      	cmp	r1, r5
   b5b30:	d3c3      	bcc.n	b5aba <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5b32:	7a51      	ldrb	r1, [r2, #9]
   b5b34:	4299      	cmp	r1, r3
   b5b36:	d3c0      	bcc.n	b5aba <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5b38:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5b3a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5b3c:	b2ed      	uxtb	r5, r5
   b5b3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5b42:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5b44:	b328      	cbz	r0, b5b92 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5b46:	78e9      	ldrb	r1, [r5, #3]
   b5b48:	b319      	cbz	r1, b5b92 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5b4a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5b4c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5b4e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5b50:	b191      	cbz	r1, b5b78 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5b52:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5b56:	4408      	add	r0, r1
   b5b58:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5b5c:	fb06 1100 	mla	r1, r6, r0, r1
   b5b60:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5b64:	4281      	cmp	r1, r0
   b5b66:	dd07      	ble.n	b5b78 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5b68:	2000      	movs	r0, #0
   b5b6a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5b6c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5b70:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5b72:	fb02 1207 	mla	r2, r2, r7, r1
   b5b76:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5b78:	8ae2      	ldrh	r2, [r4, #22]
   b5b7a:	9201      	str	r2, [sp, #4]
   b5b7c:	8aa2      	ldrh	r2, [r4, #20]
   b5b7e:	9200      	str	r2, [sp, #0]
   b5b80:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5b84:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5b88:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	f7ff fe17 	bl	b57c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5b92:	7929      	ldrb	r1, [r5, #4]
   b5b94:	7e22      	ldrb	r2, [r4, #24]
   b5b96:	8a23      	ldrh	r3, [r4, #16]
   b5b98:	fb01 3302 	mla	r3, r1, r2, r3
   b5b9c:	e7b8      	b.n	b5b10 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5b9e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5b9e:	2901      	cmp	r1, #1
   b5ba0:	bf38      	it	cc
   b5ba2:	2101      	movcc	r1, #1
   b5ba4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5ba6:	7641      	strb	r1, [r0, #25]
}
   b5ba8:	4770      	bx	lr

000b5baa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5baa:	4770      	bx	lr

000b5bac <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5bac:	b510      	push	{r4, lr}
  }
   b5bae:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5bb0:	4604      	mov	r4, r0
  }
   b5bb2:	f7fe fa74 	bl	b409e <_ZdlPvj>
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	bd10      	pop	{r4, pc}

000b5bba <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bba:	b40e      	push	{r1, r2, r3}
   b5bbc:	b503      	push	{r0, r1, lr}
   b5bbe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5bc0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bc2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5bc6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5bc8:	f001 fc71 	bl	b74ae <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5bcc:	b002      	add	sp, #8
   b5bce:	f85d eb04 	ldr.w	lr, [sp], #4
   b5bd2:	b003      	add	sp, #12
   b5bd4:	4770      	bx	lr
	...

000b5bd8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5bda:	4604      	mov	r4, r0
   b5bdc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5bde:	7922      	ldrb	r2, [r4, #4]
   b5be0:	68a3      	ldr	r3, [r4, #8]
   b5be2:	b132      	cbz	r2, b5bf2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5be4:	b9a3      	cbnz	r3, b5c10 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5be6:	490b      	ldr	r1, [pc, #44]	; (b5c14 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5be8:	b002      	add	sp, #8
   b5bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5bee:	f001 bc23 	b.w	b7438 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5bf2:	4a09      	ldr	r2, [pc, #36]	; (b5c18 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5bf4:	7b26      	ldrb	r6, [r4, #12]
   b5bf6:	4d09      	ldr	r5, [pc, #36]	; (b5c1c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5bf8:	4909      	ldr	r1, [pc, #36]	; (b5c20 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5bfa:	7b64      	ldrb	r4, [r4, #13]
   b5bfc:	2e01      	cmp	r6, #1
   b5bfe:	bf18      	it	ne
   b5c00:	4629      	movne	r1, r5
   b5c02:	e9cd 1400 	strd	r1, r4, [sp]
   b5c06:	4907      	ldr	r1, [pc, #28]	; (b5c24 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5c08:	f7ff ffd7 	bl	b5bba <_ZN5Print6printfEPKcz>
  }
   b5c0c:	b002      	add	sp, #8
   b5c0e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5c10:	4a05      	ldr	r2, [pc, #20]	; (b5c28 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5c12:	e7ef      	b.n	b5bf4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5c14:	000b9695 	.word	0x000b9695
   b5c18:	000b9097 	.word	0x000b9097
   b5c1c:	000b9691 	.word	0x000b9691
   b5c20:	000b968d 	.word	0x000b968d
   b5c24:	000b96ab 	.word	0x000b96ab
   b5c28:	000b9684 	.word	0x000b9684

000b5c2c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5c2c:	b510      	push	{r4, lr}
   b5c2e:	4b04      	ldr	r3, [pc, #16]	; (b5c40 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5c30:	6003      	str	r3, [r0, #0]
   b5c32:	4604      	mov	r4, r0
  if(buffer) {
   b5c34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c36:	b108      	cbz	r0, b5c3c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5c38:	f001 f97a 	bl	b6f30 <free>
    buffer = NULL;
  }
}
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	bd10      	pop	{r4, pc}
   b5c40:	000b9b84 	.word	0x000b9b84

000b5c44 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5c44:	b510      	push	{r4, lr}
   b5c46:	4604      	mov	r4, r0
}
   b5c48:	f7ff fff0 	bl	b5c2c <_ZN16Adafruit_SSD1306D1Ev>
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	2150      	movs	r1, #80	; 0x50
   b5c50:	f7fe fa25 	bl	b409e <_ZdlPvj>
   b5c54:	4620      	mov	r0, r4
   b5c56:	bd10      	pop	{r4, pc}

000b5c58 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5c58:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5c5a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5c5c:	db4b      	blt.n	b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5c5e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5c62:	428c      	cmp	r4, r1
   b5c64:	dd47      	ble.n	b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5c66:	2a00      	cmp	r2, #0
   b5c68:	db45      	blt.n	b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5c6a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5c6e:	4294      	cmp	r4, r2
   b5c70:	dd41      	ble.n	b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5c72:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5c74:	2c02      	cmp	r4, #2
   b5c76:	d01f      	beq.n	b5cb8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5c78:	2c03      	cmp	r4, #3
   b5c7a:	d026      	beq.n	b5cca <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5c7c:	2c01      	cmp	r4, #1
   b5c7e:	d104      	bne.n	b5c8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5c80:	8904      	ldrh	r4, [r0, #8]
   b5c82:	43d2      	mvns	r2, r2
   b5c84:	4414      	add	r4, r2
      break;
   b5c86:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5c88:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5c8a:	2b01      	cmp	r3, #1
   b5c8c:	d023      	beq.n	b5cd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5c8e:	2b02      	cmp	r3, #2
   b5c90:	d032      	beq.n	b5cf8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5c92:	bb83      	cbnz	r3, b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5c94:	2a00      	cmp	r2, #0
   b5c96:	4613      	mov	r3, r2
   b5c98:	8904      	ldrh	r4, [r0, #8]
   b5c9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c9c:	bfb8      	it	lt
   b5c9e:	1dd3      	addlt	r3, r2, #7
   b5ca0:	10db      	asrs	r3, r3, #3
   b5ca2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5ca6:	f002 0207 	and.w	r2, r2, #7
   b5caa:	2301      	movs	r3, #1
   b5cac:	4093      	lsls	r3, r2
   b5cae:	5c42      	ldrb	r2, [r0, r1]
   b5cb0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5cb4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5cb6:	e01e      	b.n	b5cf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5cb8:	8904      	ldrh	r4, [r0, #8]
   b5cba:	3c01      	subs	r4, #1
   b5cbc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5cbe:	8944      	ldrh	r4, [r0, #10]
   b5cc0:	43d2      	mvns	r2, r2
   b5cc2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5cc4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5cc6:	b212      	sxth	r2, r2
      break;
   b5cc8:	e7df      	b.n	b5c8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5cca:	8944      	ldrh	r4, [r0, #10]
   b5ccc:	3c01      	subs	r4, #1
   b5cce:	1a64      	subs	r4, r4, r1
      break;
   b5cd0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5cd2:	b222      	sxth	r2, r4
      break;
   b5cd4:	e7d9      	b.n	b5c8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5cd6:	2a00      	cmp	r2, #0
   b5cd8:	8904      	ldrh	r4, [r0, #8]
   b5cda:	4613      	mov	r3, r2
   b5cdc:	bfb8      	it	lt
   b5cde:	1dd3      	addlt	r3, r2, #7
   b5ce0:	10db      	asrs	r3, r3, #3
   b5ce2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5ce6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5ce8:	f002 0007 	and.w	r0, r2, #7
   b5cec:	2201      	movs	r2, #1
   b5cee:	4082      	lsls	r2, r0
   b5cf0:	5c58      	ldrb	r0, [r3, r1]
   b5cf2:	4302      	orrs	r2, r0
   b5cf4:	545a      	strb	r2, [r3, r1]
}
   b5cf6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5cf8:	2a00      	cmp	r2, #0
   b5cfa:	4613      	mov	r3, r2
   b5cfc:	8904      	ldrh	r4, [r0, #8]
   b5cfe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5d00:	bfb8      	it	lt
   b5d02:	1dd3      	addlt	r3, r2, #7
   b5d04:	10db      	asrs	r3, r3, #3
   b5d06:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5d0a:	f002 0207 	and.w	r2, r2, #7
   b5d0e:	2301      	movs	r3, #1
   b5d10:	fa03 f202 	lsl.w	r2, r3, r2
   b5d14:	5c43      	ldrb	r3, [r0, r1]
   b5d16:	405a      	eors	r2, r3
   b5d18:	e7cc      	b.n	b5cb4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5d1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5d1c:	b570      	push	{r4, r5, r6, lr}
   b5d1e:	4604      	mov	r4, r0
   b5d20:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5d22:	2600      	movs	r6, #0
   b5d24:	f7ff fce2 	bl	b56ec <_ZN12Adafruit_GFXC1Ess>
   b5d28:	4b11      	ldr	r3, [pc, #68]	; (b5d70 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5d2a:	6023      	str	r3, [r4, #0]
   b5d2c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5d2e:	b915      	cbnz	r5, b5d36 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5d30:	f002 fa5c 	bl	b81ec <_Z19__fetch_global_Wirev>
   b5d34:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5d36:	23ff      	movs	r3, #255	; 0xff
   b5d38:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5d3c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5d40:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5d44:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5d48:	4b0a      	ldr	r3, [pc, #40]	; (b5d74 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5d4a:	63a3      	str	r3, [r4, #56]	; 0x38
   b5d4c:	2301      	movs	r3, #1
   b5d4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5d52:	9b05      	ldr	r3, [sp, #20]
   b5d54:	64a3      	str	r3, [r4, #72]	; 0x48
   b5d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5d5a:	9b06      	ldr	r3, [sp, #24]
   b5d5c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5d5e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5d62:	6426      	str	r6, [r4, #64]	; 0x40
   b5d64:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5d68:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5d6a:	4620      	mov	r0, r4
   b5d6c:	bd70      	pop	{r4, r5, r6, pc}
   b5d6e:	bf00      	nop
   b5d70:	000b9b84 	.word	0x000b9b84
   b5d74:	000b96d0 	.word	0x000b96d0

000b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d7a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5d7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5d7e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5d80:	b190      	cbz	r0, b5da8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5d82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5d86:	f001 f9d1 	bl	b712c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5d8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d8c:	6803      	ldr	r3, [r0, #0]
   b5d8e:	2100      	movs	r1, #0
   b5d90:	689b      	ldr	r3, [r3, #8]
   b5d92:	4798      	blx	r3
    WIRE_WRITE(c);
   b5d94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d96:	6803      	ldr	r3, [r0, #0]
   b5d98:	4629      	mov	r1, r5
   b5d9a:	689b      	ldr	r3, [r3, #8]
   b5d9c:	4798      	blx	r3
    wire->endTransmission();
   b5d9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5da0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5da4:	f001 b9c9 	b.w	b713a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5da8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5dac:	4601      	mov	r1, r0
   b5dae:	b298      	uxth	r0, r3
   b5db0:	f002 f99b 	bl	b80ea <digitalWrite>
  if(spi) {
   b5db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5db6:	b120      	cbz	r0, b5dc2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5db8:	4629      	mov	r1, r5
}
   b5dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5dbe:	f001 bc59 	b.w	b7674 <_ZN8SPIClass8transferEh>
   b5dc2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5dc4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5dc6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5dca:	ea05 0107 	and.w	r1, r5, r7
   b5dce:	b280      	uxth	r0, r0
   b5dd0:	f002 f98b 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5dd4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5dd8:	2101      	movs	r1, #1
   b5dda:	b280      	uxth	r0, r0
   b5ddc:	f002 f985 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5de0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5de4:	2100      	movs	r1, #0
   b5de6:	b280      	uxth	r0, r0
   b5de8:	f002 f97f 	bl	b80ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5dec:	3e01      	subs	r6, #1
   b5dee:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5df2:	d1e8      	bne.n	b5dc6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5df6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5df6:	b538      	push	{r3, r4, r5, lr}
   b5df8:	4604      	mov	r4, r0
  TRANSACTION_START
   b5dfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5dfc:	460d      	mov	r5, r1
  TRANSACTION_START
   b5dfe:	b180      	cbz	r0, b5e22 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5e00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5e02:	f001 f959 	bl	b70b8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5e06:	2d00      	cmp	r5, #0
   b5e08:	4620      	mov	r0, r4
   b5e0a:	bf14      	ite	ne
   b5e0c:	21a7      	movne	r1, #167	; 0xa7
   b5e0e:	21a6      	moveq	r1, #166	; 0xa6
   b5e10:	f7ff ffb2 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5e14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e16:	b188      	cbz	r0, b5e3c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5e18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5e1e:	f001 b94b 	b.w	b70b8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e24:	b118      	cbz	r0, b5e2e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5e26:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5e2a:	f001 fbb5 	bl	b7598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5e2e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e32:	2100      	movs	r1, #0
   b5e34:	b280      	uxth	r0, r0
   b5e36:	f002 f958 	bl	b80ea <digitalWrite>
   b5e3a:	e7e4      	b.n	b5e06 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5e3c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e40:	2101      	movs	r1, #1
   b5e42:	b280      	uxth	r0, r0
   b5e44:	f002 f951 	bl	b80ea <digitalWrite>
   b5e48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e4a:	b118      	cbz	r0, b5e54 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5e50:	f001 bb88 	b.w	b7564 <_ZN8SPIClass14endTransactionEv>
}
   b5e54:	bd38      	pop	{r3, r4, r5, pc}

000b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5e56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e5a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5e5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5e5e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5e60:	188f      	adds	r7, r1, r2
   b5e62:	b340      	cbz	r0, b5eb6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5e64:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5e68:	f001 f960 	bl	b712c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5e6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e6e:	6803      	ldr	r3, [r0, #0]
   b5e70:	2100      	movs	r1, #0
   b5e72:	689b      	ldr	r3, [r3, #8]
   b5e74:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5e76:	2601      	movs	r6, #1
    while(n--) {
   b5e78:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5e7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5e7c:	d017      	beq.n	b5eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5e7e:	2e1f      	cmp	r6, #31
   b5e80:	d90c      	bls.n	b5e9c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5e82:	f001 f95a 	bl	b713a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5e86:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5e8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e8c:	f001 f94e 	bl	b712c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5e90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e92:	6803      	ldr	r3, [r0, #0]
   b5e94:	2100      	movs	r1, #0
   b5e96:	689b      	ldr	r3, [r3, #8]
   b5e98:	4798      	blx	r3
        bytesOut = 1;
   b5e9a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e9e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ea2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5ea4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5ea6:	689b      	ldr	r3, [r3, #8]
   b5ea8:	4798      	blx	r3
      bytesOut++;
   b5eaa:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5eac:	e7e4      	b.n	b5e78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5eae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5eb2:	f001 b942 	b.w	b713a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5eb6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5eba:	4601      	mov	r1, r0
   b5ebc:	b298      	uxth	r0, r3
   b5ebe:	f002 f914 	bl	b80ea <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ec2:	42bd      	cmp	r5, r7
   b5ec4:	d022      	beq.n	b5f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5ec6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ec8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5ecc:	b118      	cbz	r0, b5ed6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5ece:	4649      	mov	r1, r9
   b5ed0:	f001 fbd0 	bl	b7674 <_ZN8SPIClass8transferEh>
   b5ed4:	e7f5      	b.n	b5ec2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5ed6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5ed8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5edc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5ee0:	ea09 0108 	and.w	r1, r9, r8
   b5ee4:	b280      	uxth	r0, r0
   b5ee6:	f002 f900 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5eea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5eee:	2101      	movs	r1, #1
   b5ef0:	b280      	uxth	r0, r0
   b5ef2:	f002 f8fa 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5ef6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5efa:	2100      	movs	r1, #0
   b5efc:	b280      	uxth	r0, r0
   b5efe:	f002 f8f4 	bl	b80ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5f02:	3e01      	subs	r6, #1
   b5f04:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5f08:	d1e8      	bne.n	b5edc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5f0a:	e7da      	b.n	b5ec2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5f10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5f14:	1dda      	adds	r2, r3, #7
   b5f16:	bf48      	it	mi
   b5f18:	f103 020e 	addmi.w	r2, r3, #14
   b5f1c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5f20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5f22:	10d2      	asrs	r2, r2, #3
   b5f24:	435a      	muls	r2, r3
   b5f26:	2100      	movs	r1, #0
   b5f28:	f002 bf3a 	b.w	b8da0 <memset>

000b5f2c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5f30:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5f32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5f34:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5f38:	4604      	mov	r4, r0
   b5f3a:	460f      	mov	r7, r1
   b5f3c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5f3e:	b1c3      	cbz	r3, b5f72 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5f40:	4620      	mov	r0, r4
   b5f42:	f7ff ffe5 	bl	b5f10 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5f46:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5f4a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5f4e:	2820      	cmp	r0, #32
   b5f50:	dc21      	bgt.n	b5f96 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5f52:	2320      	movs	r3, #32
   b5f54:	2201      	movs	r2, #1
   b5f56:	3820      	subs	r0, #32
   b5f58:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5f5c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5f60:	2373      	movs	r3, #115	; 0x73
   b5f62:	3973      	subs	r1, #115	; 0x73
   b5f64:	9300      	str	r3, [sp, #0]
   b5f66:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5f6a:	4b89      	ldr	r3, [pc, #548]	; (b6190 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5f6c:	f340 024f 	sbfx	r2, r0, #1, #16
   b5f70:	e021      	b.n	b5fb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5f72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5f76:	1dd8      	adds	r0, r3, #7
   b5f78:	bf48      	it	mi
   b5f7a:	f103 000e 	addmi.w	r0, r3, #14
   b5f7e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5f82:	10c0      	asrs	r0, r0, #3
   b5f84:	4358      	muls	r0, r3
   b5f86:	f000 ffcb 	bl	b6f20 <malloc>
   b5f8a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5f8c:	2800      	cmp	r0, #0
   b5f8e:	d1d7      	bne.n	b5f40 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5f90:	b004      	add	sp, #16
   b5f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5f96:	3840      	subs	r0, #64	; 0x40
   b5f98:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5f9c:	fa02 f280 	sxtah	r2, r2, r0
   b5fa0:	2340      	movs	r3, #64	; 0x40
   b5fa2:	2001      	movs	r0, #1
   b5fa4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5fa8:	2352      	movs	r3, #82	; 0x52
   b5faa:	3952      	subs	r1, #82	; 0x52
   b5fac:	9300      	str	r3, [sp, #0]
   b5fae:	4b79      	ldr	r3, [pc, #484]	; (b6194 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5fb0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5fb4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5fb6:	4620      	mov	r0, r4
   b5fb8:	f341 014f 	sbfx	r1, r1, #1, #16
   b5fbc:	f7ff fbac 	bl	b5718 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5fc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5fc2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5fc6:	2800      	cmp	r0, #0
   b5fc8:	d078      	beq.n	b60bc <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5fca:	2d00      	cmp	r5, #0
   b5fcc:	d174      	bne.n	b60b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5fce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5fd2:	2b20      	cmp	r3, #32
   b5fd4:	bf0c      	ite	eq
   b5fd6:	253c      	moveq	r5, #60	; 0x3c
   b5fd8:	253d      	movne	r5, #61	; 0x3d
   b5fda:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5fde:	f1b8 0f00 	cmp.w	r8, #0
   b5fe2:	d001      	beq.n	b5fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5fe4:	f001 f86c 	bl	b70c0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5fe8:	b1fe      	cbz	r6, b602a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5fea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5fee:	2800      	cmp	r0, #0
   b5ff0:	db1b      	blt.n	b602a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5ff2:	2101      	movs	r1, #1
   b5ff4:	b280      	uxth	r0, r0
   b5ff6:	f002 f867 	bl	b80c8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5ffa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5ffe:	2101      	movs	r1, #1
   b6000:	b280      	uxth	r0, r0
   b6002:	f002 f872 	bl	b80ea <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6006:	2001      	movs	r0, #1
   b6008:	f000 ffce 	bl	b6fa8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b600c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6010:	2100      	movs	r1, #0
   b6012:	b280      	uxth	r0, r0
   b6014:	f002 f869 	bl	b80ea <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6018:	200a      	movs	r0, #10
   b601a:	f000 ffc5 	bl	b6fa8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b601e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6022:	2101      	movs	r1, #1
   b6024:	b280      	uxth	r0, r0
   b6026:	f002 f860 	bl	b80ea <digitalWrite>
  TRANSACTION_START
   b602a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b602c:	2800      	cmp	r0, #0
   b602e:	d074      	beq.n	b611a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6032:	f001 f841 	bl	b70b8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6036:	2204      	movs	r2, #4
   b6038:	4957      	ldr	r1, [pc, #348]	; (b6198 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b603a:	4620      	mov	r0, r4
   b603c:	f7ff ff0b 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6040:	8961      	ldrh	r1, [r4, #10]
   b6042:	3901      	subs	r1, #1
   b6044:	b2c9      	uxtb	r1, r1
   b6046:	4620      	mov	r0, r4
   b6048:	f7ff fe96 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b604c:	4953      	ldr	r1, [pc, #332]	; (b619c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b604e:	2204      	movs	r2, #4
   b6050:	4620      	mov	r0, r4
   b6052:	f7ff ff00 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6056:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b605a:	2b01      	cmp	r3, #1
   b605c:	bf0c      	ite	eq
   b605e:	2110      	moveq	r1, #16
   b6060:	2114      	movne	r1, #20
   b6062:	4620      	mov	r0, r4
   b6064:	f7ff fe88 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6068:	2204      	movs	r2, #4
   b606a:	494d      	ldr	r1, [pc, #308]	; (b61a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b606c:	4620      	mov	r0, r4
   b606e:	f7ff fef2 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6072:	68a3      	ldr	r3, [r4, #8]
   b6074:	4a4b      	ldr	r2, [pc, #300]	; (b61a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6076:	4293      	cmp	r3, r2
   b6078:	d15c      	bne.n	b6134 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b607a:	494b      	ldr	r1, [pc, #300]	; (b61a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b607c:	2204      	movs	r2, #4
   b607e:	4620      	mov	r0, r4
   b6080:	f7ff fee9 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6084:	21d9      	movs	r1, #217	; 0xd9
   b6086:	4620      	mov	r0, r4
   b6088:	f7ff fe76 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b608c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6090:	2b01      	cmp	r3, #1
   b6092:	bf0c      	ite	eq
   b6094:	2122      	moveq	r1, #34	; 0x22
   b6096:	21f1      	movne	r1, #241	; 0xf1
   b6098:	4620      	mov	r0, r4
   b609a:	f7ff fe6d 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b609e:	4620      	mov	r0, r4
   b60a0:	4942      	ldr	r1, [pc, #264]	; (b61ac <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b60a2:	2206      	movs	r2, #6
   b60a4:	f7ff fed7 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b60a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b60aa:	2800      	cmp	r0, #0
   b60ac:	d063      	beq.n	b6176 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b60ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b60b0:	f001 f802 	bl	b70b8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b60b4:	2001      	movs	r0, #1
   b60b6:	e76b      	b.n	b5f90 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b60b8:	b26d      	sxtb	r5, r5
   b60ba:	e78e      	b.n	b5fda <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b60bc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b60c0:	2101      	movs	r1, #1
   b60c2:	b280      	uxth	r0, r0
   b60c4:	f002 f800 	bl	b80c8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b60c8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60cc:	2101      	movs	r1, #1
   b60ce:	b280      	uxth	r0, r0
   b60d0:	f001 fffa 	bl	b80c8 <pinMode>
    SSD1306_DESELECT
   b60d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60d8:	2101      	movs	r1, #1
   b60da:	b280      	uxth	r0, r0
   b60dc:	f002 f805 	bl	b80ea <digitalWrite>
    if(spi) { // Hardware SPI
   b60e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b60e2:	b13d      	cbz	r5, b60f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b60e4:	f1b8 0f00 	cmp.w	r8, #0
   b60e8:	f43f af7e 	beq.w	b5fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b60ec:	4628      	mov	r0, r5
   b60ee:	f001 fa25 	bl	b753c <_ZN8SPIClass5beginEv>
   b60f2:	e779      	b.n	b5fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b60f4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b60f8:	2101      	movs	r1, #1
   b60fa:	b280      	uxth	r0, r0
   b60fc:	f001 ffe4 	bl	b80c8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b6100:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6104:	2101      	movs	r1, #1
   b6106:	b280      	uxth	r0, r0
   b6108:	f001 ffde 	bl	b80c8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b610c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6110:	4629      	mov	r1, r5
   b6112:	b280      	uxth	r0, r0
   b6114:	f001 ffe9 	bl	b80ea <digitalWrite>
   b6118:	e766      	b.n	b5fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b611a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b611c:	b118      	cbz	r0, b6126 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b611e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6122:	f001 fa39 	bl	b7598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6126:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b612a:	2100      	movs	r1, #0
   b612c:	b280      	uxth	r0, r0
   b612e:	f001 ffdc 	bl	b80ea <digitalWrite>
   b6132:	e780      	b.n	b6036 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6134:	4a1e      	ldr	r2, [pc, #120]	; (b61b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6136:	4293      	cmp	r3, r2
   b6138:	d10e      	bne.n	b6158 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b613a:	491e      	ldr	r1, [pc, #120]	; (b61b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b613c:	2203      	movs	r2, #3
   b613e:	4620      	mov	r0, r4
   b6140:	f7ff fe89 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6144:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6148:	2b01      	cmp	r3, #1
   b614a:	bf0c      	ite	eq
   b614c:	219f      	moveq	r1, #159	; 0x9f
   b614e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6150:	4620      	mov	r0, r4
   b6152:	f7ff fe11 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6156:	e795      	b.n	b6084 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6158:	4a17      	ldr	r2, [pc, #92]	; (b61b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b615a:	4293      	cmp	r3, r2
   b615c:	d192      	bne.n	b6084 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b615e:	4917      	ldr	r1, [pc, #92]	; (b61bc <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b6160:	2203      	movs	r2, #3
   b6162:	4620      	mov	r0, r4
   b6164:	f7ff fe77 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6168:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b616c:	2b01      	cmp	r3, #1
   b616e:	bf0c      	ite	eq
   b6170:	2110      	moveq	r1, #16
   b6172:	21af      	movne	r1, #175	; 0xaf
   b6174:	e7ec      	b.n	b6150 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6176:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b617a:	2101      	movs	r1, #1
   b617c:	b280      	uxth	r0, r0
   b617e:	f001 ffb4 	bl	b80ea <digitalWrite>
   b6182:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6184:	2800      	cmp	r0, #0
   b6186:	d095      	beq.n	b60b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6188:	f001 f9ec 	bl	b7564 <_ZN8SPIClass14endTransactionEv>
   b618c:	e792      	b.n	b60b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b618e:	bf00      	nop
   b6190:	000b999c 	.word	0x000b999c
   b6194:	000b96dc 	.word	0x000b96dc
   b6198:	000b9be4 	.word	0x000b9be4
   b619c:	000b9be8 	.word	0x000b9be8
   b61a0:	000b9bec 	.word	0x000b9bec
   b61a4:	00200080 	.word	0x00200080
   b61a8:	000b9bf6 	.word	0x000b9bf6
   b61ac:	000b9bf0 	.word	0x000b9bf0
   b61b0:	00400080 	.word	0x00400080
   b61b4:	000b9bfa 	.word	0x000b9bfa
   b61b8:	00100060 	.word	0x00100060
   b61bc:	000b9bfd 	.word	0x000b9bfd

000b61c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b61c0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b61c2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b61c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b61c8:	db3d      	blt.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b61ca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b61ce:	4294      	cmp	r4, r2
   b61d0:	dd39      	ble.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b61d2:	2900      	cmp	r1, #0
      w += x;
   b61d4:	bfbe      	ittt	lt
   b61d6:	185b      	addlt	r3, r3, r1
   b61d8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b61da:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b61dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b61e0:	18ce      	adds	r6, r1, r3
   b61e2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b61e4:	bfc4      	itt	gt
   b61e6:	1a63      	subgt	r3, r4, r1
   b61e8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b61ea:	2b00      	cmp	r3, #0
   b61ec:	dd2b      	ble.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b61ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b61f0:	10d6      	asrs	r6, r2, #3
   b61f2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b61f6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b61f8:	f002 0007 	and.w	r0, r2, #7
   b61fc:	2201      	movs	r2, #1
   b61fe:	4082      	lsls	r2, r0
      switch(color) {
   b6200:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b6202:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6204:	d016      	beq.n	b6234 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6206:	2d02      	cmp	r5, #2
   b6208:	d00b      	beq.n	b6222 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b620a:	b9e5      	cbnz	r5, b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b620c:	43d2      	mvns	r2, r2
   b620e:	b2d2      	uxtb	r2, r2
   b6210:	440b      	add	r3, r1
   b6212:	4299      	cmp	r1, r3
   b6214:	d017      	beq.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6216:	f811 0b01 	ldrb.w	r0, [r1], #1
   b621a:	4010      	ands	r0, r2
   b621c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6220:	e7f7      	b.n	b6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b6222:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6224:	4299      	cmp	r1, r3
   b6226:	d00e      	beq.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6228:	f811 0b01 	ldrb.w	r0, [r1], #1
   b622c:	4050      	eors	r0, r2
   b622e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6232:	e7f7      	b.n	b6224 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6234:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6236:	4299      	cmp	r1, r3
   b6238:	d005      	beq.n	b6246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b623a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b623e:	4310      	orrs	r0, r2
   b6240:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6244:	e7f7      	b.n	b6236 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6246:	bd70      	pop	{r4, r5, r6, pc}

000b6248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6248:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b624a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b624c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6250:	db76      	blt.n	b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b6252:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6256:	42b1      	cmp	r1, r6
   b6258:	da72      	bge.n	b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b625a:	2a00      	cmp	r2, #0
      __h += __y;
   b625c:	bfbe      	ittt	lt
   b625e:	189b      	addlt	r3, r3, r2
   b6260:	b21b      	sxthlt	r3, r3
      __y = 0;
   b6262:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6264:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6268:	18d7      	adds	r7, r2, r3
   b626a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b626c:	bfc4      	itt	gt
   b626e:	1aa3      	subgt	r3, r4, r2
   b6270:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b6272:	2b00      	cmp	r3, #0
   b6274:	dd64      	ble.n	b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6276:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b627a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b627c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b6280:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6284:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6286:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b628a:	d023      	beq.n	b62d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b628c:	f1c2 0208 	rsb	r2, r2, #8
   b6290:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6292:	492d      	ldr	r1, [pc, #180]	; (b6348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6294:	4293      	cmp	r3, r2
   b6296:	bf3c      	itt	cc
   b6298:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b629c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b62a0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b62a2:	bf3c      	itt	cc
   b62a4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b62a8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b62ac:	2d01      	cmp	r5, #1
   b62ae:	d007      	beq.n	b62c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b62b0:	2d02      	cmp	r5, #2
   b62b2:	d02e      	beq.n	b6312 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b62b4:	b94d      	cbnz	r5, b62ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b62b6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b62ba:	ea2c 0101 	bic.w	r1, ip, r1
   b62be:	e003      	b.n	b62c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b62c0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b62c4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b62c8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b62ca:	4293      	cmp	r3, r2
   b62cc:	d338      	bcc.n	b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b62ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b62d2:	440c      	add	r4, r1
        h -= mod;
   b62d4:	1a9a      	subs	r2, r3, r2
   b62d6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b62d8:	2a07      	cmp	r2, #7
   b62da:	d90e      	bls.n	b62fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b62dc:	2d02      	cmp	r5, #2
   b62de:	d11d      	bne.n	b631c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b62e0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b62e2:	7821      	ldrb	r1, [r4, #0]
   b62e4:	43c9      	mvns	r1, r1
   b62e6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b62e8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b62ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b62ee:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b62f0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b62f2:	440c      	add	r4, r1
            } while(h >= 8);
   b62f4:	d8f5      	bhi.n	b62e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b62f6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b62fa:	b30a      	cbz	r2, b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b62fc:	4b13      	ldr	r3, [pc, #76]	; (b634c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b62fe:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6300:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6302:	d01a      	beq.n	b633a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6304:	2d02      	cmp	r5, #2
   b6306:	d01c      	beq.n	b6342 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6308:	b9d5      	cbnz	r5, b6340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b630a:	7822      	ldrb	r2, [r4, #0]
   b630c:	ea22 0303 	bic.w	r3, r2, r3
   b6310:	e015      	b.n	b633e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b6312:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6316:	ea81 010c 	eor.w	r1, r1, ip
   b631a:	e7d5      	b.n	b62c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b631c:	1e29      	subs	r1, r5, #0
   b631e:	bf18      	it	ne
   b6320:	2101      	movne	r1, #1
   b6322:	4249      	negs	r1, r1
   b6324:	b2c9      	uxtb	r1, r1
   b6326:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6328:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b632a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b632c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6330:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6332:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6334:	4434      	add	r4, r6
            } while(h >= 8);
   b6336:	d8f7      	bhi.n	b6328 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6338:	e7dd      	b.n	b62f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b633a:	7822      	ldrb	r2, [r4, #0]
   b633c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b633e:	7023      	strb	r3, [r4, #0]
}
   b6340:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6342:	7822      	ldrb	r2, [r4, #0]
   b6344:	4053      	eors	r3, r2
   b6346:	e7fa      	b.n	b633e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6348:	000b9bd4 	.word	0x000b9bd4
   b634c:	000b9bdc 	.word	0x000b9bdc

000b6350 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6350:	b470      	push	{r4, r5, r6}
   b6352:	4614      	mov	r4, r2
  switch(rotation) {
   b6354:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6356:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b635a:	2a02      	cmp	r2, #2
   b635c:	d00d      	beq.n	b637a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b635e:	2a03      	cmp	r2, #3
   b6360:	d018      	beq.n	b6394 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6362:	2a01      	cmp	r2, #1
   b6364:	d111      	bne.n	b638a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6366:	8902      	ldrh	r2, [r0, #8]
   b6368:	43e4      	mvns	r4, r4
   b636a:	4414      	add	r4, r2
   b636c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b636e:	9603      	str	r6, [sp, #12]
   b6370:	460a      	mov	r2, r1
   b6372:	4621      	mov	r1, r4
}
   b6374:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6376:	f7ff bf67 	b.w	b6248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b637a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b637c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b637e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6380:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6382:	4414      	add	r4, r2
    x -= (w-1);
   b6384:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6386:	b224      	sxth	r4, r4
    x -= (w-1);
   b6388:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b638a:	9603      	str	r6, [sp, #12]
   b638c:	4622      	mov	r2, r4
}
   b638e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6390:	f7ff bf16 	b.w	b61c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6394:	8945      	ldrh	r5, [r0, #10]
   b6396:	4419      	add	r1, r3
   b6398:	1a69      	subs	r1, r5, r1
   b639a:	b209      	sxth	r1, r1
    break;
   b639c:	e7e7      	b.n	b636e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b639e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b639e:	b430      	push	{r4, r5}
   b63a0:	4614      	mov	r4, r2
  switch(rotation) {
   b63a2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b63a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b63a8:	2a02      	cmp	r2, #2
   b63aa:	d00d      	beq.n	b63c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b63ac:	2a03      	cmp	r2, #3
   b63ae:	d018      	beq.n	b63e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b63b0:	2a01      	cmp	r2, #1
   b63b2:	d111      	bne.n	b63d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b63b4:	18e2      	adds	r2, r4, r3
   b63b6:	8904      	ldrh	r4, [r0, #8]
   b63b8:	1aa4      	subs	r4, r4, r2
   b63ba:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b63bc:	9502      	str	r5, [sp, #8]
   b63be:	460a      	mov	r2, r1
   b63c0:	4621      	mov	r1, r4
}
   b63c2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b63c4:	f7ff befc 	b.w	b61c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b63c8:	8902      	ldrh	r2, [r0, #8]
   b63ca:	43c9      	mvns	r1, r1
   b63cc:	4411      	add	r1, r2
    y -= (h-1);
   b63ce:	18e2      	adds	r2, r4, r3
   b63d0:	8944      	ldrh	r4, [r0, #10]
   b63d2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b63d4:	b209      	sxth	r1, r1
    y -= (h-1);
   b63d6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b63d8:	9502      	str	r5, [sp, #8]
   b63da:	4622      	mov	r2, r4
}
   b63dc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b63de:	f7ff bf33 	b.w	b6248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b63e2:	8942      	ldrh	r2, [r0, #10]
   b63e4:	43c9      	mvns	r1, r1
   b63e6:	4411      	add	r1, r2
   b63e8:	b209      	sxth	r1, r1
    break;
   b63ea:	e7e7      	b.n	b63bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b63ec <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b63ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b63f0:	4604      	mov	r4, r0
  TRANSACTION_START
   b63f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b63f4:	2800      	cmp	r0, #0
   b63f6:	d042      	beq.n	b647e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b63f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b63fa:	f000 fe5d 	bl	b70b8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b63fe:	4947      	ldr	r1, [pc, #284]	; (b651c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6400:	2205      	movs	r2, #5
   b6402:	4620      	mov	r0, r4
   b6404:	f7ff fd27 	bl	b5e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6408:	8921      	ldrh	r1, [r4, #8]
   b640a:	3901      	subs	r1, #1
   b640c:	4620      	mov	r0, r4
   b640e:	b2c9      	uxtb	r1, r1
   b6410:	f7ff fcb2 	bl	b5d78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6414:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6418:	1dde      	adds	r6, r3, #7
   b641a:	bf48      	it	mi
   b641c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6420:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6424:	8923      	ldrh	r3, [r4, #8]
   b6426:	10f6      	asrs	r6, r6, #3
   b6428:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b642c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6430:	2800      	cmp	r0, #0
   b6432:	d03a      	beq.n	b64aa <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6434:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6438:	f000 fe78 	bl	b712c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b643e:	6803      	ldr	r3, [r0, #0]
   b6440:	2140      	movs	r1, #64	; 0x40
   b6442:	689b      	ldr	r3, [r3, #8]
   b6444:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6446:	2701      	movs	r7, #1
    while(count--) {
   b6448:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b644a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b644c:	d024      	beq.n	b6498 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b644e:	2f1f      	cmp	r7, #31
   b6450:	d90c      	bls.n	b646c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6452:	f000 fe72 	bl	b713a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6456:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b645a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b645c:	f000 fe66 	bl	b712c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6462:	6803      	ldr	r3, [r0, #0]
   b6464:	2140      	movs	r1, #64	; 0x40
   b6466:	689b      	ldr	r3, [r3, #8]
   b6468:	4798      	blx	r3
        bytesOut = 1;
   b646a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b646c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b646e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6472:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6474:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6476:	689b      	ldr	r3, [r3, #8]
   b6478:	4798      	blx	r3
      bytesOut++;
   b647a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b647c:	e7e4      	b.n	b6448 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b647e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6480:	b118      	cbz	r0, b648a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6482:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6486:	f001 f887 	bl	b7598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b648a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b648e:	2100      	movs	r1, #0
   b6490:	b280      	uxth	r0, r0
   b6492:	f001 fe2a 	bl	b80ea <digitalWrite>
   b6496:	e7b2      	b.n	b63fe <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6498:	f000 fe4f 	bl	b713a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b649c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b649e:	b378      	cbz	r0, b6500 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b64a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b64a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b64a6:	f000 be07 	b.w	b70b8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b64aa:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b64ae:	2101      	movs	r1, #1
   b64b0:	b280      	uxth	r0, r0
   b64b2:	f001 fe1a 	bl	b80ea <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b64b6:	42ae      	cmp	r6, r5
   b64b8:	d0f0      	beq.n	b649c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b64ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b64bc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b64c0:	b118      	cbz	r0, b64ca <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b64c2:	4649      	mov	r1, r9
   b64c4:	f001 f8d6 	bl	b7674 <_ZN8SPIClass8transferEh>
   b64c8:	e7f5      	b.n	b64b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b64ca:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b64cc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b64d0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b64d4:	ea09 0108 	and.w	r1, r9, r8
   b64d8:	b280      	uxth	r0, r0
   b64da:	f001 fe06 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b64de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64e2:	2101      	movs	r1, #1
   b64e4:	b280      	uxth	r0, r0
   b64e6:	f001 fe00 	bl	b80ea <digitalWrite>
      digitalWrite(clkPin , LOW);
   b64ea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64ee:	2100      	movs	r1, #0
   b64f0:	b280      	uxth	r0, r0
   b64f2:	f001 fdfa 	bl	b80ea <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b64f6:	3f01      	subs	r7, #1
   b64f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b64fc:	d1e8      	bne.n	b64d0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b64fe:	e7da      	b.n	b64b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6500:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6504:	2101      	movs	r1, #1
   b6506:	b280      	uxth	r0, r0
   b6508:	f001 fdef 	bl	b80ea <digitalWrite>
   b650c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b650e:	b118      	cbz	r0, b6518 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6510:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6514:	f001 b826 	b.w	b7564 <_ZN8SPIClass14endTransactionEv>
}
   b6518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b651c:	000b9c00 	.word	0x000b9c00

000b6520 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6520:	2100      	movs	r1, #0
   b6522:	220a      	movs	r2, #10
   b6524:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6528:	4770      	bx	lr

000b652a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b652a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b652c:	b510      	push	{r4, lr}
   b652e:	4604      	mov	r4, r0
    this->pin = pin;
   b6530:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6532:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6534:	b288      	uxth	r0, r1
   b6536:	f001 fdf1 	bl	b811c <digitalRead>
   b653a:	b108      	cbz	r0, b6540 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b653c:	2303      	movs	r3, #3
   b653e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6540:	f000 fa82 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6544:	6020      	str	r0, [r4, #0]
#endif
}
   b6546:	bd10      	pop	{r4, pc}

000b6548 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6548:	b538      	push	{r3, r4, r5, lr}
   b654a:	460c      	mov	r4, r1
   b654c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b654e:	4611      	mov	r1, r2
   b6550:	b2a0      	uxth	r0, r4
   b6552:	f001 fdb9 	bl	b80c8 <pinMode>
  
  this->attach(pin);
   b6556:	4621      	mov	r1, r4
   b6558:	4628      	mov	r0, r5
}
   b655a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b655e:	f7ff bfe4 	b.w	b652a <_ZN8Debounce6attachEi>

000b6562 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6562:	b538      	push	{r3, r4, r5, lr}
   b6564:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6566:	79c0      	ldrb	r0, [r0, #7]
   b6568:	f001 fdd8 	bl	b811c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b656c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b656e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6570:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6574:	bf18      	it	ne
   b6576:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6578:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b657c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b657e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6580:	d00a      	beq.n	b6598 <_ZN8Debounce6updateEv+0x36>
   b6582:	f000 fa61 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6586:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6588:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b658a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b658e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6590:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6592:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6596:	bd38      	pop	{r3, r4, r5, pc}
   b6598:	f000 fa56 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b659c:	6823      	ldr	r3, [r4, #0]
   b659e:	1ac0      	subs	r0, r0, r3
   b65a0:	88a3      	ldrh	r3, [r4, #4]
   b65a2:	4298      	cmp	r0, r3
   b65a4:	d3f4      	bcc.n	b6590 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b65a6:	79a3      	ldrb	r3, [r4, #6]
   b65a8:	f003 0301 	and.w	r3, r3, #1
   b65ac:	42ab      	cmp	r3, r5
   b65ae:	d0ef      	beq.n	b6590 <_ZN8Debounce6updateEv+0x2e>
   b65b0:	f000 fa4a 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b65b4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b65b6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b65b8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b65bc:	f043 0308 	orr.w	r3, r3, #8
   b65c0:	e7e5      	b.n	b658e <_ZN8Debounce6updateEv+0x2c>

000b65c2 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b65c2:	7980      	ldrb	r0, [r0, #6]
   b65c4:	f000 0009 	and.w	r0, r0, #9
   b65c8:	f1a0 0308 	sub.w	r3, r0, #8
   b65cc:	4258      	negs	r0, r3
   b65ce:	4158      	adcs	r0, r3
   b65d0:	4770      	bx	lr

000b65d2 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b65d2:	4770      	bx	lr

000b65d4 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b65d4:	b510      	push	{r4, lr}
   b65d6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b65d8:	2160      	movs	r1, #96	; 0x60
   b65da:	6800      	ldr	r0, [r0, #0]
   b65dc:	f000 fda2 	bl	b7124 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b65e0:	6820      	ldr	r0, [r4, #0]
   b65e2:	f000 fdaa 	bl	b713a <_ZN7TwoWire15endTransmissionEv>
}
   b65e6:	fab0 f080 	clz	r0, r0
   b65ea:	0940      	lsrs	r0, r0, #5
   b65ec:	bd10      	pop	{r4, pc}

000b65ee <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b65ee:	b538      	push	{r3, r4, r5, lr}
   b65f0:	4605      	mov	r5, r0
   b65f2:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b65f4:	6800      	ldr	r0, [r0, #0]
   b65f6:	2160      	movs	r1, #96	; 0x60
   b65f8:	f000 fd94 	bl	b7124 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b65fc:	6828      	ldr	r0, [r5, #0]
   b65fe:	6803      	ldr	r3, [r0, #0]
   b6600:	4621      	mov	r1, r4
   b6602:	689b      	ldr	r3, [r3, #8]
   b6604:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b6606:	6828      	ldr	r0, [r5, #0]
   b6608:	2100      	movs	r1, #0
   b660a:	f000 fd92 	bl	b7132 <_ZN7TwoWire15endTransmissionEh>
   b660e:	b108      	cbz	r0, b6614 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b6610:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b6612:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b6614:	6828      	ldr	r0, [r5, #0]
   b6616:	2202      	movs	r2, #2
   b6618:	2160      	movs	r1, #96	; 0x60
   b661a:	f000 fd80 	bl	b711e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b661e:	6828      	ldr	r0, [r5, #0]
   b6620:	6803      	ldr	r3, [r0, #0]
   b6622:	691b      	ldr	r3, [r3, #16]
   b6624:	4798      	blx	r3
   b6626:	2800      	cmp	r0, #0
   b6628:	d0f2      	beq.n	b6610 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b662a:	6828      	ldr	r0, [r5, #0]
   b662c:	6803      	ldr	r3, [r0, #0]
   b662e:	695b      	ldr	r3, [r3, #20]
   b6630:	4798      	blx	r3
   b6632:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b6634:	6828      	ldr	r0, [r5, #0]
   b6636:	6803      	ldr	r3, [r0, #0]
   b6638:	695b      	ldr	r3, [r3, #20]
   b663a:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b663c:	b2e4      	uxtb	r4, r4
   b663e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b6642:	b280      	uxth	r0, r0
   b6644:	e7e5      	b.n	b6612 <_ZN8VCNL404011readCommandEh+0x24>

000b6646 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b6646:	2109      	movs	r1, #9
   b6648:	f7ff bfd1 	b.w	b65ee <_ZN8VCNL404011readCommandEh>

000b664c <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b664c:	210c      	movs	r1, #12
   b664e:	f7ff bfce 	b.w	b65ee <_ZN8VCNL404011readCommandEh>

000b6652 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b6652:	b570      	push	{r4, r5, r6, lr}
   b6654:	4604      	mov	r4, r0
   b6656:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b6658:	6800      	ldr	r0, [r0, #0]
   b665a:	2160      	movs	r1, #96	; 0x60
{
   b665c:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b665e:	f000 fd61 	bl	b7124 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b6662:	6820      	ldr	r0, [r4, #0]
   b6664:	6803      	ldr	r3, [r0, #0]
   b6666:	4631      	mov	r1, r6
   b6668:	689b      	ldr	r3, [r3, #8]
   b666a:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b666c:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b666e:	6803      	ldr	r3, [r0, #0]
   b6670:	b2e9      	uxtb	r1, r5
   b6672:	689b      	ldr	r3, [r3, #8]
   b6674:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b6676:	6820      	ldr	r0, [r4, #0]
   b6678:	6803      	ldr	r3, [r0, #0]
   b667a:	0a29      	lsrs	r1, r5, #8
   b667c:	689b      	ldr	r3, [r3, #8]
   b667e:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b6680:	6820      	ldr	r0, [r4, #0]
   b6682:	f000 fd5a 	bl	b713a <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b6686:	fab0 f080 	clz	r0, r0
   b668a:	0940      	lsrs	r0, r0, #5
   b668c:	bd70      	pop	{r4, r5, r6, pc}

000b668e <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b668e:	b570      	push	{r4, r5, r6, lr}
   b6690:	4604      	mov	r4, r0
   b6692:	460d      	mov	r5, r1
   b6694:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b6696:	f7ff ffaa 	bl	b65ee <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b669a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b669e:	ea40 0206 	orr.w	r2, r0, r6
   b66a2:	4629      	mov	r1, r5
   b66a4:	4620      	mov	r0, r4
}
   b66a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b66aa:	f7ff bfd2 	b.w	b6652 <_ZN8VCNL404012writeCommandEht>

000b66ae <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b66ae:	b570      	push	{r4, r5, r6, lr}
   b66b0:	4604      	mov	r4, r0
   b66b2:	460d      	mov	r5, r1
   b66b4:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b66b6:	f7ff ff9a 	bl	b65ee <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b66ba:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b66bc:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b66c0:	4629      	mov	r1, r5
   b66c2:	4620      	mov	r0, r4
}
   b66c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b66c8:	f7ff bfc3 	b.w	b6652 <_ZN8VCNL404012writeCommandEht>

000b66cc <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b66cc:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b66ce:	f7ff ff8e 	bl	b65ee <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b66d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b66d6:	bd08      	pop	{r3, pc}

000b66d8 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b66d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66dc:	4604      	mov	r4, r0
   b66de:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b66e2:	460d      	mov	r5, r1
   b66e4:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b66e6:	4616      	mov	r6, r2
   b66e8:	b16a      	cbz	r2, b6706 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b66ea:	f7ff ff80 	bl	b65ee <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b66ee:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b66f0:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b66f4:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b66f8:	4629      	mov	r1, r5
   b66fa:	4620      	mov	r0, r4
   b66fc:	b136      	cbz	r6, b670c <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b66fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b6702:	f7ff bfc4 	b.w	b668e <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b6706:	f7ff ffe1 	bl	b66cc <_ZN8VCNL404016readCommandUpperEh>
   b670a:	e7f1      	b.n	b66f0 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b670c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b6710:	f7ff bfcd 	b.w	b66ae <_ZN8VCNL404017writeCommandUpperEhh>

000b6714 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b6714:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b6718:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b671a:	d20e      	bcs.n	b673a <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b671c:	299f      	cmp	r1, #159	; 0x9f
   b671e:	d80e      	bhi.n	b673e <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b6720:	294f      	cmp	r1, #79	; 0x4f
   b6722:	bf8c      	ite	hi
   b6724:	2340      	movhi	r3, #64	; 0x40
   b6726:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b6728:	9300      	str	r3, [sp, #0]
   b672a:	2201      	movs	r2, #1
   b672c:	233f      	movs	r3, #63	; 0x3f
   b672e:	2103      	movs	r1, #3
   b6730:	f7ff ffd2 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6734:	b003      	add	sp, #12
   b6736:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b673a:	23c0      	movs	r3, #192	; 0xc0
   b673c:	e7f4      	b.n	b6728 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b673e:	2380      	movs	r3, #128	; 0x80
   b6740:	e7f2      	b.n	b6728 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b6742 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b6742:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b6744:	2100      	movs	r1, #0
   b6746:	9100      	str	r1, [sp, #0]
   b6748:	23fe      	movs	r3, #254	; 0xfe
   b674a:	2201      	movs	r2, #1
   b674c:	f7ff ffc4 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6750:	b003      	add	sp, #12
   b6752:	f85d fb04 	ldr.w	pc, [sp], #4

000b6756 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b6756:	2907      	cmp	r1, #7
{
   b6758:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b675a:	d80f      	bhi.n	b677c <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b675c:	2903      	cmp	r1, #3
   b675e:	d80f      	bhi.n	b6780 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6760:	d010      	beq.n	b6784 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b6762:	2902      	cmp	r1, #2
   b6764:	bf0c      	ite	eq
   b6766:	2304      	moveq	r3, #4
   b6768:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b676a:	9300      	str	r3, [sp, #0]
   b676c:	2201      	movs	r2, #1
   b676e:	23f1      	movs	r3, #241	; 0xf1
   b6770:	2103      	movs	r1, #3
   b6772:	f7ff ffb1 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6776:	b003      	add	sp, #12
   b6778:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b677c:	230e      	movs	r3, #14
   b677e:	e7f4      	b.n	b676a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b6780:	230c      	movs	r3, #12
   b6782:	e7f2      	b.n	b676a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6784:	2308      	movs	r3, #8
   b6786:	e7f0      	b.n	b676a <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b6788 <_ZN8VCNL404016powerOnProximityEv>:
{
   b6788:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b678a:	2300      	movs	r3, #0
   b678c:	9300      	str	r3, [sp, #0]
   b678e:	2201      	movs	r2, #1
   b6790:	23fe      	movs	r3, #254	; 0xfe
   b6792:	2103      	movs	r1, #3
   b6794:	f7ff ffa0 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6798:	b003      	add	sp, #12
   b679a:	f85d fb04 	ldr.w	pc, [sp], #4

000b679e <_ZN8VCNL404017powerOffProximityEv>:
{
   b679e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_OFF);
   b67a0:	2201      	movs	r2, #1
   b67a2:	9200      	str	r2, [sp, #0]
   b67a4:	23fe      	movs	r3, #254	; 0xfe
   b67a6:	2103      	movs	r1, #3
   b67a8:	f7ff ff96 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b67ac:	b003      	add	sp, #12
   b67ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b67b2 <_ZN8VCNL404017setProxResolutionEh>:
{
   b67b2:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b67b4:	290f      	cmp	r1, #15
   b67b6:	bf8c      	ite	hi
   b67b8:	2308      	movhi	r3, #8
   b67ba:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b67bc:	9300      	str	r3, [sp, #0]
   b67be:	2200      	movs	r2, #0
   b67c0:	23f7      	movs	r3, #247	; 0xf7
   b67c2:	2103      	movs	r1, #3
   b67c4:	f7ff ff88 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b67c8:	b003      	add	sp, #12
   b67ca:	f85d fb04 	ldr.w	pc, [sp], #4

000b67ce <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b67ce:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b67d0:	2302      	movs	r3, #2
   b67d2:	9300      	str	r3, [sp, #0]
   b67d4:	2201      	movs	r2, #1
   b67d6:	23ef      	movs	r3, #239	; 0xef
   b67d8:	2104      	movs	r1, #4
   b67da:	f7ff ff7d 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b67de:	b003      	add	sp, #12
   b67e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b67e4 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b67e4:	29c7      	cmp	r1, #199	; 0xc7
{
   b67e6:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b67e8:	d816      	bhi.n	b6818 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b67ea:	29b3      	cmp	r1, #179	; 0xb3
   b67ec:	d816      	bhi.n	b681c <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b67ee:	299f      	cmp	r1, #159	; 0x9f
   b67f0:	d816      	bhi.n	b6820 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b67f2:	298b      	cmp	r1, #139	; 0x8b
   b67f4:	d816      	bhi.n	b6824 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b67f6:	2977      	cmp	r1, #119	; 0x77
   b67f8:	d816      	bhi.n	b6828 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b67fa:	2963      	cmp	r1, #99	; 0x63
   b67fc:	d816      	bhi.n	b682c <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b67fe:	294a      	cmp	r1, #74	; 0x4a
   b6800:	bf94      	ite	ls
   b6802:	2100      	movls	r1, #0
   b6804:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b6806:	9100      	str	r1, [sp, #0]
   b6808:	23f8      	movs	r3, #248	; 0xf8
   b680a:	2200      	movs	r2, #0
   b680c:	2104      	movs	r1, #4
   b680e:	f7ff ff63 	bl	b66d8 <_ZN8VCNL40407bitMaskEhbhh>
}
   b6812:	b003      	add	sp, #12
   b6814:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b6818:	2107      	movs	r1, #7
   b681a:	e7f4      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b681c:	2106      	movs	r1, #6
   b681e:	e7f2      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b6820:	2105      	movs	r1, #5
   b6822:	e7f0      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b6824:	2104      	movs	r1, #4
   b6826:	e7ee      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b6828:	2103      	movs	r1, #3
   b682a:	e7ec      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b682c:	2102      	movs	r1, #2
   b682e:	e7ea      	b.n	b6806 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b6830 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b6830:	b538      	push	{r3, r4, r5, lr}
   b6832:	4604      	mov	r4, r0
   b6834:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b6836:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b6838:	f000 fc42 	bl	b70c0 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b683c:	4620      	mov	r0, r4
   b683e:	f7ff fec9 	bl	b65d4 <_ZN8VCNL404011isConnectedEv>
   b6842:	4605      	mov	r5, r0
   b6844:	b910      	cbnz	r0, b684c <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b6846:	2500      	movs	r5, #0
}
   b6848:	4628      	mov	r0, r5
   b684a:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b684c:	4620      	mov	r0, r4
   b684e:	f7ff fefd 	bl	b664c <_ZN8VCNL40405getIDEv>
   b6852:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b6856:	d1f6      	bne.n	b6846 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b6858:	4620      	mov	r0, r4
   b685a:	21c8      	movs	r1, #200	; 0xc8
   b685c:	f7ff ffc2 	bl	b67e4 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b6860:	4620      	mov	r0, r4
   b6862:	2128      	movs	r1, #40	; 0x28
   b6864:	f7ff ff56 	bl	b6714 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b6868:	4620      	mov	r0, r4
   b686a:	2108      	movs	r1, #8
   b686c:	f7ff ff73 	bl	b6756 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b6870:	2110      	movs	r1, #16
   b6872:	4620      	mov	r0, r4
   b6874:	f7ff ff9d 	bl	b67b2 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b6878:	4620      	mov	r0, r4
   b687a:	f7ff ffa8 	bl	b67ce <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b687e:	4620      	mov	r0, r4
   b6880:	f7ff ff82 	bl	b6788 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b6884:	e7e0      	b.n	b6848 <_ZN8VCNL40405beginER7TwoWire+0x18>

000b6886 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6886:	f000 bb8f 	b.w	b6fa8 <delay>

000b688a <_Z11BlynkMillisv>:
   b688a:	f000 b8dd 	b.w	b6a48 <HAL_Timer_Get_Milli_Seconds>

000b688e <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b688e:	4770      	bx	lr

000b6890 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6890:	4770      	bx	lr

000b6892 <BlynkNoOpCbk>:
{}
   b6892:	4770      	bx	lr

000b6894 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6894:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6896:	bf5a      	itte	pl
   b6898:	4b02      	ldrpl	r3, [pc, #8]	; (b68a4 <GetReadHandler+0x10>)
   b689a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b689e:	2000      	movmi	r0, #0
#endif
}
   b68a0:	4770      	bx	lr
   b68a2:	bf00      	nop
   b68a4:	000b9c08 	.word	0x000b9c08

000b68a8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b68a8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b68aa:	bf5a      	itte	pl
   b68ac:	4b02      	ldrpl	r3, [pc, #8]	; (b68b8 <GetWriteHandler+0x10>)
   b68ae:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b68b2:	2000      	movmi	r0, #0
#endif
}
   b68b4:	4770      	bx	lr
   b68b6:	bf00      	nop
   b68b8:	000b9e08 	.word	0x000b9e08

000b68bc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b68bc:	b510      	push	{r4, lr}
   b68be:	4b06      	ldr	r3, [pc, #24]	; (b68d8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b68c0:	6003      	str	r3, [r0, #0]
   b68c2:	4604      	mov	r4, r0
	if (mutex) {
   b68c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b68c6:	b108      	cbz	r0, b68cc <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b68c8:	f000 f89e 	bl	b6a08 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b68cc:	4620      	mov	r0, r4
   b68ce:	f7ff f9ad 	bl	b5c2c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b68d2:	4620      	mov	r0, r4
   b68d4:	bd10      	pop	{r4, pc}
   b68d6:	bf00      	nop
   b68d8:	000ba010 	.word	0x000ba010

000b68dc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b68dc:	b510      	push	{r4, lr}
   b68de:	4604      	mov	r4, r0
}
   b68e0:	f7ff ffec 	bl	b68bc <_ZN16OledWingAdafruitD1Ev>
   b68e4:	4620      	mov	r0, r4
   b68e6:	2170      	movs	r1, #112	; 0x70
   b68e8:	f7fd fbd9 	bl	b409e <_ZdlPvj>
   b68ec:	4620      	mov	r0, r4
   b68ee:	bd10      	pop	{r4, pc}

000b68f0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b68f0:	b530      	push	{r4, r5, lr}
   b68f2:	b085      	sub	sp, #20
   b68f4:	4604      	mov	r4, r0
   b68f6:	460d      	mov	r5, r1
   b68f8:	f001 fc78 	bl	b81ec <_Z19__fetch_global_Wirev>
   b68fc:	4a10      	ldr	r2, [pc, #64]	; (b6940 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b68fe:	4911      	ldr	r1, [pc, #68]	; (b6944 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6900:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6908:	2180      	movs	r1, #128	; 0x80
   b690a:	4603      	mov	r3, r0
   b690c:	9200      	str	r2, [sp, #0]
   b690e:	4620      	mov	r0, r4
   b6910:	2220      	movs	r2, #32
   b6912:	f7ff fa03 	bl	b5d1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6916:	4b0c      	ldr	r3, [pc, #48]	; (b6948 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6918:	6023      	str	r3, [r4, #0]
   b691a:	2300      	movs	r3, #0
   b691c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6920:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6924:	f7ff fdfc 	bl	b6520 <_ZN8DebounceC1Ev>
   b6928:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b692c:	f7ff fdf8 	bl	b6520 <_ZN8DebounceC1Ev>
   b6930:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6934:	f7ff fdf4 	bl	b6520 <_ZN8DebounceC1Ev>
}
   b6938:	4620      	mov	r0, r4
   b693a:	b005      	add	sp, #20
   b693c:	bd30      	pop	{r4, r5, pc}
   b693e:	bf00      	nop
   b6940:	00061a80 	.word	0x00061a80
   b6944:	000186a0 	.word	0x000186a0
   b6948:	000ba010 	.word	0x000ba010

000b694c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b694c:	b513      	push	{r0, r1, r4, lr}
   b694e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6950:	3050      	adds	r0, #80	; 0x50
   b6952:	f000 f851 	bl	b69f8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6956:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6958:	07d9      	lsls	r1, r3, #31
   b695a:	d505      	bpl.n	b6968 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b695c:	2202      	movs	r2, #2
   b695e:	2104      	movs	r1, #4
   b6960:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6964:	f7ff fdf0 	bl	b6548 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6968:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b696a:	079a      	lsls	r2, r3, #30
   b696c:	d505      	bpl.n	b697a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b696e:	2200      	movs	r2, #0
   b6970:	2103      	movs	r1, #3
   b6972:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6976:	f7ff fde7 	bl	b6548 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b697a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b697c:	075b      	lsls	r3, r3, #29
   b697e:	d505      	bpl.n	b698c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6980:	2202      	movs	r2, #2
   b6982:	4611      	mov	r1, r2
   b6984:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6988:	f7ff fdde 	bl	b6548 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b698c:	2301      	movs	r3, #1
   b698e:	9300      	str	r3, [sp, #0]
   b6990:	223c      	movs	r2, #60	; 0x3c
   b6992:	2102      	movs	r1, #2
   b6994:	4620      	mov	r0, r4
   b6996:	f7ff fac9 	bl	b5f2c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b699a:	b002      	add	sp, #8
   b699c:	bd10      	pop	{r4, pc}

000b699e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b699e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b69a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b69a2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b69a4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b69a6:	d502      	bpl.n	b69ae <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b69a8:	3058      	adds	r0, #88	; 0x58
   b69aa:	f7ff fdda 	bl	b6562 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b69ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b69b0:	079a      	lsls	r2, r3, #30
   b69b2:	d503      	bpl.n	b69bc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b69b4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b69b8:	f7ff fdd3 	bl	b6562 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b69bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b69be:	075b      	lsls	r3, r3, #29
   b69c0:	d505      	bpl.n	b69ce <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b69c2:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b69c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b69ca:	f7ff bdca 	b.w	b6562 <_ZN8Debounce6updateEv>
}
   b69ce:	bd10      	pop	{r4, pc}

000b69d0 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b69d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b69d2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b69d4:	f013 0001 	ands.w	r0, r3, #1
   b69d8:	d003      	beq.n	b69e2 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b69da:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b69de:	f7ff bdf0 	b.w	b65c2 <_ZN8Debounce4fellEv>
}
   b69e2:	4770      	bx	lr

000b69e4 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b69e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b69e6:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b69e8:	f013 0002 	ands.w	r0, r3, #2
   b69ec:	d003      	beq.n	b69f6 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b69ee:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b69f2:	f7ff bde6 	b.w	b65c2 <_ZN8Debounce4fellEv>
}
   b69f6:	4770      	bx	lr

000b69f8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b69f8:	b508      	push	{r3, lr}
   b69fa:	4b02      	ldr	r3, [pc, #8]	; (b6a04 <os_mutex_create+0xc>)
   b69fc:	681b      	ldr	r3, [r3, #0]
   b69fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a00:	9301      	str	r3, [sp, #4]
   b6a02:	bd08      	pop	{r3, pc}
   b6a04:	00030248 	.word	0x00030248

000b6a08 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6a08:	b508      	push	{r3, lr}
   b6a0a:	4b02      	ldr	r3, [pc, #8]	; (b6a14 <os_mutex_destroy+0xc>)
   b6a0c:	681b      	ldr	r3, [r3, #0]
   b6a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a10:	9301      	str	r3, [sp, #4]
   b6a12:	bd08      	pop	{r3, pc}
   b6a14:	00030248 	.word	0x00030248

000b6a18 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6a18:	b508      	push	{r3, lr}
   b6a1a:	4b02      	ldr	r3, [pc, #8]	; (b6a24 <os_mutex_recursive_create+0xc>)
   b6a1c:	681b      	ldr	r3, [r3, #0]
   b6a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a20:	9301      	str	r3, [sp, #4]
   b6a22:	bd08      	pop	{r3, pc}
   b6a24:	00030248 	.word	0x00030248

000b6a28 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6a28:	b508      	push	{r3, lr}
   b6a2a:	4b02      	ldr	r3, [pc, #8]	; (b6a34 <HAL_RNG_GetRandomNumber+0xc>)
   b6a2c:	681b      	ldr	r3, [r3, #0]
   b6a2e:	685b      	ldr	r3, [r3, #4]
   b6a30:	9301      	str	r3, [sp, #4]
   b6a32:	bd08      	pop	{r3, pc}
   b6a34:	00030218 	.word	0x00030218

000b6a38 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6a38:	b508      	push	{r3, lr}
   b6a3a:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <HAL_Delay_Microseconds+0xc>)
   b6a3c:	681b      	ldr	r3, [r3, #0]
   b6a3e:	68db      	ldr	r3, [r3, #12]
   b6a40:	9301      	str	r3, [sp, #4]
   b6a42:	bd08      	pop	{r3, pc}
   b6a44:	00030218 	.word	0x00030218

000b6a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6a48:	b508      	push	{r3, lr}
   b6a4a:	4b02      	ldr	r3, [pc, #8]	; (b6a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6a4c:	681b      	ldr	r3, [r3, #0]
   b6a4e:	695b      	ldr	r3, [r3, #20]
   b6a50:	9301      	str	r3, [sp, #4]
   b6a52:	bd08      	pop	{r3, pc}
   b6a54:	00030218 	.word	0x00030218

000b6a58 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6a58:	b508      	push	{r3, lr}
   b6a5a:	4b02      	ldr	r3, [pc, #8]	; (b6a64 <HAL_Validate_Pin_Function+0xc>)
   b6a5c:	681b      	ldr	r3, [r3, #0]
   b6a5e:	685b      	ldr	r3, [r3, #4]
   b6a60:	9301      	str	r3, [sp, #4]
   b6a62:	bd08      	pop	{r3, pc}
   b6a64:	0003022c 	.word	0x0003022c

000b6a68 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6a68:	b508      	push	{r3, lr}
   b6a6a:	4b02      	ldr	r3, [pc, #8]	; (b6a74 <HAL_Pin_Mode+0xc>)
   b6a6c:	681b      	ldr	r3, [r3, #0]
   b6a6e:	689b      	ldr	r3, [r3, #8]
   b6a70:	9301      	str	r3, [sp, #4]
   b6a72:	bd08      	pop	{r3, pc}
   b6a74:	0003022c 	.word	0x0003022c

000b6a78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6a78:	b508      	push	{r3, lr}
   b6a7a:	4b02      	ldr	r3, [pc, #8]	; (b6a84 <HAL_Get_Pin_Mode+0xc>)
   b6a7c:	681b      	ldr	r3, [r3, #0]
   b6a7e:	68db      	ldr	r3, [r3, #12]
   b6a80:	9301      	str	r3, [sp, #4]
   b6a82:	bd08      	pop	{r3, pc}
   b6a84:	0003022c 	.word	0x0003022c

000b6a88 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6a88:	b508      	push	{r3, lr}
   b6a8a:	4b02      	ldr	r3, [pc, #8]	; (b6a94 <HAL_GPIO_Write+0xc>)
   b6a8c:	681b      	ldr	r3, [r3, #0]
   b6a8e:	691b      	ldr	r3, [r3, #16]
   b6a90:	9301      	str	r3, [sp, #4]
   b6a92:	bd08      	pop	{r3, pc}
   b6a94:	0003022c 	.word	0x0003022c

000b6a98 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6a98:	b508      	push	{r3, lr}
   b6a9a:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <HAL_GPIO_Read+0xc>)
   b6a9c:	681b      	ldr	r3, [r3, #0]
   b6a9e:	695b      	ldr	r3, [r3, #20]
   b6aa0:	9301      	str	r3, [sp, #4]
   b6aa2:	bd08      	pop	{r3, pc}
   b6aa4:	0003022c 	.word	0x0003022c

000b6aa8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6aa8:	b508      	push	{r3, lr}
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <HAL_DAC_Write+0xc>)
   b6aac:	681b      	ldr	r3, [r3, #0]
   b6aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ab0:	9301      	str	r3, [sp, #4]
   b6ab2:	bd08      	pop	{r3, pc}
   b6ab4:	0003022c 	.word	0x0003022c

000b6ab8 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6ab8:	b508      	push	{r3, lr}
   b6aba:	4b02      	ldr	r3, [pc, #8]	; (b6ac4 <hal_adc_read+0xc>)
   b6abc:	681b      	ldr	r3, [r3, #0]
   b6abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ac0:	9301      	str	r3, [sp, #4]
   b6ac2:	bd08      	pop	{r3, pc}
   b6ac4:	0003022c 	.word	0x0003022c

000b6ac8 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6ac8:	b508      	push	{r3, lr}
   b6aca:	4b02      	ldr	r3, [pc, #8]	; (b6ad4 <hal_pwm_write_ext+0xc>)
   b6acc:	681b      	ldr	r3, [r3, #0]
   b6ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6ad0:	9301      	str	r3, [sp, #4]
   b6ad2:	bd08      	pop	{r3, pc}
   b6ad4:	0003022c 	.word	0x0003022c

000b6ad8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6ad8:	b508      	push	{r3, lr}
   b6ada:	4b02      	ldr	r3, [pc, #8]	; (b6ae4 <hal_i2c_set_speed+0xc>)
   b6adc:	681b      	ldr	r3, [r3, #0]
   b6ade:	681b      	ldr	r3, [r3, #0]
   b6ae0:	9301      	str	r3, [sp, #4]
   b6ae2:	bd08      	pop	{r3, pc}
   b6ae4:	00030228 	.word	0x00030228

000b6ae8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6ae8:	b508      	push	{r3, lr}
   b6aea:	4b02      	ldr	r3, [pc, #8]	; (b6af4 <hal_i2c_begin+0xc>)
   b6aec:	681b      	ldr	r3, [r3, #0]
   b6aee:	68db      	ldr	r3, [r3, #12]
   b6af0:	9301      	str	r3, [sp, #4]
   b6af2:	bd08      	pop	{r3, pc}
   b6af4:	00030228 	.word	0x00030228

000b6af8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6af8:	b508      	push	{r3, lr}
   b6afa:	4b02      	ldr	r3, [pc, #8]	; (b6b04 <hal_i2c_begin_transmission+0xc>)
   b6afc:	681b      	ldr	r3, [r3, #0]
   b6afe:	699b      	ldr	r3, [r3, #24]
   b6b00:	9301      	str	r3, [sp, #4]
   b6b02:	bd08      	pop	{r3, pc}
   b6b04:	00030228 	.word	0x00030228

000b6b08 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6b08:	b508      	push	{r3, lr}
   b6b0a:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <hal_i2c_end_transmission+0xc>)
   b6b0c:	681b      	ldr	r3, [r3, #0]
   b6b0e:	69db      	ldr	r3, [r3, #28]
   b6b10:	9301      	str	r3, [sp, #4]
   b6b12:	bd08      	pop	{r3, pc}
   b6b14:	00030228 	.word	0x00030228

000b6b18 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6b18:	b508      	push	{r3, lr}
   b6b1a:	4b02      	ldr	r3, [pc, #8]	; (b6b24 <hal_i2c_write+0xc>)
   b6b1c:	681b      	ldr	r3, [r3, #0]
   b6b1e:	6a1b      	ldr	r3, [r3, #32]
   b6b20:	9301      	str	r3, [sp, #4]
   b6b22:	bd08      	pop	{r3, pc}
   b6b24:	00030228 	.word	0x00030228

000b6b28 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6b28:	b508      	push	{r3, lr}
   b6b2a:	4b02      	ldr	r3, [pc, #8]	; (b6b34 <hal_i2c_available+0xc>)
   b6b2c:	681b      	ldr	r3, [r3, #0]
   b6b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b30:	9301      	str	r3, [sp, #4]
   b6b32:	bd08      	pop	{r3, pc}
   b6b34:	00030228 	.word	0x00030228

000b6b38 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6b38:	b508      	push	{r3, lr}
   b6b3a:	4b02      	ldr	r3, [pc, #8]	; (b6b44 <hal_i2c_read+0xc>)
   b6b3c:	681b      	ldr	r3, [r3, #0]
   b6b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b40:	9301      	str	r3, [sp, #4]
   b6b42:	bd08      	pop	{r3, pc}
   b6b44:	00030228 	.word	0x00030228

000b6b48 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6b48:	b508      	push	{r3, lr}
   b6b4a:	4b02      	ldr	r3, [pc, #8]	; (b6b54 <hal_i2c_peek+0xc>)
   b6b4c:	681b      	ldr	r3, [r3, #0]
   b6b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b50:	9301      	str	r3, [sp, #4]
   b6b52:	bd08      	pop	{r3, pc}
   b6b54:	00030228 	.word	0x00030228

000b6b58 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6b58:	b508      	push	{r3, lr}
   b6b5a:	4b02      	ldr	r3, [pc, #8]	; (b6b64 <hal_i2c_flush+0xc>)
   b6b5c:	681b      	ldr	r3, [r3, #0]
   b6b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b60:	9301      	str	r3, [sp, #4]
   b6b62:	bd08      	pop	{r3, pc}
   b6b64:	00030228 	.word	0x00030228

000b6b68 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6b68:	b508      	push	{r3, lr}
   b6b6a:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <hal_i2c_is_enabled+0xc>)
   b6b6c:	681b      	ldr	r3, [r3, #0]
   b6b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b70:	9301      	str	r3, [sp, #4]
   b6b72:	bd08      	pop	{r3, pc}
   b6b74:	00030228 	.word	0x00030228

000b6b78 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6b78:	b508      	push	{r3, lr}
   b6b7a:	4b02      	ldr	r3, [pc, #8]	; (b6b84 <hal_i2c_init+0xc>)
   b6b7c:	681b      	ldr	r3, [r3, #0]
   b6b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b80:	9301      	str	r3, [sp, #4]
   b6b82:	bd08      	pop	{r3, pc}
   b6b84:	00030228 	.word	0x00030228

000b6b88 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6b88:	b508      	push	{r3, lr}
   b6b8a:	4b02      	ldr	r3, [pc, #8]	; (b6b94 <hal_i2c_request_ex+0xc>)
   b6b8c:	681b      	ldr	r3, [r3, #0]
   b6b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b90:	9301      	str	r3, [sp, #4]
   b6b92:	bd08      	pop	{r3, pc}
   b6b94:	00030228 	.word	0x00030228

000b6b98 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6b98:	b508      	push	{r3, lr}
   b6b9a:	4b02      	ldr	r3, [pc, #8]	; (b6ba4 <if_index_to_name+0xc>)
   b6b9c:	681b      	ldr	r3, [r3, #0]
   b6b9e:	695b      	ldr	r3, [r3, #20]
   b6ba0:	9301      	str	r3, [sp, #4]
   b6ba2:	bd08      	pop	{r3, pc}
   b6ba4:	0003026c 	.word	0x0003026c

000b6ba8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ba8:	b508      	push	{r3, lr}
   b6baa:	4b02      	ldr	r3, [pc, #8]	; (b6bb4 <inet_inet_ntop+0xc>)
   b6bac:	681b      	ldr	r3, [r3, #0]
   b6bae:	695b      	ldr	r3, [r3, #20]
   b6bb0:	9301      	str	r3, [sp, #4]
   b6bb2:	bd08      	pop	{r3, pc}
   b6bb4:	00030264 	.word	0x00030264

000b6bb8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6bb8:	b508      	push	{r3, lr}
   b6bba:	4b02      	ldr	r3, [pc, #8]	; (b6bc4 <inet_htonl+0xc>)
   b6bbc:	681b      	ldr	r3, [r3, #0]
   b6bbe:	6a1b      	ldr	r3, [r3, #32]
   b6bc0:	9301      	str	r3, [sp, #4]
   b6bc2:	bd08      	pop	{r3, pc}
   b6bc4:	00030264 	.word	0x00030264

000b6bc8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6bc8:	b508      	push	{r3, lr}
   b6bca:	4b02      	ldr	r3, [pc, #8]	; (b6bd4 <inet_htons+0xc>)
   b6bcc:	681b      	ldr	r3, [r3, #0]
   b6bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bd0:	9301      	str	r3, [sp, #4]
   b6bd2:	bd08      	pop	{r3, pc}
   b6bd4:	00030264 	.word	0x00030264

000b6bd8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6bd8:	b508      	push	{r3, lr}
   b6bda:	4b02      	ldr	r3, [pc, #8]	; (b6be4 <netdb_freeaddrinfo+0xc>)
   b6bdc:	681b      	ldr	r3, [r3, #0]
   b6bde:	689b      	ldr	r3, [r3, #8]
   b6be0:	9301      	str	r3, [sp, #4]
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	00030268 	.word	0x00030268

000b6be8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6be8:	b508      	push	{r3, lr}
   b6bea:	4b02      	ldr	r3, [pc, #8]	; (b6bf4 <netdb_getaddrinfo+0xc>)
   b6bec:	681b      	ldr	r3, [r3, #0]
   b6bee:	68db      	ldr	r3, [r3, #12]
   b6bf0:	9301      	str	r3, [sp, #4]
   b6bf2:	bd08      	pop	{r3, pc}
   b6bf4:	00030268 	.word	0x00030268

000b6bf8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6bf8:	b508      	push	{r3, lr}
   b6bfa:	4b02      	ldr	r3, [pc, #8]	; (b6c04 <sock_setsockopt+0xc>)
   b6bfc:	681b      	ldr	r3, [r3, #0]
   b6bfe:	699b      	ldr	r3, [r3, #24]
   b6c00:	9301      	str	r3, [sp, #4]
   b6c02:	bd08      	pop	{r3, pc}
   b6c04:	00030238 	.word	0x00030238

000b6c08 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <sock_close+0xc>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	69db      	ldr	r3, [r3, #28]
   b6c10:	9301      	str	r3, [sp, #4]
   b6c12:	bd08      	pop	{r3, pc}
   b6c14:	00030238 	.word	0x00030238

000b6c18 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6c18:	b508      	push	{r3, lr}
   b6c1a:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <sock_connect+0xc>)
   b6c1c:	681b      	ldr	r3, [r3, #0]
   b6c1e:	6a1b      	ldr	r3, [r3, #32]
   b6c20:	9301      	str	r3, [sp, #4]
   b6c22:	bd08      	pop	{r3, pc}
   b6c24:	00030238 	.word	0x00030238

000b6c28 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6c28:	b508      	push	{r3, lr}
   b6c2a:	4b02      	ldr	r3, [pc, #8]	; (b6c34 <sock_recv+0xc>)
   b6c2c:	681b      	ldr	r3, [r3, #0]
   b6c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c30:	9301      	str	r3, [sp, #4]
   b6c32:	bd08      	pop	{r3, pc}
   b6c34:	00030238 	.word	0x00030238

000b6c38 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6c38:	b508      	push	{r3, lr}
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <sock_send+0xc>)
   b6c3c:	681b      	ldr	r3, [r3, #0]
   b6c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	bd08      	pop	{r3, pc}
   b6c44:	00030238 	.word	0x00030238

000b6c48 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <sock_socket+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	00030238 	.word	0x00030238

000b6c58 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <hal_spi_begin+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	681b      	ldr	r3, [r3, #0]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	00030230 	.word	0x00030230

000b6c68 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <hal_spi_transfer+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	695b      	ldr	r3, [r3, #20]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	00030230 	.word	0x00030230

000b6c78 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <hal_spi_init+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	69db      	ldr	r3, [r3, #28]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	00030230 	.word	0x00030230

000b6c88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b02      	ldr	r3, [pc, #8]	; (b6c94 <hal_spi_is_enabled+0xc>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	6a1b      	ldr	r3, [r3, #32]
   b6c90:	9301      	str	r3, [sp, #4]
   b6c92:	bd08      	pop	{r3, pc}
   b6c94:	00030230 	.word	0x00030230

000b6c98 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b02      	ldr	r3, [pc, #8]	; (b6ca4 <hal_spi_info+0xc>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ca0:	9301      	str	r3, [sp, #4]
   b6ca2:	bd08      	pop	{r3, pc}
   b6ca4:	00030230 	.word	0x00030230

000b6ca8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6ca8:	b508      	push	{r3, lr}
   b6caa:	4b02      	ldr	r3, [pc, #8]	; (b6cb4 <hal_spi_set_settings+0xc>)
   b6cac:	681b      	ldr	r3, [r3, #0]
   b6cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6cb0:	9301      	str	r3, [sp, #4]
   b6cb2:	bd08      	pop	{r3, pc}
   b6cb4:	00030230 	.word	0x00030230

000b6cb8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b02      	ldr	r3, [pc, #8]	; (b6cc4 <hal_spi_acquire+0xc>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	bd08      	pop	{r3, pc}
   b6cc4:	00030230 	.word	0x00030230

000b6cc8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6cc8:	b508      	push	{r3, lr}
   b6cca:	4b02      	ldr	r3, [pc, #8]	; (b6cd4 <hal_spi_release+0xc>)
   b6ccc:	681b      	ldr	r3, [r3, #0]
   b6cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6cd0:	9301      	str	r3, [sp, #4]
   b6cd2:	bd08      	pop	{r3, pc}
   b6cd4:	00030230 	.word	0x00030230

000b6cd8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6cd8:	b508      	push	{r3, lr}
   b6cda:	4b02      	ldr	r3, [pc, #8]	; (b6ce4 <hal_usart_write+0xc>)
   b6cdc:	681b      	ldr	r3, [r3, #0]
   b6cde:	68db      	ldr	r3, [r3, #12]
   b6ce0:	9301      	str	r3, [sp, #4]
   b6ce2:	bd08      	pop	{r3, pc}
   b6ce4:	0003023c 	.word	0x0003023c

000b6ce8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b02      	ldr	r3, [pc, #8]	; (b6cf4 <hal_usart_available+0xc>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	691b      	ldr	r3, [r3, #16]
   b6cf0:	9301      	str	r3, [sp, #4]
   b6cf2:	bd08      	pop	{r3, pc}
   b6cf4:	0003023c 	.word	0x0003023c

000b6cf8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <hal_usart_read+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	695b      	ldr	r3, [r3, #20]
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	0003023c 	.word	0x0003023c

000b6d08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <hal_usart_peek+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	699b      	ldr	r3, [r3, #24]
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	0003023c 	.word	0x0003023c

000b6d18 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <hal_usart_flush+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	69db      	ldr	r3, [r3, #28]
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	0003023c 	.word	0x0003023c

000b6d28 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <hal_usart_is_enabled+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	6a1b      	ldr	r3, [r3, #32]
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	0003023c 	.word	0x0003023c

000b6d38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <hal_usart_available_data_for_write+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	0003023c 	.word	0x0003023c

000b6d48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <hal_usart_init_ex+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	0003023c 	.word	0x0003023c

000b6d58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <HAL_USB_USART_Init+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	681b      	ldr	r3, [r3, #0]
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	0003024c 	.word	0x0003024c

000b6d68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <HAL_USB_USART_Begin+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	685b      	ldr	r3, [r3, #4]
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	0003024c 	.word	0x0003024c

000b6d78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <HAL_USB_USART_Available_Data+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	691b      	ldr	r3, [r3, #16]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	0003024c 	.word	0x0003024c

000b6d88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	695b      	ldr	r3, [r3, #20]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	0003024c 	.word	0x0003024c

000b6d98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <HAL_USB_USART_Receive_Data+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	699b      	ldr	r3, [r3, #24]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	0003024c 	.word	0x0003024c

000b6da8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <HAL_USB_USART_Send_Data+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	69db      	ldr	r3, [r3, #28]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	0003024c 	.word	0x0003024c

000b6db8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <HAL_USB_USART_Flush_Data+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	6a1b      	ldr	r3, [r3, #32]
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	0003024c 	.word	0x0003024c

000b6dc8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <panic_+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	00030260 	.word	0x00030260

000b6dd8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <log_message+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	00030260 	.word	0x00030260

000b6de8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <set_system_mode+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	685b      	ldr	r3, [r3, #4]
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030220 	.word	0x00030220

000b6df8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <system_delay_ms+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	695b      	ldr	r3, [r3, #20]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030220 	.word	0x00030220

000b6e08 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <system_thread_set_state+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030220 	.word	0x00030220

000b6e18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b03      	ldr	r3, [pc, #12]	; (b6e28 <system_ctrl_set_app_request_handler+0x10>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6e22:	9301      	str	r3, [sp, #4]
   b6e24:	bd08      	pop	{r3, pc}
   b6e26:	0000      	.short	0x0000
   b6e28:	00030220 	.word	0x00030220

000b6e2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b03      	ldr	r3, [pc, #12]	; (b6e3c <system_ctrl_set_result+0x10>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6e36:	9301      	str	r3, [sp, #4]
   b6e38:	bd08      	pop	{r3, pc}
   b6e3a:	0000      	.short	0x0000
   b6e3c:	00030220 	.word	0x00030220

000b6e40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6e40:	b508      	push	{r3, lr}
   b6e42:	4b02      	ldr	r3, [pc, #8]	; (b6e4c <spark_process+0xc>)
   b6e44:	681b      	ldr	r3, [r3, #0]
   b6e46:	689b      	ldr	r3, [r3, #8]
   b6e48:	9301      	str	r3, [sp, #4]
   b6e4a:	bd08      	pop	{r3, pc}
   b6e4c:	00030244 	.word	0x00030244

000b6e50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6e50:	b508      	push	{r3, lr}
   b6e52:	4b02      	ldr	r3, [pc, #8]	; (b6e5c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6e54:	681b      	ldr	r3, [r3, #0]
   b6e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e58:	9301      	str	r3, [sp, #4]
   b6e5a:	bd08      	pop	{r3, pc}
   b6e5c:	00030244 	.word	0x00030244

000b6e60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6e60:	b508      	push	{r3, lr}
   b6e62:	4b02      	ldr	r3, [pc, #8]	; (b6e6c <network_connect+0xc>)
   b6e64:	681b      	ldr	r3, [r3, #0]
   b6e66:	685b      	ldr	r3, [r3, #4]
   b6e68:	9301      	str	r3, [sp, #4]
   b6e6a:	bd08      	pop	{r3, pc}
   b6e6c:	00030240 	.word	0x00030240

000b6e70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6e70:	b508      	push	{r3, lr}
   b6e72:	4b02      	ldr	r3, [pc, #8]	; (b6e7c <network_connecting+0xc>)
   b6e74:	681b      	ldr	r3, [r3, #0]
   b6e76:	689b      	ldr	r3, [r3, #8]
   b6e78:	9301      	str	r3, [sp, #4]
   b6e7a:	bd08      	pop	{r3, pc}
   b6e7c:	00030240 	.word	0x00030240

000b6e80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b02      	ldr	r3, [pc, #8]	; (b6e8c <network_disconnect+0xc>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	68db      	ldr	r3, [r3, #12]
   b6e88:	9301      	str	r3, [sp, #4]
   b6e8a:	bd08      	pop	{r3, pc}
   b6e8c:	00030240 	.word	0x00030240

000b6e90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6e90:	b508      	push	{r3, lr}
   b6e92:	4b02      	ldr	r3, [pc, #8]	; (b6e9c <network_ready+0xc>)
   b6e94:	681b      	ldr	r3, [r3, #0]
   b6e96:	691b      	ldr	r3, [r3, #16]
   b6e98:	9301      	str	r3, [sp, #4]
   b6e9a:	bd08      	pop	{r3, pc}
   b6e9c:	00030240 	.word	0x00030240

000b6ea0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ea0:	b508      	push	{r3, lr}
   b6ea2:	4b02      	ldr	r3, [pc, #8]	; (b6eac <network_on+0xc>)
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	695b      	ldr	r3, [r3, #20]
   b6ea8:	9301      	str	r3, [sp, #4]
   b6eaa:	bd08      	pop	{r3, pc}
   b6eac:	00030240 	.word	0x00030240

000b6eb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6eb0:	b508      	push	{r3, lr}
   b6eb2:	4b02      	ldr	r3, [pc, #8]	; (b6ebc <network_off+0xc>)
   b6eb4:	681b      	ldr	r3, [r3, #0]
   b6eb6:	699b      	ldr	r3, [r3, #24]
   b6eb8:	9301      	str	r3, [sp, #4]
   b6eba:	bd08      	pop	{r3, pc}
   b6ebc:	00030240 	.word	0x00030240

000b6ec0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6ec0:	b508      	push	{r3, lr}
   b6ec2:	4b02      	ldr	r3, [pc, #8]	; (b6ecc <network_listen+0xc>)
   b6ec4:	681b      	ldr	r3, [r3, #0]
   b6ec6:	69db      	ldr	r3, [r3, #28]
   b6ec8:	9301      	str	r3, [sp, #4]
   b6eca:	bd08      	pop	{r3, pc}
   b6ecc:	00030240 	.word	0x00030240

000b6ed0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ed0:	b508      	push	{r3, lr}
   b6ed2:	4b02      	ldr	r3, [pc, #8]	; (b6edc <network_listening+0xc>)
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	6a1b      	ldr	r3, [r3, #32]
   b6ed8:	9301      	str	r3, [sp, #4]
   b6eda:	bd08      	pop	{r3, pc}
   b6edc:	00030240 	.word	0x00030240

000b6ee0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6ee0:	b508      	push	{r3, lr}
   b6ee2:	4b02      	ldr	r3, [pc, #8]	; (b6eec <network_set_listen_timeout+0xc>)
   b6ee4:	681b      	ldr	r3, [r3, #0]
   b6ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ee8:	9301      	str	r3, [sp, #4]
   b6eea:	bd08      	pop	{r3, pc}
   b6eec:	00030240 	.word	0x00030240

000b6ef0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6ef0:	b508      	push	{r3, lr}
   b6ef2:	4b02      	ldr	r3, [pc, #8]	; (b6efc <network_get_listen_timeout+0xc>)
   b6ef4:	681b      	ldr	r3, [r3, #0]
   b6ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ef8:	9301      	str	r3, [sp, #4]
   b6efa:	bd08      	pop	{r3, pc}
   b6efc:	00030240 	.word	0x00030240

000b6f00 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6f00:	b508      	push	{r3, lr}
   b6f02:	4b02      	ldr	r3, [pc, #8]	; (b6f0c <network_is_on+0xc>)
   b6f04:	681b      	ldr	r3, [r3, #0]
   b6f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f08:	9301      	str	r3, [sp, #4]
   b6f0a:	bd08      	pop	{r3, pc}
   b6f0c:	00030240 	.word	0x00030240

000b6f10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6f10:	b508      	push	{r3, lr}
   b6f12:	4b02      	ldr	r3, [pc, #8]	; (b6f1c <network_is_off+0xc>)
   b6f14:	681b      	ldr	r3, [r3, #0]
   b6f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f18:	9301      	str	r3, [sp, #4]
   b6f1a:	bd08      	pop	{r3, pc}
   b6f1c:	00030240 	.word	0x00030240

000b6f20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6f20:	b508      	push	{r3, lr}
   b6f22:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <malloc+0xc>)
   b6f24:	681b      	ldr	r3, [r3, #0]
   b6f26:	681b      	ldr	r3, [r3, #0]
   b6f28:	9301      	str	r3, [sp, #4]
   b6f2a:	bd08      	pop	{r3, pc}
   b6f2c:	0003021c 	.word	0x0003021c

000b6f30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6f30:	b508      	push	{r3, lr}
   b6f32:	4b02      	ldr	r3, [pc, #8]	; (b6f3c <free+0xc>)
   b6f34:	681b      	ldr	r3, [r3, #0]
   b6f36:	685b      	ldr	r3, [r3, #4]
   b6f38:	9301      	str	r3, [sp, #4]
   b6f3a:	bd08      	pop	{r3, pc}
   b6f3c:	0003021c 	.word	0x0003021c

000b6f40 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6f40:	b508      	push	{r3, lr}
   b6f42:	4b02      	ldr	r3, [pc, #8]	; (b6f4c <snprintf+0xc>)
   b6f44:	681b      	ldr	r3, [r3, #0]
   b6f46:	69db      	ldr	r3, [r3, #28]
   b6f48:	9301      	str	r3, [sp, #4]
   b6f4a:	bd08      	pop	{r3, pc}
   b6f4c:	0003021c 	.word	0x0003021c

000b6f50 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b02      	ldr	r3, [pc, #8]	; (b6f5c <vsnprintf+0xc>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f58:	9301      	str	r3, [sp, #4]
   b6f5a:	bd08      	pop	{r3, pc}
   b6f5c:	0003021c 	.word	0x0003021c

000b6f60 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6f60:	b508      	push	{r3, lr}
   b6f62:	4b02      	ldr	r3, [pc, #8]	; (b6f6c <__errno+0xc>)
   b6f64:	681b      	ldr	r3, [r3, #0]
   b6f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6f68:	9301      	str	r3, [sp, #4]
   b6f6a:	bd08      	pop	{r3, pc}
   b6f6c:	0003021c 	.word	0x0003021c

000b6f70 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6f70:	b508      	push	{r3, lr}
   b6f72:	4b02      	ldr	r3, [pc, #8]	; (b6f7c <__assert_func+0xc>)
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f78:	9301      	str	r3, [sp, #4]
   b6f7a:	bd08      	pop	{r3, pc}
   b6f7c:	0003021c 	.word	0x0003021c

000b6f80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6f80:	b508      	push	{r3, lr}
   b6f82:	4b02      	ldr	r3, [pc, #8]	; (b6f8c <newlib_impure_ptr_callback+0xc>)
   b6f84:	681b      	ldr	r3, [r3, #0]
   b6f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f88:	9301      	str	r3, [sp, #4]
   b6f8a:	bd08      	pop	{r3, pc}
   b6f8c:	0003021c 	.word	0x0003021c

000b6f90 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6f90:	428a      	cmp	r2, r1
{
   b6f92:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6f94:	d007      	beq.n	b6fa6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b6f96:	1a44      	subs	r4, r0, r1
   b6f98:	9802      	ldr	r0, [sp, #8]
   b6f9a:	1ac0      	subs	r0, r0, r3
   b6f9c:	4344      	muls	r4, r0
   b6f9e:	1a50      	subs	r0, r2, r1
   b6fa0:	fb94 f0f0 	sdiv	r0, r4, r0
   b6fa4:	4418      	add	r0, r3
}
   b6fa6:	bd10      	pop	{r4, pc}

000b6fa8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6fa8:	2100      	movs	r1, #0
   b6faa:	f7ff bf25 	b.w	b6df8 <system_delay_ms>
	...

000b6fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6fb0:	4802      	ldr	r0, [pc, #8]	; (b6fbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6fb2:	2300      	movs	r3, #0
   b6fb4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6fb6:	f7ff bd2f 	b.w	b6a18 <os_mutex_recursive_create>
   b6fba:	bf00      	nop
   b6fbc:	2003e6c4 	.word	0x2003e6c4

000b6fc0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6fc0:	2200      	movs	r2, #0
   b6fc2:	6840      	ldr	r0, [r0, #4]
   b6fc4:	4611      	mov	r1, r2
   b6fc6:	f7ff bf83 	b.w	b6ed0 <network_listening>

000b6fca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6fca:	2200      	movs	r2, #0
   b6fcc:	6840      	ldr	r0, [r0, #4]
   b6fce:	4611      	mov	r1, r2
   b6fd0:	f7ff bf8e 	b.w	b6ef0 <network_get_listen_timeout>

000b6fd4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6fd4:	6840      	ldr	r0, [r0, #4]
   b6fd6:	2200      	movs	r2, #0
   b6fd8:	f7ff bf82 	b.w	b6ee0 <network_set_listen_timeout>

000b6fdc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6fdc:	6840      	ldr	r0, [r0, #4]
   b6fde:	2200      	movs	r2, #0
   b6fe0:	f081 0101 	eor.w	r1, r1, #1
   b6fe4:	f7ff bf6c 	b.w	b6ec0 <network_listen>

000b6fe8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6fe8:	2300      	movs	r3, #0
   b6fea:	6840      	ldr	r0, [r0, #4]
   b6fec:	461a      	mov	r2, r3
   b6fee:	4619      	mov	r1, r3
   b6ff0:	f7ff bf5e 	b.w	b6eb0 <network_off>

000b6ff4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ff4:	2300      	movs	r3, #0
   b6ff6:	6840      	ldr	r0, [r0, #4]
   b6ff8:	461a      	mov	r2, r3
   b6ffa:	4619      	mov	r1, r3
   b6ffc:	f7ff bf50 	b.w	b6ea0 <network_on>

000b7000 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7000:	2200      	movs	r2, #0
   b7002:	6840      	ldr	r0, [r0, #4]
   b7004:	4611      	mov	r1, r2
   b7006:	f7ff bf43 	b.w	b6e90 <network_ready>

000b700a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b700a:	2200      	movs	r2, #0
   b700c:	6840      	ldr	r0, [r0, #4]
   b700e:	4611      	mov	r1, r2
   b7010:	f7ff bf2e 	b.w	b6e70 <network_connecting>

000b7014 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7014:	6840      	ldr	r0, [r0, #4]
   b7016:	2200      	movs	r2, #0
   b7018:	2102      	movs	r1, #2
   b701a:	f7ff bf31 	b.w	b6e80 <network_disconnect>

000b701e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b701e:	2300      	movs	r3, #0
   b7020:	6840      	ldr	r0, [r0, #4]
   b7022:	461a      	mov	r2, r3
   b7024:	f7ff bf1c 	b.w	b6e60 <network_connect>

000b7028 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7028:	4b02      	ldr	r3, [pc, #8]	; (b7034 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b702a:	2203      	movs	r2, #3
   b702c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b702e:	4a02      	ldr	r2, [pc, #8]	; (b7038 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7030:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7032:	4770      	bx	lr
   b7034:	2003e6c8 	.word	0x2003e6c8
   b7038:	000ba070 	.word	0x000ba070

000b703c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b703c:	4770      	bx	lr

000b703e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b703e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7040:	4606      	mov	r6, r0
   b7042:	4615      	mov	r5, r2
   b7044:	460c      	mov	r4, r1
   b7046:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7048:	42bc      	cmp	r4, r7
   b704a:	d006      	beq.n	b705a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b704c:	6833      	ldr	r3, [r6, #0]
   b704e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7052:	689b      	ldr	r3, [r3, #8]
   b7054:	4630      	mov	r0, r6
   b7056:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7058:	e7f6      	b.n	b7048 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b705a:	4628      	mov	r0, r5
   b705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b705e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b705e:	7c00      	ldrb	r0, [r0, #16]
   b7060:	2200      	movs	r2, #0
   b7062:	f7ff bd59 	b.w	b6b18 <hal_i2c_write>

000b7066 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7066:	7c00      	ldrb	r0, [r0, #16]
   b7068:	2100      	movs	r1, #0
   b706a:	f7ff bd5d 	b.w	b6b28 <hal_i2c_available>

000b706e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b706e:	7c00      	ldrb	r0, [r0, #16]
   b7070:	2100      	movs	r1, #0
   b7072:	f7ff bd61 	b.w	b6b38 <hal_i2c_read>

000b7076 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7076:	7c00      	ldrb	r0, [r0, #16]
   b7078:	2100      	movs	r1, #0
   b707a:	f7ff bd65 	b.w	b6b48 <hal_i2c_peek>

000b707e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b707e:	7c00      	ldrb	r0, [r0, #16]
   b7080:	2100      	movs	r1, #0
   b7082:	f7ff bd69 	b.w	b6b58 <hal_i2c_flush>

000b7086 <_ZN7TwoWireD0Ev>:
   b7086:	b510      	push	{r4, lr}
   b7088:	2114      	movs	r1, #20
   b708a:	4604      	mov	r4, r0
   b708c:	f7fd f807 	bl	b409e <_ZdlPvj>
   b7090:	4620      	mov	r0, r4
   b7092:	bd10      	pop	{r4, pc}

000b7094 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7094:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b709a:	4604      	mov	r4, r0
   b709c:	4608      	mov	r0, r1
   b709e:	2100      	movs	r1, #0
   b70a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b70a4:	4b03      	ldr	r3, [pc, #12]	; (b70b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b70a6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b70a8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b70aa:	4611      	mov	r1, r2
   b70ac:	f7ff fd64 	bl	b6b78 <hal_i2c_init>
}
   b70b0:	4620      	mov	r0, r4
   b70b2:	bd10      	pop	{r4, pc}
   b70b4:	000ba0ac 	.word	0x000ba0ac

000b70b8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b70b8:	7c00      	ldrb	r0, [r0, #16]
   b70ba:	2200      	movs	r2, #0
   b70bc:	f7ff bd0c 	b.w	b6ad8 <hal_i2c_set_speed>

000b70c0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b70c0:	2300      	movs	r3, #0
   b70c2:	7c00      	ldrb	r0, [r0, #16]
   b70c4:	461a      	mov	r2, r3
   b70c6:	4619      	mov	r1, r3
   b70c8:	f7ff bd0e 	b.w	b6ae8 <hal_i2c_begin>

000b70cc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b70cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b70ce:	2200      	movs	r2, #0
   b70d0:	2314      	movs	r3, #20
   b70d2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b70d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b70da:	780b      	ldrb	r3, [r1, #0]
   b70dc:	f88d 3008 	strb.w	r3, [sp, #8]
   b70e0:	684b      	ldr	r3, [r1, #4]
   b70e2:	9303      	str	r3, [sp, #12]
   b70e4:	68cb      	ldr	r3, [r1, #12]
   b70e6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b70e8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b70ea:	7a0b      	ldrb	r3, [r1, #8]
   b70ec:	9305      	str	r3, [sp, #20]
   b70ee:	a901      	add	r1, sp, #4
   b70f0:	f7ff fd4a 	bl	b6b88 <hal_i2c_request_ex>
}
   b70f4:	b007      	add	sp, #28
   b70f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b70fa <_ZN7TwoWire11requestFromEhjh>:
{
   b70fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b70fc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b70fe:	f88d 1000 	strb.w	r1, [sp]
   b7102:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7106:	9103      	str	r1, [sp, #12]
   b7108:	bf18      	it	ne
   b710a:	2301      	movne	r3, #1
   b710c:	4669      	mov	r1, sp
    size_ = size;
   b710e:	9201      	str	r2, [sp, #4]
   b7110:	f88d 3008 	strb.w	r3, [sp, #8]
   b7114:	f7ff ffda 	bl	b70cc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7118:	b005      	add	sp, #20
   b711a:	f85d fb04 	ldr.w	pc, [sp], #4

000b711e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b711e:	2301      	movs	r3, #1
   b7120:	f7ff bfeb 	b.w	b70fa <_ZN7TwoWire11requestFromEhjh>

000b7124 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7124:	7c00      	ldrb	r0, [r0, #16]
   b7126:	2200      	movs	r2, #0
   b7128:	f7ff bce6 	b.w	b6af8 <hal_i2c_begin_transmission>

000b712c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b712c:	b2c9      	uxtb	r1, r1
   b712e:	f7ff bff9 	b.w	b7124 <_ZN7TwoWire17beginTransmissionEh>

000b7132 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7132:	7c00      	ldrb	r0, [r0, #16]
   b7134:	2200      	movs	r2, #0
   b7136:	f7ff bce7 	b.w	b6b08 <hal_i2c_end_transmission>

000b713a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b713a:	2101      	movs	r1, #1
   b713c:	f7ff bff9 	b.w	b7132 <_ZN7TwoWire15endTransmissionEh>

000b7140 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7140:	4770      	bx	lr

000b7142 <_ZN9IPAddressD0Ev>:
   b7142:	b510      	push	{r4, lr}
   b7144:	2118      	movs	r1, #24
   b7146:	4604      	mov	r4, r0
   b7148:	f7fc ffa9 	bl	b409e <_ZdlPvj>
   b714c:	4620      	mov	r0, r4
   b714e:	bd10      	pop	{r4, pc}

000b7150 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7150:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7152:	7d03      	ldrb	r3, [r0, #20]
   b7154:	2b06      	cmp	r3, #6
{
   b7156:	b08d      	sub	sp, #52	; 0x34
   b7158:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b715a:	f100 0704 	add.w	r7, r0, #4
   b715e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7162:	d012      	beq.n	b718a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7164:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b716c:	220a      	movs	r2, #10
   b716e:	4630      	mov	r0, r6
   b7170:	f000 f97f 	bl	b7472 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7174:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7176:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7178:	d019      	beq.n	b71ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b717a:	2c00      	cmp	r4, #0
   b717c:	d0f4      	beq.n	b7168 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b717e:	212e      	movs	r1, #46	; 0x2e
   b7180:	4630      	mov	r0, r6
   b7182:	f000 f95d 	bl	b7440 <_ZN5Print5printEc>
   b7186:	4404      	add	r4, r0
   b7188:	e7ee      	b.n	b7168 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b718a:	232f      	movs	r3, #47	; 0x2f
   b718c:	466a      	mov	r2, sp
   b718e:	4639      	mov	r1, r7
   b7190:	200a      	movs	r0, #10
		buf[0] = 0;
   b7192:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7196:	f7ff fd07 	bl	b6ba8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b719a:	4668      	mov	r0, sp
   b719c:	f001 fe40 	bl	b8e20 <strlen>
   b71a0:	6833      	ldr	r3, [r6, #0]
   b71a2:	4602      	mov	r2, r0
   b71a4:	68db      	ldr	r3, [r3, #12]
   b71a6:	4669      	mov	r1, sp
   b71a8:	4630      	mov	r0, r6
   b71aa:	4798      	blx	r3
   b71ac:	4604      	mov	r4, r0
    }
    return n;
}
   b71ae:	4620      	mov	r0, r4
   b71b0:	b00d      	add	sp, #52	; 0x34
   b71b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b71b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b71b4:	b510      	push	{r4, lr}
   b71b6:	4b05      	ldr	r3, [pc, #20]	; (b71cc <_ZN9IPAddressC1Ev+0x18>)
   b71b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b71ba:	2211      	movs	r2, #17
   b71bc:	f840 3b04 	str.w	r3, [r0], #4
   b71c0:	2100      	movs	r1, #0
   b71c2:	f001 fded 	bl	b8da0 <memset>
}
   b71c6:	4620      	mov	r0, r4
   b71c8:	bd10      	pop	{r4, pc}
   b71ca:	bf00      	nop
   b71cc:	000ba0d4 	.word	0x000ba0d4

000b71d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b71d0:	4603      	mov	r3, r0
   b71d2:	4a07      	ldr	r2, [pc, #28]	; (b71f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b71d4:	b510      	push	{r4, lr}
   b71d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b71da:	f101 0210 	add.w	r2, r1, #16
   b71de:	f851 4b04 	ldr.w	r4, [r1], #4
   b71e2:	f843 4b04 	str.w	r4, [r3], #4
   b71e6:	4291      	cmp	r1, r2
   b71e8:	d1f9      	bne.n	b71de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b71ea:	780a      	ldrb	r2, [r1, #0]
   b71ec:	701a      	strb	r2, [r3, #0]
}
   b71ee:	bd10      	pop	{r4, pc}
   b71f0:	000ba0d4 	.word	0x000ba0d4

000b71f4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b71f4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b71f6:	2b04      	cmp	r3, #4
   b71f8:	d104      	bne.n	b7204 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b71fa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b71fc:	3800      	subs	r0, #0
   b71fe:	bf18      	it	ne
   b7200:	2001      	movne	r0, #1
   b7202:	4770      	bx	lr
    } else if (version() == 6) {
   b7204:	2b06      	cmp	r3, #6
   b7206:	d107      	bne.n	b7218 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7208:	6843      	ldr	r3, [r0, #4]
   b720a:	b93b      	cbnz	r3, b721c <_ZNK9IPAddresscvbEv+0x28>
   b720c:	6883      	ldr	r3, [r0, #8]
   b720e:	b92b      	cbnz	r3, b721c <_ZNK9IPAddresscvbEv+0x28>
   b7210:	68c3      	ldr	r3, [r0, #12]
   b7212:	b91b      	cbnz	r3, b721c <_ZNK9IPAddresscvbEv+0x28>
   b7214:	6900      	ldr	r0, [r0, #16]
   b7216:	e7f1      	b.n	b71fc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7218:	2000      	movs	r0, #0
   b721a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b721c:	2001      	movs	r0, #1
}
   b721e:	4770      	bx	lr

000b7220 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7220:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7222:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7226:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b722a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b722e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7232:	2304      	movs	r3, #4
   b7234:	6041      	str	r1, [r0, #4]
   b7236:	7503      	strb	r3, [r0, #20]
}
   b7238:	bd10      	pop	{r4, pc}
	...

000b723c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b723c:	b513      	push	{r0, r1, r4, lr}
   b723e:	4c04      	ldr	r4, [pc, #16]	; (b7250 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7240:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7242:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7246:	9400      	str	r4, [sp, #0]
   b7248:	f7ff ffea 	bl	b7220 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b724c:	b002      	add	sp, #8
   b724e:	bd10      	pop	{r4, pc}
   b7250:	000ba0d4 	.word	0x000ba0d4

000b7254 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7254:	b507      	push	{r0, r1, r2, lr}
   b7256:	4b06      	ldr	r3, [pc, #24]	; (b7270 <_ZN9IPAddressC1EPKh+0x1c>)
   b7258:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b725a:	78cb      	ldrb	r3, [r1, #3]
   b725c:	9300      	str	r3, [sp, #0]
   b725e:	788b      	ldrb	r3, [r1, #2]
   b7260:	784a      	ldrb	r2, [r1, #1]
   b7262:	7809      	ldrb	r1, [r1, #0]
   b7264:	f7ff ffdc 	bl	b7220 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7268:	b003      	add	sp, #12
   b726a:	f85d fb04 	ldr.w	pc, [sp], #4
   b726e:	bf00      	nop
   b7270:	000ba0d4 	.word	0x000ba0d4

000b7274 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7274:	4b01      	ldr	r3, [pc, #4]	; (b727c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7276:	4a02      	ldr	r2, [pc, #8]	; (b7280 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7278:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b727a:	4770      	bx	lr
   b727c:	2003e6d0 	.word	0x2003e6d0
   b7280:	000ba0e0 	.word	0x000ba0e0

000b7284 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7284:	2300      	movs	r3, #0
   b7286:	6840      	ldr	r0, [r0, #4]
   b7288:	461a      	mov	r2, r3
   b728a:	f7ff bde9 	b.w	b6e60 <network_connect>

000b728e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b728e:	6840      	ldr	r0, [r0, #4]
   b7290:	2200      	movs	r2, #0
   b7292:	2102      	movs	r1, #2
   b7294:	f7ff bdf4 	b.w	b6e80 <network_disconnect>

000b7298 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7298:	2200      	movs	r2, #0
   b729a:	6840      	ldr	r0, [r0, #4]
   b729c:	4611      	mov	r1, r2
   b729e:	f7ff bde7 	b.w	b6e70 <network_connecting>

000b72a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b72a2:	2200      	movs	r2, #0
   b72a4:	6840      	ldr	r0, [r0, #4]
   b72a6:	4611      	mov	r1, r2
   b72a8:	f7ff bdf2 	b.w	b6e90 <network_ready>

000b72ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b72ac:	2300      	movs	r3, #0
   b72ae:	6840      	ldr	r0, [r0, #4]
   b72b0:	461a      	mov	r2, r3
   b72b2:	4619      	mov	r1, r3
   b72b4:	f7ff bdf4 	b.w	b6ea0 <network_on>

000b72b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b72b8:	2300      	movs	r3, #0
   b72ba:	6840      	ldr	r0, [r0, #4]
   b72bc:	461a      	mov	r2, r3
   b72be:	4619      	mov	r1, r3
   b72c0:	f7ff bdf6 	b.w	b6eb0 <network_off>

000b72c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b72c4:	6840      	ldr	r0, [r0, #4]
   b72c6:	2100      	movs	r1, #0
   b72c8:	f7ff be1a 	b.w	b6f00 <network_is_on>

000b72cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b72cc:	6840      	ldr	r0, [r0, #4]
   b72ce:	2100      	movs	r1, #0
   b72d0:	f7ff be1e 	b.w	b6f10 <network_is_off>

000b72d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b72d4:	6840      	ldr	r0, [r0, #4]
   b72d6:	2200      	movs	r2, #0
   b72d8:	f081 0101 	eor.w	r1, r1, #1
   b72dc:	f7ff bdf0 	b.w	b6ec0 <network_listen>

000b72e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b72e0:	6840      	ldr	r0, [r0, #4]
   b72e2:	2200      	movs	r2, #0
   b72e4:	f7ff bdfc 	b.w	b6ee0 <network_set_listen_timeout>

000b72e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b72e8:	2200      	movs	r2, #0
   b72ea:	6840      	ldr	r0, [r0, #4]
   b72ec:	4611      	mov	r1, r2
   b72ee:	f7ff bdff 	b.w	b6ef0 <network_get_listen_timeout>

000b72f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b72f2:	2200      	movs	r2, #0
   b72f4:	6840      	ldr	r0, [r0, #4]
   b72f6:	4611      	mov	r1, r2
   b72f8:	f7ff bdea 	b.w	b6ed0 <network_listening>

000b72fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b72fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7300:	b095      	sub	sp, #84	; 0x54
   b7302:	4614      	mov	r4, r2
   b7304:	460d      	mov	r5, r1
   b7306:	4607      	mov	r7, r0
    IPAddress addr;
   b7308:	f7ff ff54 	bl	b71b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b730c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b730e:	221c      	movs	r2, #28
   b7310:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7312:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7314:	f001 fd44 	bl	b8da0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7318:	2340      	movs	r3, #64	; 0x40
   b731a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b731c:	4620      	mov	r0, r4
   b731e:	466b      	mov	r3, sp
   b7320:	aa0c      	add	r2, sp, #48	; 0x30
   b7322:	2100      	movs	r1, #0
   b7324:	f7ff fc60 	bl	b6be8 <netdb_getaddrinfo>
    if (!r) {
   b7328:	4604      	mov	r4, r0
   b732a:	2800      	cmp	r0, #0
   b732c:	d14b      	bne.n	b73c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b732e:	4602      	mov	r2, r0
   b7330:	2101      	movs	r1, #1
   b7332:	6868      	ldr	r0, [r5, #4]
   b7334:	f7ff fdac 	bl	b6e90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7338:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b733a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b733c:	4622      	mov	r2, r4
   b733e:	6868      	ldr	r0, [r5, #4]
   b7340:	f7ff fda6 	bl	b6e90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7344:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7346:	4681      	mov	r9, r0
        bool ok = false;
   b7348:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b734a:	2e00      	cmp	r6, #0
   b734c:	d03b      	beq.n	b73c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b734e:	2900      	cmp	r1, #0
   b7350:	d139      	bne.n	b73c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7352:	6873      	ldr	r3, [r6, #4]
   b7354:	2b02      	cmp	r3, #2
   b7356:	d003      	beq.n	b7360 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7358:	2b0a      	cmp	r3, #10
   b735a:	d011      	beq.n	b7380 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b735c:	69f6      	ldr	r6, [r6, #28]
   b735e:	e7f4      	b.n	b734a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7360:	f1b8 0f00 	cmp.w	r8, #0
   b7364:	d0fa      	beq.n	b735c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7366:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7368:	a806      	add	r0, sp, #24
   b736a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b736c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b736e:	f7ff ff71 	bl	b7254 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7374:	1d3c      	adds	r4, r7, #4
   b7376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7378:	682b      	ldr	r3, [r5, #0]
   b737a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b737c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b737e:	e7ed      	b.n	b735c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7380:	f1b9 0f00 	cmp.w	r9, #0
   b7384:	d0ea      	beq.n	b735c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7386:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7388:	2210      	movs	r2, #16
   b738a:	a801      	add	r0, sp, #4
   b738c:	f001 fd08 	bl	b8da0 <memset>
                    a.v = 6;
   b7390:	2306      	movs	r3, #6
   b7392:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7396:	ad01      	add	r5, sp, #4
   b7398:	f104 0308 	add.w	r3, r4, #8
   b739c:	3418      	adds	r4, #24
   b739e:	6818      	ldr	r0, [r3, #0]
   b73a0:	6859      	ldr	r1, [r3, #4]
   b73a2:	462a      	mov	r2, r5
   b73a4:	c203      	stmia	r2!, {r0, r1}
   b73a6:	3308      	adds	r3, #8
   b73a8:	42a3      	cmp	r3, r4
   b73aa:	4615      	mov	r5, r2
   b73ac:	d1f7      	bne.n	b739e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b73ae:	a901      	add	r1, sp, #4
   b73b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b73b2:	ad07      	add	r5, sp, #28
   b73b4:	f7ff ff0c 	bl	b71d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b73b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b73ba:	1d3c      	adds	r4, r7, #4
   b73bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73be:	682b      	ldr	r3, [r5, #0]
   b73c0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b73c2:	4649      	mov	r1, r9
   b73c4:	e7ca      	b.n	b735c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b73c6:	9800      	ldr	r0, [sp, #0]
   b73c8:	f7ff fc06 	bl	b6bd8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b73cc:	4638      	mov	r0, r7
   b73ce:	b015      	add	sp, #84	; 0x54
   b73d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b73d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b73d4:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b73d6:	4a03      	ldr	r2, [pc, #12]	; (b73e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b73d8:	601a      	str	r2, [r3, #0]
   b73da:	2200      	movs	r2, #0
   b73dc:	605a      	str	r2, [r3, #4]

} // spark
   b73de:	4770      	bx	lr
   b73e0:	2003e6d4 	.word	0x2003e6d4
   b73e4:	000ba0ec 	.word	0x000ba0ec

000b73e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b73e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73ea:	4606      	mov	r6, r0
   b73ec:	460d      	mov	r5, r1
  size_t n = 0;
   b73ee:	188f      	adds	r7, r1, r2
   b73f0:	2400      	movs	r4, #0
  while (size--) {
   b73f2:	42bd      	cmp	r5, r7
   b73f4:	d00c      	beq.n	b7410 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b73f6:	6833      	ldr	r3, [r6, #0]
   b73f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b73fc:	689b      	ldr	r3, [r3, #8]
   b73fe:	4630      	mov	r0, r6
   b7400:	4798      	blx	r3
     if (chunk>=0)
   b7402:	1e03      	subs	r3, r0, #0
   b7404:	db01      	blt.n	b740a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7406:	441c      	add	r4, r3
  while (size--) {
   b7408:	e7f3      	b.n	b73f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b740a:	2c00      	cmp	r4, #0
   b740c:	bf08      	it	eq
   b740e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7410:	4620      	mov	r0, r4
   b7412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7414 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7414:	b513      	push	{r0, r1, r4, lr}
   b7416:	4604      	mov	r4, r0
    }
   b7418:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b741a:	b159      	cbz	r1, b7434 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b741c:	9101      	str	r1, [sp, #4]
   b741e:	f001 fcff 	bl	b8e20 <strlen>
   b7422:	6823      	ldr	r3, [r4, #0]
   b7424:	9901      	ldr	r1, [sp, #4]
   b7426:	68db      	ldr	r3, [r3, #12]
   b7428:	4602      	mov	r2, r0
   b742a:	4620      	mov	r0, r4
    }
   b742c:	b002      	add	sp, #8
   b742e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7432:	4718      	bx	r3
    }
   b7434:	b002      	add	sp, #8
   b7436:	bd10      	pop	{r4, pc}

000b7438 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7438:	b508      	push	{r3, lr}
  return write(str);
   b743a:	f7ff ffeb 	bl	b7414 <_ZN5Print5writeEPKc>
}
   b743e:	bd08      	pop	{r3, pc}

000b7440 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7440:	6803      	ldr	r3, [r0, #0]
   b7442:	689b      	ldr	r3, [r3, #8]
   b7444:	4718      	bx	r3

000b7446 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7446:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7448:	210d      	movs	r1, #13
{
   b744a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b744c:	f7ff fff8 	bl	b7440 <_ZN5Print5printEc>
  n += print('\n');
   b7450:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7452:	4604      	mov	r4, r0
  n += print('\n');
   b7454:	4628      	mov	r0, r5
   b7456:	f7ff fff3 	bl	b7440 <_ZN5Print5printEc>
  return n;
}
   b745a:	4420      	add	r0, r4
   b745c:	bd38      	pop	{r3, r4, r5, pc}

000b745e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b745e:	b538      	push	{r3, r4, r5, lr}
   b7460:	4605      	mov	r5, r0
  return write(str);
   b7462:	f7ff ffd7 	bl	b7414 <_ZN5Print5writeEPKc>
   b7466:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7468:	4628      	mov	r0, r5
   b746a:	f7ff ffec 	bl	b7446 <_ZN5Print7printlnEv>
  return n;
}
   b746e:	4420      	add	r0, r4
   b7470:	bd38      	pop	{r3, r4, r5, pc}

000b7472 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7472:	b530      	push	{r4, r5, lr}
   b7474:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7476:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7478:	2a01      	cmp	r2, #1
  *str = '\0';
   b747a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b747e:	bf98      	it	ls
   b7480:	220a      	movls	r2, #10
   b7482:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7484:	460d      	mov	r5, r1
   b7486:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b748a:	fb01 5312 	mls	r3, r1, r2, r5
   b748e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7492:	2b09      	cmp	r3, #9
   b7494:	bf94      	ite	ls
   b7496:	3330      	addls	r3, #48	; 0x30
   b7498:	3337      	addhi	r3, #55	; 0x37
   b749a:	b2db      	uxtb	r3, r3
  } while(n);
   b749c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b749e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b74a2:	d9ef      	bls.n	b7484 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b74a4:	4621      	mov	r1, r4
   b74a6:	f7ff ffb5 	bl	b7414 <_ZN5Print5writeEPKc>
}
   b74aa:	b00b      	add	sp, #44	; 0x2c
   b74ac:	bd30      	pop	{r4, r5, pc}

000b74ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b74ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74b2:	b086      	sub	sp, #24
   b74b4:	af00      	add	r7, sp, #0
   b74b6:	4605      	mov	r5, r0
   b74b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b74ba:	1d38      	adds	r0, r7, #4
   b74bc:	2114      	movs	r1, #20
{
   b74be:	4614      	mov	r4, r2
    va_copy(args2, args);
   b74c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b74c2:	f7ff fd45 	bl	b6f50 <vsnprintf>

    if (n<bufsize)
   b74c6:	2813      	cmp	r0, #19
   b74c8:	d80e      	bhi.n	b74e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b74ca:	1d39      	adds	r1, r7, #4
   b74cc:	4628      	mov	r0, r5
   b74ce:	f7ff ffa1 	bl	b7414 <_ZN5Print5writeEPKc>
   b74d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b74d4:	b11e      	cbz	r6, b74de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b74d6:	4628      	mov	r0, r5
   b74d8:	f7ff ffb5 	bl	b7446 <_ZN5Print7printlnEv>
   b74dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b74de:	4620      	mov	r0, r4
   b74e0:	3718      	adds	r7, #24
   b74e2:	46bd      	mov	sp, r7
   b74e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b74e8:	f100 0308 	add.w	r3, r0, #8
   b74ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b74f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b74f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b74f6:	4622      	mov	r2, r4
   b74f8:	1c41      	adds	r1, r0, #1
   b74fa:	683b      	ldr	r3, [r7, #0]
   b74fc:	4668      	mov	r0, sp
   b74fe:	f7ff fd27 	bl	b6f50 <vsnprintf>
  return write(str);
   b7502:	4669      	mov	r1, sp
   b7504:	4628      	mov	r0, r5
   b7506:	f7ff ff85 	bl	b7414 <_ZN5Print5writeEPKc>
   b750a:	4604      	mov	r4, r0
   b750c:	46c5      	mov	sp, r8
   b750e:	e7e1      	b.n	b74d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7510 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7510:	4b01      	ldr	r3, [pc, #4]	; (b7518 <_GLOBAL__sub_I_RGB+0x8>)
   b7512:	2200      	movs	r2, #0
   b7514:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7516:	4770      	bx	lr
   b7518:	2003e6dc 	.word	0x2003e6dc

000b751c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b751c:	2100      	movs	r1, #0
   b751e:	f7ff bbd3 	b.w	b6cc8 <hal_spi_release>

000b7522 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7522:	2100      	movs	r1, #0
   b7524:	f7ff bbc8 	b.w	b6cb8 <hal_spi_acquire>

000b7528 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7528:	b510      	push	{r4, lr}
   b752a:	4604      	mov	r4, r0
   b752c:	4608      	mov	r0, r1
{
    _spi = spi;
   b752e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7530:	f7ff fba2 	bl	b6c78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7534:	2300      	movs	r3, #0
   b7536:	6063      	str	r3, [r4, #4]
}
   b7538:	4620      	mov	r0, r4
   b753a:	bd10      	pop	{r4, pc}

000b753c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b753c:	b513      	push	{r0, r1, r4, lr}
   b753e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7540:	7800      	ldrb	r0, [r0, #0]
   b7542:	f7ff ffee 	bl	b7522 <_ZN8SPIClass4lockEv.isra.0>
   b7546:	b958      	cbnz	r0, b7560 <_ZN8SPIClass5beginEv+0x24>
   b7548:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b754a:	9001      	str	r0, [sp, #4]
   b754c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7550:	f7ff fb82 	bl	b6c58 <hal_spi_begin>
        unlock();
   b7554:	9801      	ldr	r0, [sp, #4]
    }
}
   b7556:	b002      	add	sp, #8
   b7558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b755c:	f7ff bfde 	b.w	b751c <_ZN8SPIClass6unlockEv.isra.0>
   b7560:	b002      	add	sp, #8
   b7562:	bd10      	pop	{r4, pc}

000b7564 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7564:	7800      	ldrb	r0, [r0, #0]
   b7566:	f7ff bfd9 	b.w	b751c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b756c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b756c:	0840      	lsrs	r0, r0, #1
{
   b756e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7570:	6018      	str	r0, [r3, #0]
   b7572:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7574:	6818      	ldr	r0, [r3, #0]
   b7576:	4288      	cmp	r0, r1
   b7578:	b2e5      	uxtb	r5, r4
   b757a:	d906      	bls.n	b758a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b757c:	3401      	adds	r4, #1
   b757e:	2c08      	cmp	r4, #8
   b7580:	d002      	beq.n	b7588 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7582:	0840      	lsrs	r0, r0, #1
   b7584:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7586:	e7f5      	b.n	b7574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7588:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b758a:	4b02      	ldr	r3, [pc, #8]	; (b7594 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b758c:	5d5b      	ldrb	r3, [r3, r5]
   b758e:	7013      	strb	r3, [r2, #0]
}
   b7590:	bd30      	pop	{r4, r5, pc}
   b7592:	bf00      	nop
   b7594:	000ba120 	.word	0x000ba120

000b7598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b759c:	4606      	mov	r6, r0
   b759e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b75a0:	7800      	ldrb	r0, [r0, #0]
{
   b75a2:	460c      	mov	r4, r1
    CHECK(lock());
   b75a4:	f7ff ffbd 	bl	b7522 <_ZN8SPIClass4lockEv.isra.0>
   b75a8:	2800      	cmp	r0, #0
   b75aa:	db1b      	blt.n	b75e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b75ac:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b75ae:	2214      	movs	r2, #20
   b75b0:	2100      	movs	r1, #0
   b75b2:	a809      	add	r0, sp, #36	; 0x24
   b75b4:	f001 fbf4 	bl	b8da0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b75b8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b75ba:	2200      	movs	r2, #0
   b75bc:	a909      	add	r1, sp, #36	; 0x24
   b75be:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b75c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b75c4:	f7ff fb68 	bl	b6c98 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b75c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b75cc:	b113      	cbz	r3, b75d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b75ce:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b75d2:	b155      	cbz	r5, b75ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b75d4:	2700      	movs	r7, #0
   b75d6:	46b9      	mov	r9, r7
   b75d8:	46b8      	mov	r8, r7
   b75da:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b75dc:	7923      	ldrb	r3, [r4, #4]
   b75de:	b15d      	cbz	r5, b75f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b75e0:	b1c3      	cbz	r3, b7614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b75e2:	2000      	movs	r0, #0
}
   b75e4:	b00f      	add	sp, #60	; 0x3c
   b75e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b75ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b75ee:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b75f2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b75f6:	e7f1      	b.n	b75dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b75f8:	2b00      	cmp	r3, #0
   b75fa:	d135      	bne.n	b7668 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b75fc:	68a3      	ldr	r3, [r4, #8]
   b75fe:	4543      	cmp	r3, r8
   b7600:	d108      	bne.n	b7614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7602:	f88d 9020 	strb.w	r9, [sp, #32]
   b7606:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b760a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b760e:	89a3      	ldrh	r3, [r4, #12]
   b7610:	429a      	cmp	r2, r3
   b7612:	d0e6      	beq.n	b75e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7614:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7616:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7618:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b761c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b761e:	ab04      	add	r3, sp, #16
   b7620:	f10d 020f 	add.w	r2, sp, #15
   b7624:	f7ff ffa2 	bl	b756c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7628:	7921      	ldrb	r1, [r4, #4]
   b762a:	b985      	cbnz	r5, b764e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b762c:	b989      	cbnz	r1, b7652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b762e:	68a3      	ldr	r3, [r4, #8]
   b7630:	4543      	cmp	r3, r8
   b7632:	d30e      	bcc.n	b7652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7634:	f88d 9020 	strb.w	r9, [sp, #32]
   b7638:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b763c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7640:	89a3      	ldrh	r3, [r4, #12]
   b7642:	429a      	cmp	r2, r3
   b7644:	d105      	bne.n	b7652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7646:	9b04      	ldr	r3, [sp, #16]
   b7648:	4543      	cmp	r3, r8
   b764a:	d102      	bne.n	b7652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b764c:	e7c9      	b.n	b75e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b764e:	2900      	cmp	r1, #0
   b7650:	d1f9      	bne.n	b7646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7652:	2300      	movs	r3, #0
   b7654:	9301      	str	r3, [sp, #4]
   b7656:	7b63      	ldrb	r3, [r4, #13]
   b7658:	9300      	str	r3, [sp, #0]
   b765a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b765e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7660:	7830      	ldrb	r0, [r6, #0]
   b7662:	f7ff fb21 	bl	b6ca8 <hal_spi_set_settings>
   b7666:	e7bc      	b.n	b75e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7668:	e9cd 5500 	strd	r5, r5, [sp]
   b766c:	462b      	mov	r3, r5
   b766e:	462a      	mov	r2, r5
   b7670:	2101      	movs	r1, #1
   b7672:	e7f5      	b.n	b7660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7674 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7674:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7676:	7800      	ldrb	r0, [r0, #0]
   b7678:	f7ff faf6 	bl	b6c68 <hal_spi_transfer>
}
   b767c:	b2c0      	uxtb	r0, r0
   b767e:	bd08      	pop	{r3, pc}

000b7680 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7680:	b510      	push	{r4, lr}
   b7682:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7684:	f7ff f9e0 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7688:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b768a:	6823      	ldr	r3, [r4, #0]
   b768c:	4620      	mov	r0, r4
   b768e:	695b      	ldr	r3, [r3, #20]
   b7690:	4798      	blx	r3
    if (c >= 0) return c;
   b7692:	2800      	cmp	r0, #0
   b7694:	da08      	bge.n	b76a8 <_ZN6Stream9timedReadEv+0x28>
   b7696:	f7ff f9d7 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b769a:	68e3      	ldr	r3, [r4, #12]
   b769c:	1ac0      	subs	r0, r0, r3
   b769e:	68a3      	ldr	r3, [r4, #8]
   b76a0:	4298      	cmp	r0, r3
   b76a2:	d3f2      	bcc.n	b768a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b76a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b76a8:	bd10      	pop	{r4, pc}

000b76aa <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b76aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76ae:	4607      	mov	r7, r0
   b76b0:	460c      	mov	r4, r1
   b76b2:	188e      	adds	r6, r1, r2
   b76b4:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b76b6:	42b5      	cmp	r5, r6
   b76b8:	eba5 0804 	sub.w	r8, r5, r4
   b76bc:	d007      	beq.n	b76ce <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b76be:	4638      	mov	r0, r7
   b76c0:	f7ff ffde 	bl	b7680 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b76c4:	1e03      	subs	r3, r0, #0
   b76c6:	db02      	blt.n	b76ce <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b76c8:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b76cc:	e7f3      	b.n	b76b6 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b76ce:	4640      	mov	r0, r8
   b76d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b76d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b76d4:	4b05      	ldr	r3, [pc, #20]	; (b76ec <_GLOBAL__sub_I_System+0x18>)
   b76d6:	2202      	movs	r2, #2
   b76d8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b76da:	4b05      	ldr	r3, [pc, #20]	; (b76f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b76dc:	4a05      	ldr	r2, [pc, #20]	; (b76f4 <_GLOBAL__sub_I_System+0x20>)
   b76de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b76e0:	2000      	movs	r0, #0
   b76e2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b76e6:	f7ff bb7f 	b.w	b6de8 <set_system_mode>
   b76ea:	bf00      	nop
   b76ec:	2003e6f8 	.word	0x2003e6f8
   b76f0:	2003e6ec 	.word	0x2003e6ec
   b76f4:	ffff0000 	.word	0xffff0000

000b76f8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b76f8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b76fa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b76fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7700:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7702:	2201      	movs	r2, #1
   b7704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7708:	f10d 0107 	add.w	r1, sp, #7
   b770c:	47a0      	blx	r4
}
   b770e:	b002      	add	sp, #8
   b7710:	bd10      	pop	{r4, pc}

000b7712 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7712:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7714:	6803      	ldr	r3, [r0, #0]
   b7716:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b771c:	46a4      	mov	ip, r4
}
   b771e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7722:	4760      	bx	ip

000b7724 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7724:	b513      	push	{r0, r1, r4, lr}
   b7726:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7728:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b772a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b772e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7730:	f10d 0107 	add.w	r1, sp, #7
   b7734:	2201      	movs	r2, #1
   b7736:	47a0      	blx	r4
}
   b7738:	b002      	add	sp, #8
   b773a:	bd10      	pop	{r4, pc}

000b773c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b773c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b773e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7740:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7744:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7748:	429a      	cmp	r2, r3
int TCPClient::read() {
   b774a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b774c:	d008      	beq.n	b7760 <_ZN9TCPClient4readEv+0x24>
   b774e:	6963      	ldr	r3, [r4, #20]
   b7750:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7754:	1c51      	adds	r1, r2, #1
   b7756:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b775a:	4413      	add	r3, r2
   b775c:	7918      	ldrb	r0, [r3, #4]
}
   b775e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7760:	6803      	ldr	r3, [r0, #0]
   b7762:	691b      	ldr	r3, [r3, #16]
   b7764:	4798      	blx	r3
   b7766:	2800      	cmp	r0, #0
   b7768:	d1f1      	bne.n	b774e <_ZN9TCPClient4readEv+0x12>
   b776a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b776e:	e7f6      	b.n	b775e <_ZN9TCPClient4readEv+0x22>

000b7770 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7770:	4770      	bx	lr

000b7772 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7772:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7774:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7776:	43c0      	mvns	r0, r0
   b7778:	0fc0      	lsrs	r0, r0, #31
   b777a:	4770      	bx	lr

000b777c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b777c:	4770      	bx	lr
	...

000b7780 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7780:	4b06      	ldr	r3, [pc, #24]	; (b779c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7782:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7784:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7786:	f100 040c 	add.w	r4, r0, #12
	    ||
   b778a:	d005      	beq.n	b7798 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b778c:	4608      	mov	r0, r1
   b778e:	f000 fd93 	bl	b82b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7792:	2800      	cmp	r0, #0
   b7794:	bf08      	it	eq
   b7796:	2400      	moveq	r4, #0
      }
   b7798:	4620      	mov	r0, r4
   b779a:	bd10      	pop	{r4, pc}
   b779c:	000ba060 	.word	0x000ba060

000b77a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77a0:	b510      	push	{r4, lr}
   b77a2:	21ac      	movs	r1, #172	; 0xac
   b77a4:	4604      	mov	r4, r0
   b77a6:	f7fc fc7a 	bl	b409e <_ZdlPvj>
   b77aa:	4620      	mov	r0, r4
   b77ac:	bd10      	pop	{r4, pc}

000b77ae <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b77ae:	21ac      	movs	r1, #172	; 0xac
   b77b0:	f7fc bc75 	b.w	b409e <_ZdlPvj>

000b77b4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b77b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b77b8:	f04f 0800 	mov.w	r8, #0
   b77bc:	b086      	sub	sp, #24
   b77be:	461c      	mov	r4, r3
   b77c0:	f8c0 8004 	str.w	r8, [r0, #4]
   b77c4:	4605      	mov	r5, r0
   b77c6:	460e      	mov	r6, r1
   b77c8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b77ca:	4641      	mov	r1, r8
   b77cc:	2210      	movs	r2, #16
   b77ce:	a802      	add	r0, sp, #8
   b77d0:	f001 fae6 	bl	b8da0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b77d4:	1c63      	adds	r3, r4, #1
   b77d6:	d009      	beq.n	b77ec <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b77d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77dc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b77e0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b77e4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b77e8:	435c      	muls	r4, r3
   b77ea:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b77ec:	6968      	ldr	r0, [r5, #20]
   b77ee:	2310      	movs	r3, #16
   b77f0:	9300      	str	r3, [sp, #0]
   b77f2:	6800      	ldr	r0, [r0, #0]
   b77f4:	ab02      	add	r3, sp, #8
   b77f6:	f241 0205 	movw	r2, #4101	; 0x1005
   b77fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b77fe:	f7ff f9fb 	bl	b6bf8 <sock_setsockopt>
    if (ret < 0) {
   b7802:	2800      	cmp	r0, #0
   b7804:	da07      	bge.n	b7816 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7806:	f7ff fbab 	bl	b6f60 <__errno>
   b780a:	6803      	ldr	r3, [r0, #0]
   b780c:	606b      	str	r3, [r5, #4]
        return 0;
   b780e:	2000      	movs	r0, #0
}
   b7810:	b006      	add	sp, #24
   b7812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7816:	6968      	ldr	r0, [r5, #20]
   b7818:	2300      	movs	r3, #0
   b781a:	6800      	ldr	r0, [r0, #0]
   b781c:	463a      	mov	r2, r7
   b781e:	4631      	mov	r1, r6
   b7820:	f7ff fa0a 	bl	b6c38 <sock_send>
    if (ret < 0) {
   b7824:	1e03      	subs	r3, r0, #0
   b7826:	dbee      	blt.n	b7806 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7828:	4618      	mov	r0, r3
   b782a:	e7f1      	b.n	b7810 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b782c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b782c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b782e:	6984      	ldr	r4, [r0, #24]
   b7830:	4b0a      	ldr	r3, [pc, #40]	; (b785c <_ZN9TCPClientD1Ev+0x30>)
   b7832:	6003      	str	r3, [r0, #0]
   b7834:	4605      	mov	r5, r0
   b7836:	b17c      	cbz	r4, b7858 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7838:	6863      	ldr	r3, [r4, #4]
   b783a:	3b01      	subs	r3, #1
   b783c:	6063      	str	r3, [r4, #4]
   b783e:	b95b      	cbnz	r3, b7858 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7840:	6823      	ldr	r3, [r4, #0]
   b7842:	4620      	mov	r0, r4
   b7844:	689b      	ldr	r3, [r3, #8]
   b7846:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7848:	68a3      	ldr	r3, [r4, #8]
   b784a:	3b01      	subs	r3, #1
   b784c:	60a3      	str	r3, [r4, #8]
   b784e:	b91b      	cbnz	r3, b7858 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7850:	6823      	ldr	r3, [r4, #0]
   b7852:	4620      	mov	r0, r4
   b7854:	68db      	ldr	r3, [r3, #12]
   b7856:	4798      	blx	r3
   b7858:	4628      	mov	r0, r5
   b785a:	bd38      	pop	{r3, r4, r5, pc}
   b785c:	000ba164 	.word	0x000ba164

000b7860 <_ZN9TCPClientD0Ev>:
   b7860:	b510      	push	{r4, lr}
   b7862:	4604      	mov	r4, r0
   b7864:	f7ff ffe2 	bl	b782c <_ZN9TCPClientD1Ev>
   b7868:	4620      	mov	r0, r4
   b786a:	211c      	movs	r1, #28
   b786c:	f7fc fc17 	bl	b409e <_ZdlPvj>
   b7870:	4620      	mov	r0, r4
   b7872:	bd10      	pop	{r4, pc}

000b7874 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7874:	b530      	push	{r4, r5, lr}
   b7876:	b087      	sub	sp, #28
   b7878:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b787a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b787c:	4668      	mov	r0, sp
   b787e:	f7ff fce9 	bl	b7254 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7884:	3404      	adds	r4, #4
   b7886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7888:	682b      	ldr	r3, [r5, #0]
   b788a:	7023      	strb	r3, [r4, #0]
    }
   b788c:	b007      	add	sp, #28
   b788e:	bd30      	pop	{r4, r5, pc}

000b7890 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7890:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7892:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7894:	4b05      	ldr	r3, [pc, #20]	; (b78ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7896:	4604      	mov	r4, r0
   b7898:	358c      	adds	r5, #140	; 0x8c
   b789a:	f844 3b04 	str.w	r3, [r4], #4
   b789e:	4606      	mov	r6, r0
   b78a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78a4:	682b      	ldr	r3, [r5, #0]
   b78a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b78a8:	4630      	mov	r0, r6
   b78aa:	bd70      	pop	{r4, r5, r6, pc}
   b78ac:	000ba0d4 	.word	0x000ba0d4

000b78b0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78b4:	4698      	mov	r8, r3
    stop();
   b78b6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78b8:	b093      	sub	sp, #76	; 0x4c
   b78ba:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b78bc:	2400      	movs	r4, #0
    stop();
   b78be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78c0:	4606      	mov	r6, r0
   b78c2:	4617      	mov	r7, r2
    stop();
   b78c4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b78c6:	4628      	mov	r0, r5
   b78c8:	466b      	mov	r3, sp
   b78ca:	4622      	mov	r2, r4
   b78cc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b78ce:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b78d0:	f7ff f98a 	bl	b6be8 <netdb_getaddrinfo>
   b78d4:	4605      	mov	r5, r0
   b78d6:	2800      	cmp	r0, #0
   b78d8:	d163      	bne.n	b79a2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b78da:	9b00      	ldr	r3, [sp, #0]
   b78dc:	2b00      	cmp	r3, #0
   b78de:	d04b      	beq.n	b7978 <_ZN9TCPClient7connectEPKctm+0xc8>
   b78e0:	695b      	ldr	r3, [r3, #20]
   b78e2:	2b00      	cmp	r3, #0
   b78e4:	d048      	beq.n	b7978 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b78e6:	a806      	add	r0, sp, #24
   b78e8:	f7ff fc64 	bl	b71b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b78ec:	9b00      	ldr	r3, [sp, #0]
   b78ee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b78f0:	7863      	ldrb	r3, [r4, #1]
   b78f2:	2b02      	cmp	r3, #2
   b78f4:	d104      	bne.n	b7900 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b78f6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b78f8:	a806      	add	r0, sp, #24
   b78fa:	f7ff ffbb 	bl	b7874 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b78fe:	e026      	b.n	b794e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7900:	2b0a      	cmp	r3, #10
   b7902:	d124      	bne.n	b794e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7904:	2211      	movs	r2, #17
   b7906:	4629      	mov	r1, r5
   b7908:	a801      	add	r0, sp, #4
   b790a:	f001 fa49 	bl	b8da0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b790e:	68a3      	ldr	r3, [r4, #8]
   b7910:	2b00      	cmp	r3, #0
   b7912:	d038      	beq.n	b7986 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7914:	f104 0308 	add.w	r3, r4, #8
   b7918:	f10d 0c04 	add.w	ip, sp, #4
   b791c:	3418      	adds	r4, #24
   b791e:	6818      	ldr	r0, [r3, #0]
   b7920:	6859      	ldr	r1, [r3, #4]
   b7922:	4662      	mov	r2, ip
   b7924:	c203      	stmia	r2!, {r0, r1}
   b7926:	3308      	adds	r3, #8
   b7928:	42a3      	cmp	r3, r4
   b792a:	4694      	mov	ip, r2
   b792c:	d1f7      	bne.n	b791e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b792e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7930:	a901      	add	r1, sp, #4
   b7932:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7934:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7938:	f7ff fc4a 	bl	b71d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b793c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7940:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7944:	ac07      	add	r4, sp, #28
   b7946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7948:	f8dc 3000 	ldr.w	r3, [ip]
   b794c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b794e:	a806      	add	r0, sp, #24
   b7950:	f7ff fc50 	bl	b71f4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7954:	b180      	cbz	r0, b7978 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7956:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7958:	ad07      	add	r5, sp, #28
   b795a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b795e:	4b12      	ldr	r3, [pc, #72]	; (b79a8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7960:	930c      	str	r3, [sp, #48]	; 0x30
   b7962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7964:	ac0d      	add	r4, sp, #52	; 0x34
   b7966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7968:	682b      	ldr	r3, [r5, #0]
   b796a:	7023      	strb	r3, [r4, #0]
   b796c:	463a      	mov	r2, r7
   b796e:	4643      	mov	r3, r8
   b7970:	a90c      	add	r1, sp, #48	; 0x30
   b7972:	4630      	mov	r0, r6
   b7974:	47c8      	blx	r9
   b7976:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7978:	9800      	ldr	r0, [sp, #0]
   b797a:	f7ff f92d 	bl	b6bd8 <netdb_freeaddrinfo>
}
   b797e:	4628      	mov	r0, r5
   b7980:	b013      	add	sp, #76	; 0x4c
   b7982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7986:	68e3      	ldr	r3, [r4, #12]
   b7988:	2b00      	cmp	r3, #0
   b798a:	d1c3      	bne.n	b7914 <_ZN9TCPClient7connectEPKctm+0x64>
   b798c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7990:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7994:	f7ff f910 	bl	b6bb8 <inet_htonl>
   b7998:	4581      	cmp	r9, r0
   b799a:	d1bb      	bne.n	b7914 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b799c:	f104 0114 	add.w	r1, r4, #20
   b79a0:	e7aa      	b.n	b78f8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b79a2:	4625      	mov	r5, r4
   b79a4:	e7e8      	b.n	b7978 <_ZN9TCPClient7connectEPKctm+0xc8>
   b79a6:	bf00      	nop
   b79a8:	000ba0d4 	.word	0x000ba0d4

000b79ac <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b79ac:	b538      	push	{r3, r4, r5, lr}
   b79ae:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b79b0:	681a      	ldr	r2, [r3, #0]
   b79b2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b79b4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b79b6:	da10      	bge.n	b79da <_ZN9TCPClient9connectedEv+0x2e>
   b79b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79c0:	429a      	cmp	r2, r3
   b79c2:	d10a      	bne.n	b79da <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b79c4:	6803      	ldr	r3, [r0, #0]
   b79c6:	691b      	ldr	r3, [r3, #16]
   b79c8:	4798      	blx	r3
        if (!rv) {
   b79ca:	4604      	mov	r4, r0
   b79cc:	b928      	cbnz	r0, b79da <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b79ce:	682b      	ldr	r3, [r5, #0]
   b79d0:	4628      	mov	r0, r5
   b79d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79d4:	4798      	blx	r3
        rv = available();
   b79d6:	4620      	mov	r0, r4
}
   b79d8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b79da:	2001      	movs	r0, #1
   b79dc:	e7fc      	b.n	b79d8 <_ZN9TCPClient9connectedEv+0x2c>

000b79de <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b79de:	b510      	push	{r4, lr}
   b79e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79ea:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b79ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79ee:	d005      	beq.n	b79fc <_ZN9TCPClient4peekEv+0x1e>
   b79f0:	6963      	ldr	r3, [r4, #20]
   b79f2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b79f6:	4413      	add	r3, r2
   b79f8:	7918      	ldrb	r0, [r3, #4]
}
   b79fa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79fc:	6803      	ldr	r3, [r0, #0]
   b79fe:	691b      	ldr	r3, [r3, #16]
   b7a00:	4798      	blx	r3
   b7a02:	2800      	cmp	r0, #0
   b7a04:	d1f4      	bne.n	b79f0 <_ZN9TCPClient4peekEv+0x12>
   b7a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7a0a:	e7f6      	b.n	b79fa <_ZN9TCPClient4peekEv+0x1c>

000b7a0c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a0e:	6943      	ldr	r3, [r0, #20]
   b7a10:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7a12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a1a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a1c:	4605      	mov	r5, r0
   b7a1e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7a20:	d016      	beq.n	b7a50 <_ZN9TCPClient4readEPhj+0x44>
   b7a22:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7a24:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7a28:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7a2c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7a2e:	42bc      	cmp	r4, r7
   b7a30:	bf28      	it	cs
   b7a32:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7a34:	3304      	adds	r3, #4
   b7a36:	4622      	mov	r2, r4
   b7a38:	4419      	add	r1, r3
   b7a3a:	4630      	mov	r0, r6
   b7a3c:	f001 f9a2 	bl	b8d84 <memcpy>
   b7a40:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a42:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a46:	4423      	add	r3, r4
   b7a48:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a4c:	4620      	mov	r0, r4
   b7a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a50:	6803      	ldr	r3, [r0, #0]
   b7a52:	691b      	ldr	r3, [r3, #16]
   b7a54:	4798      	blx	r3
   b7a56:	2800      	cmp	r0, #0
   b7a58:	d1e3      	bne.n	b7a22 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7a5e:	e7f5      	b.n	b7a4c <_ZN9TCPClient4readEPhj+0x40>

000b7a60 <_ZN9TCPClient12flush_bufferEv>:
   b7a60:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7a62:	2300      	movs	r3, #0
   b7a64:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7a68:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7a6a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7a6e:	4770      	bx	lr

000b7a70 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a74:	461f      	mov	r7, r3
    stop();
   b7a76:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a78:	460c      	mov	r4, r1
    stop();
   b7a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a7c:	b08a      	sub	sp, #40	; 0x28
   b7a7e:	4605      	mov	r5, r0
   b7a80:	4616      	mov	r6, r2
    stop();
   b7a82:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7a84:	7d23      	ldrb	r3, [r4, #20]
   b7a86:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7a8a:	2b04      	cmp	r3, #4
   b7a8c:	bf0c      	ite	eq
   b7a8e:	2002      	moveq	r0, #2
   b7a90:	200a      	movne	r0, #10
   b7a92:	2206      	movs	r2, #6
   b7a94:	2101      	movs	r1, #1
   b7a96:	f7ff f8d7 	bl	b6c48 <sock_socket>
   b7a9a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7a9e:	696b      	ldr	r3, [r5, #20]
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	2b00      	cmp	r3, #0
   b7aa4:	da08      	bge.n	b7ab8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7aa6:	682b      	ldr	r3, [r5, #0]
   b7aa8:	4628      	mov	r0, r5
   b7aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7aac:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7aae:	4798      	blx	r3
}
   b7ab0:	4620      	mov	r0, r4
   b7ab2:	b00a      	add	sp, #40	; 0x28
   b7ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7ab8:	4628      	mov	r0, r5
   b7aba:	f7ff ffd1 	bl	b7a60 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7abe:	b1b7      	cbz	r7, b7aee <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7ac0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ac2:	a903      	add	r1, sp, #12
   b7ac4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7ac6:	9303      	str	r3, [sp, #12]
   b7ac8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7acc:	f7ff f864 	bl	b6b98 <if_index_to_name>
   b7ad0:	2800      	cmp	r0, #0
   b7ad2:	d1e8      	bne.n	b7aa6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7ad4:	6968      	ldr	r0, [r5, #20]
   b7ad6:	2306      	movs	r3, #6
   b7ad8:	9300      	str	r3, [sp, #0]
   b7ada:	6800      	ldr	r0, [r0, #0]
   b7adc:	ab03      	add	r3, sp, #12
   b7ade:	f241 020b 	movw	r2, #4107	; 0x100b
   b7ae2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7ae6:	f7ff f887 	bl	b6bf8 <sock_setsockopt>
   b7aea:	2800      	cmp	r0, #0
   b7aec:	d1db      	bne.n	b7aa6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7aee:	221c      	movs	r2, #28
   b7af0:	2100      	movs	r1, #0
   b7af2:	a803      	add	r0, sp, #12
   b7af4:	f001 f954 	bl	b8da0 <memset>
    if (ip.version() == 4) {
   b7af8:	7d23      	ldrb	r3, [r4, #20]
   b7afa:	2b04      	cmp	r3, #4
   b7afc:	d11d      	bne.n	b7b3a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7afe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7b02:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7b04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7b08:	f7ff f85e 	bl	b6bc8 <inet_htons>
   b7b0c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7b10:	6860      	ldr	r0, [r4, #4]
   b7b12:	f7ff f851 	bl	b6bb8 <inet_htonl>
   b7b16:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7b18:	696b      	ldr	r3, [r5, #20]
   b7b1a:	221c      	movs	r2, #28
   b7b1c:	6818      	ldr	r0, [r3, #0]
   b7b1e:	a903      	add	r1, sp, #12
   b7b20:	f7ff f87a 	bl	b6c18 <sock_connect>
   b7b24:	2800      	cmp	r0, #0
   b7b26:	d1be      	bne.n	b7aa6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7b28:	3404      	adds	r4, #4
   b7b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7b2c:	696d      	ldr	r5, [r5, #20]
   b7b2e:	358c      	adds	r5, #140	; 0x8c
   b7b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7b32:	6823      	ldr	r3, [r4, #0]
   b7b34:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7b36:	2401      	movs	r4, #1
   b7b38:	e7ba      	b.n	b7ab0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7b3a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b3e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b40:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b44:	f7ff f840 	bl	b6bc8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b48:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b4a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b4e:	1d23      	adds	r3, r4, #4
   b7b50:	f104 0714 	add.w	r7, r4, #20
   b7b54:	6818      	ldr	r0, [r3, #0]
   b7b56:	6859      	ldr	r1, [r3, #4]
   b7b58:	4632      	mov	r2, r6
   b7b5a:	c203      	stmia	r2!, {r0, r1}
   b7b5c:	3308      	adds	r3, #8
   b7b5e:	42bb      	cmp	r3, r7
   b7b60:	4616      	mov	r6, r2
   b7b62:	d1f7      	bne.n	b7b54 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7b64:	e7d8      	b.n	b7b18 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7b68 <_ZN9TCPClient9availableEv>:
{
   b7b68:	b530      	push	{r4, r5, lr}
   b7b6a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7b6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7b70:	b08b      	sub	sp, #44	; 0x2c
   b7b72:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7b74:	b12b      	cbz	r3, b7b82 <_ZN9TCPClient9availableEv+0x1a>
   b7b76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7b7a:	429a      	cmp	r2, r3
   b7b7c:	d101      	bne.n	b7b82 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7b7e:	f7ff ff6f 	bl	b7a60 <_ZN9TCPClient12flush_bufferEv>
   b7b82:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7b84:	6808      	ldr	r0, [r1, #0]
   b7b86:	2800      	cmp	r0, #0
   b7b88:	db18      	blt.n	b7bbc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7b8a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7b8e:	2d7f      	cmp	r5, #127	; 0x7f
   b7b90:	d814      	bhi.n	b7bbc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7b92:	3104      	adds	r1, #4
   b7b94:	2308      	movs	r3, #8
   b7b96:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7b9a:	4429      	add	r1, r5
   b7b9c:	f7ff f844 	bl	b6c28 <sock_recv>
            if (ret > 0) {
   b7ba0:	2800      	cmp	r0, #0
   b7ba2:	dd13      	ble.n	b7bcc <_ZN9TCPClient9availableEv+0x64>
   b7ba4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7ba6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7baa:	b90a      	cbnz	r2, b7bb0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7bac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7bb0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7bb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7bb6:	4410      	add	r0, r2
   b7bb8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7bbc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7bbe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7bc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7bc6:	1ac0      	subs	r0, r0, r3
   b7bc8:	b00b      	add	sp, #44	; 0x2c
   b7bca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7bcc:	f7ff f9c8 	bl	b6f60 <__errno>
   b7bd0:	6803      	ldr	r3, [r0, #0]
   b7bd2:	2b0b      	cmp	r3, #11
   b7bd4:	d0f2      	beq.n	b7bbc <_ZN9TCPClient9availableEv+0x54>
   b7bd6:	f7ff f9c3 	bl	b6f60 <__errno>
   b7bda:	6803      	ldr	r3, [r0, #0]
   b7bdc:	2b0b      	cmp	r3, #11
   b7bde:	d0ed      	beq.n	b7bbc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7be0:	2320      	movs	r3, #32
   b7be2:	2500      	movs	r5, #0
   b7be4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7be8:	f7ff f9ba 	bl	b6f60 <__errno>
   b7bec:	6803      	ldr	r3, [r0, #0]
   b7bee:	9301      	str	r3, [sp, #4]
   b7bf0:	4b08      	ldr	r3, [pc, #32]	; (b7c14 <_ZN9TCPClient9availableEv+0xac>)
   b7bf2:	4909      	ldr	r1, [pc, #36]	; (b7c18 <_ZN9TCPClient9availableEv+0xb0>)
   b7bf4:	9300      	str	r3, [sp, #0]
   b7bf6:	aa02      	add	r2, sp, #8
   b7bf8:	462b      	mov	r3, r5
   b7bfa:	2032      	movs	r0, #50	; 0x32
   b7bfc:	f7ff f8ec 	bl	b6dd8 <log_message>
                    sock_close(d_->sock);
   b7c00:	6963      	ldr	r3, [r4, #20]
   b7c02:	6818      	ldr	r0, [r3, #0]
   b7c04:	f7ff f800 	bl	b6c08 <sock_close>
   b7c08:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c0e:	601a      	str	r2, [r3, #0]
   b7c10:	e7d4      	b.n	b7bbc <_ZN9TCPClient9availableEv+0x54>
   b7c12:	bf00      	nop
   b7c14:	000ba12f 	.word	0x000ba12f
   b7c18:	000ba128 	.word	0x000ba128

000b7c1c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7c1c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7c1e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7c20:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7c22:	6818      	ldr	r0, [r3, #0]
   b7c24:	2800      	cmp	r0, #0
   b7c26:	db01      	blt.n	b7c2c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7c28:	f7fe ffee 	bl	b6c08 <sock_close>
   b7c2c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c32:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7c34:	6960      	ldr	r0, [r4, #20]
   b7c36:	2211      	movs	r2, #17
   b7c38:	2100      	movs	r1, #0
   b7c3a:	308c      	adds	r0, #140	; 0x8c
   b7c3c:	f001 f8b0 	bl	b8da0 <memset>
    flush_buffer();
   b7c40:	4620      	mov	r0, r4
}
   b7c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c46:	f7ff bf0b 	b.w	b7a60 <_ZN9TCPClient12flush_bufferEv>

000b7c4a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c4a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c4c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c4e:	4604      	mov	r4, r0
          total(0) {
   b7c50:	6001      	str	r1, [r0, #0]
   b7c52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c56:	3088      	adds	r0, #136	; 0x88
   b7c58:	f7ff faac 	bl	b71b4 <_ZN9IPAddressC1Ev>
}
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	bd10      	pop	{r4, pc}

000b7c60 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c62:	2300      	movs	r3, #0
   b7c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7c68:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7c6c:	4a0e      	ldr	r2, [pc, #56]	; (b7ca8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7c6e:	6103      	str	r3, [r0, #16]
   b7c70:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c72:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7c74:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c76:	20ac      	movs	r0, #172	; 0xac
   b7c78:	9101      	str	r1, [sp, #4]
   b7c7a:	f7fc fa0c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7c7e:	1e05      	subs	r5, r0, #0
   b7c80:	f105 060c 	add.w	r6, r5, #12
   b7c84:	d008      	beq.n	b7c98 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c86:	2301      	movs	r3, #1
   b7c88:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7c8c:	4b07      	ldr	r3, [pc, #28]	; (b7cac <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c8e:	9901      	ldr	r1, [sp, #4]
   b7c90:	602b      	str	r3, [r5, #0]
   b7c92:	4630      	mov	r0, r6
   b7c94:	f7ff ffd9 	bl	b7c4a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7c98:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7c9a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7c9e:	f7ff fedf 	bl	b7a60 <_ZN9TCPClient12flush_bufferEv>
}
   b7ca2:	b002      	add	sp, #8
   b7ca4:	bd70      	pop	{r4, r5, r6, pc}
   b7ca6:	bf00      	nop
   b7ca8:	000ba164 	.word	0x000ba164
   b7cac:	000ba148 	.word	0x000ba148

000b7cb0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7cb0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7cb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7cb6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7cb8:	f7ff ffd2 	bl	b7c60 <_ZN9TCPClientC1Ei>
}
   b7cbc:	4620      	mov	r0, r4
   b7cbe:	bd10      	pop	{r4, pc}

000b7cc0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7cc0:	b510      	push	{r4, lr}
   b7cc2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7cc4:	6800      	ldr	r0, [r0, #0]
   b7cc6:	2800      	cmp	r0, #0
   b7cc8:	db01      	blt.n	b7cce <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7cca:	f7fe ff9d 	bl	b6c08 <sock_close>
    }
}
   b7cce:	4620      	mov	r0, r4
   b7cd0:	bd10      	pop	{r4, pc}

000b7cd2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7cd2:	300c      	adds	r0, #12
   b7cd4:	f7ff bff4 	b.w	b7cc0 <_ZN9TCPClient4DataD1Ev>

000b7cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7cd8:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7cda:	681a      	ldr	r2, [r3, #0]
   b7cdc:	4b02      	ldr	r3, [pc, #8]	; (b7ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7cde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7ce0:	4770      	bx	lr
   b7ce2:	bf00      	nop
   b7ce4:	2003e578 	.word	0x2003e578
   b7ce8:	2003e6fc 	.word	0x2003e6fc

000b7cec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7cec:	4770      	bx	lr

000b7cee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7cee:	7441      	strb	r1, [r0, #17]
}
   b7cf0:	4770      	bx	lr

000b7cf2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7cf2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7cf4:	7c00      	ldrb	r0, [r0, #16]
   b7cf6:	f7ff f81f 	bl	b6d38 <hal_usart_available_data_for_write>
}
   b7cfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cfe:	bd08      	pop	{r3, pc}

000b7d00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7d00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7d02:	7c00      	ldrb	r0, [r0, #16]
   b7d04:	f7fe fff0 	bl	b6ce8 <hal_usart_available>
}
   b7d08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d0c:	bd08      	pop	{r3, pc}

000b7d0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7d0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7d10:	7c00      	ldrb	r0, [r0, #16]
   b7d12:	f7fe fff9 	bl	b6d08 <hal_usart_peek>
}
   b7d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d1a:	bd08      	pop	{r3, pc}

000b7d1c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7d1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7d1e:	7c00      	ldrb	r0, [r0, #16]
   b7d20:	f7fe ffea 	bl	b6cf8 <hal_usart_read>
}
   b7d24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d28:	bd08      	pop	{r3, pc}

000b7d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7d2a:	7c00      	ldrb	r0, [r0, #16]
   b7d2c:	f7fe bff4 	b.w	b6d18 <hal_usart_flush>

000b7d30 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d32:	7c45      	ldrb	r5, [r0, #17]
{
   b7d34:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d36:	b12d      	cbz	r5, b7d44 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7d38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7d3a:	b003      	add	sp, #12
   b7d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7d40:	f7fe bfca 	b.w	b6cd8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d44:	7c00      	ldrb	r0, [r0, #16]
   b7d46:	9101      	str	r1, [sp, #4]
   b7d48:	f7fe fff6 	bl	b6d38 <hal_usart_available_data_for_write>
   b7d4c:	2800      	cmp	r0, #0
   b7d4e:	9901      	ldr	r1, [sp, #4]
   b7d50:	dcf2      	bgt.n	b7d38 <_ZN11USARTSerial5writeEh+0x8>
}
   b7d52:	4628      	mov	r0, r5
   b7d54:	b003      	add	sp, #12
   b7d56:	bd30      	pop	{r4, r5, pc}

000b7d58 <_ZN11USARTSerialD0Ev>:
   b7d58:	b510      	push	{r4, lr}
   b7d5a:	2114      	movs	r1, #20
   b7d5c:	4604      	mov	r4, r0
   b7d5e:	f7fc f99e 	bl	b409e <_ZdlPvj>
   b7d62:	4620      	mov	r0, r4
   b7d64:	bd10      	pop	{r4, pc}
	...

000b7d68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7d68:	b510      	push	{r4, lr}
   b7d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d6e:	4604      	mov	r4, r0
   b7d70:	4608      	mov	r0, r1
   b7d72:	4611      	mov	r1, r2
   b7d74:	2200      	movs	r2, #0
   b7d76:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7d7a:	4b04      	ldr	r3, [pc, #16]	; (b7d8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7d7c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7d7e:	2301      	movs	r3, #1
  _serial = serial;
   b7d80:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7d82:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7d84:	f7fe ffe0 	bl	b6d48 <hal_usart_init_ex>
}
   b7d88:	4620      	mov	r0, r4
   b7d8a:	bd10      	pop	{r4, pc}
   b7d8c:	000ba1cc 	.word	0x000ba1cc

000b7d90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d90:	7441      	strb	r1, [r0, #17]
}
   b7d92:	4770      	bx	lr

000b7d94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d94:	4770      	bx	lr

000b7d96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d96:	4770      	bx	lr

000b7d98 <_ZN9USBSerial4readEv>:
{
   b7d98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d9a:	2100      	movs	r1, #0
   b7d9c:	7c00      	ldrb	r0, [r0, #16]
   b7d9e:	f7fe fffb 	bl	b6d98 <HAL_USB_USART_Receive_Data>
}
   b7da2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7da6:	bd08      	pop	{r3, pc}

000b7da8 <_ZN9USBSerial4peekEv>:
{
   b7da8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7daa:	2101      	movs	r1, #1
   b7dac:	7c00      	ldrb	r0, [r0, #16]
   b7dae:	f7fe fff3 	bl	b6d98 <HAL_USB_USART_Receive_Data>
}
   b7db2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7db6:	bd08      	pop	{r3, pc}

000b7db8 <_ZN9USBSerial17availableForWriteEv>:
{
   b7db8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7dba:	7c00      	ldrb	r0, [r0, #16]
   b7dbc:	f7fe ffe4 	bl	b6d88 <HAL_USB_USART_Available_Data_For_Write>
}
   b7dc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7dc4:	bd08      	pop	{r3, pc}

000b7dc6 <_ZN9USBSerial9availableEv>:
{
   b7dc6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7dc8:	7c00      	ldrb	r0, [r0, #16]
   b7dca:	f7fe ffd5 	bl	b6d78 <HAL_USB_USART_Available_Data>
}
   b7dce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7dd2:	bd08      	pop	{r3, pc}

000b7dd4 <_ZN9USBSerial5writeEh>:
{
   b7dd4:	b513      	push	{r0, r1, r4, lr}
   b7dd6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7dd8:	7c00      	ldrb	r0, [r0, #16]
{
   b7dda:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ddc:	f7fe ffd4 	bl	b6d88 <HAL_USB_USART_Available_Data_For_Write>
   b7de0:	2800      	cmp	r0, #0
   b7de2:	9901      	ldr	r1, [sp, #4]
   b7de4:	dc01      	bgt.n	b7dea <_ZN9USBSerial5writeEh+0x16>
   b7de6:	7c60      	ldrb	r0, [r4, #17]
   b7de8:	b120      	cbz	r0, b7df4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7dea:	7c20      	ldrb	r0, [r4, #16]
   b7dec:	f7fe ffdc 	bl	b6da8 <HAL_USB_USART_Send_Data>
   b7df0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7df4:	b002      	add	sp, #8
   b7df6:	bd10      	pop	{r4, pc}

000b7df8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7df8:	7c00      	ldrb	r0, [r0, #16]
   b7dfa:	f7fe bfdd 	b.w	b6db8 <HAL_USB_USART_Flush_Data>

000b7dfe <_ZN9USBSerialD0Ev>:
   b7dfe:	b510      	push	{r4, lr}
   b7e00:	2114      	movs	r1, #20
   b7e02:	4604      	mov	r4, r0
   b7e04:	f7fc f94b 	bl	b409e <_ZdlPvj>
   b7e08:	4620      	mov	r0, r4
   b7e0a:	bd10      	pop	{r4, pc}

000b7e0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7e0c:	b510      	push	{r4, lr}
   b7e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e12:	4604      	mov	r4, r0
   b7e14:	4608      	mov	r0, r1
   b7e16:	2100      	movs	r1, #0
   b7e18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7e1c:	4b04      	ldr	r3, [pc, #16]	; (b7e30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7e1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e20:	2301      	movs	r3, #1
  _serial = serial;
   b7e22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7e26:	4611      	mov	r1, r2
   b7e28:	f7fe ff96 	bl	b6d58 <HAL_USB_USART_Init>
}
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	bd10      	pop	{r4, pc}
   b7e30:	000ba1fc 	.word	0x000ba1fc

000b7e34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7e34:	7c00      	ldrb	r0, [r0, #16]
   b7e36:	2200      	movs	r2, #0
   b7e38:	f7fe bf96 	b.w	b6d68 <HAL_USB_USART_Begin>

000b7e3c <_Z19acquireSerialBufferv>:
{
   b7e3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7e3e:	2214      	movs	r2, #20
{
   b7e40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7e42:	2100      	movs	r1, #0
   b7e44:	f000 ffac 	bl	b8da0 <memset>
}
   b7e48:	4620      	mov	r0, r4
   b7e4a:	bd10      	pop	{r4, pc}

000b7e4c <_Z16_fetch_usbserialv>:
{
   b7e4c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e4e:	4c0f      	ldr	r4, [pc, #60]	; (b7e8c <_Z16_fetch_usbserialv+0x40>)
{
   b7e50:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e52:	a803      	add	r0, sp, #12
   b7e54:	f7ff fff2 	bl	b7e3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e58:	7821      	ldrb	r1, [r4, #0]
   b7e5a:	f3bf 8f5b 	dmb	ish
   b7e5e:	f011 0101 	ands.w	r1, r1, #1
   b7e62:	d10f      	bne.n	b7e84 <_Z16_fetch_usbserialv+0x38>
   b7e64:	4620      	mov	r0, r4
   b7e66:	9101      	str	r1, [sp, #4]
   b7e68:	f7fc f928 	bl	b40bc <__cxa_guard_acquire>
   b7e6c:	9901      	ldr	r1, [sp, #4]
   b7e6e:	b148      	cbz	r0, b7e84 <_Z16_fetch_usbserialv+0x38>
   b7e70:	aa03      	add	r2, sp, #12
   b7e72:	4807      	ldr	r0, [pc, #28]	; (b7e90 <_Z16_fetch_usbserialv+0x44>)
   b7e74:	f7ff ffca 	bl	b7e0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e78:	4620      	mov	r0, r4
   b7e7a:	f7fc f924 	bl	b40c6 <__cxa_guard_release>
   b7e7e:	4805      	ldr	r0, [pc, #20]	; (b7e94 <_Z16_fetch_usbserialv+0x48>)
   b7e80:	f000 ff72 	bl	b8d68 <atexit>
	return _usbserial;
}
   b7e84:	4802      	ldr	r0, [pc, #8]	; (b7e90 <_Z16_fetch_usbserialv+0x44>)
   b7e86:	b008      	add	sp, #32
   b7e88:	bd10      	pop	{r4, pc}
   b7e8a:	bf00      	nop
   b7e8c:	2003e700 	.word	0x2003e700
   b7e90:	2003e704 	.word	0x2003e704
   b7e94:	000b7d95 	.word	0x000b7d95

000b7e98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7e98:	2200      	movs	r2, #0
   b7e9a:	6840      	ldr	r0, [r0, #4]
   b7e9c:	4611      	mov	r1, r2
   b7e9e:	f7fe bff7 	b.w	b6e90 <network_ready>

000b7ea2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ea2:	2200      	movs	r2, #0
   b7ea4:	6840      	ldr	r0, [r0, #4]
   b7ea6:	4611      	mov	r1, r2
   b7ea8:	f7ff b812 	b.w	b6ed0 <network_listening>

000b7eac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7eac:	2200      	movs	r2, #0
   b7eae:	6840      	ldr	r0, [r0, #4]
   b7eb0:	4611      	mov	r1, r2
   b7eb2:	f7ff b81d 	b.w	b6ef0 <network_get_listen_timeout>

000b7eb6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7eb6:	6840      	ldr	r0, [r0, #4]
   b7eb8:	2200      	movs	r2, #0
   b7eba:	f7ff b811 	b.w	b6ee0 <network_set_listen_timeout>

000b7ebe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ebe:	6840      	ldr	r0, [r0, #4]
   b7ec0:	2200      	movs	r2, #0
   b7ec2:	f081 0101 	eor.w	r1, r1, #1
   b7ec6:	f7fe bffb 	b.w	b6ec0 <network_listen>

000b7eca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7eca:	2300      	movs	r3, #0
   b7ecc:	6840      	ldr	r0, [r0, #4]
   b7ece:	461a      	mov	r2, r3
   b7ed0:	4619      	mov	r1, r3
   b7ed2:	f7fe bfed 	b.w	b6eb0 <network_off>

000b7ed6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ed6:	2300      	movs	r3, #0
   b7ed8:	6840      	ldr	r0, [r0, #4]
   b7eda:	461a      	mov	r2, r3
   b7edc:	4619      	mov	r1, r3
   b7ede:	f7fe bfdf 	b.w	b6ea0 <network_on>

000b7ee2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	6840      	ldr	r0, [r0, #4]
   b7ee6:	4611      	mov	r1, r2
   b7ee8:	f7fe bfc2 	b.w	b6e70 <network_connecting>

000b7eec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7eec:	6840      	ldr	r0, [r0, #4]
   b7eee:	2200      	movs	r2, #0
   b7ef0:	2102      	movs	r1, #2
   b7ef2:	f7fe bfc5 	b.w	b6e80 <network_disconnect>

000b7ef6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ef6:	2300      	movs	r3, #0
   b7ef8:	6840      	ldr	r0, [r0, #4]
   b7efa:	461a      	mov	r2, r3
   b7efc:	f7fe bfb0 	b.w	b6e60 <network_connect>

000b7f00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7f00:	4b02      	ldr	r3, [pc, #8]	; (b7f0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7f02:	2204      	movs	r2, #4
   b7f04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7f06:	4a02      	ldr	r2, [pc, #8]	; (b7f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7f08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7f0a:	4770      	bx	lr
   b7f0c:	2003e718 	.word	0x2003e718
   b7f10:	000ba22c 	.word	0x000ba22c

000b7f14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7f14:	4b01      	ldr	r3, [pc, #4]	; (b7f1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7f16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7f18:	4770      	bx	lr
   b7f1a:	bf00      	nop
   b7f1c:	2003e57c 	.word	0x2003e57c

000b7f20 <serialEventRun>:
{
   b7f20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7f22:	4b0b      	ldr	r3, [pc, #44]	; (b7f50 <serialEventRun+0x30>)
   b7f24:	b143      	cbz	r3, b7f38 <serialEventRun+0x18>
   b7f26:	f7ff ff91 	bl	b7e4c <_Z16_fetch_usbserialv>
   b7f2a:	6803      	ldr	r3, [r0, #0]
   b7f2c:	691b      	ldr	r3, [r3, #16]
   b7f2e:	4798      	blx	r3
   b7f30:	2800      	cmp	r0, #0
   b7f32:	dd01      	ble.n	b7f38 <serialEventRun+0x18>
        serialEvent();
   b7f34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7f38:	4b06      	ldr	r3, [pc, #24]	; (b7f54 <serialEventRun+0x34>)
   b7f3a:	b143      	cbz	r3, b7f4e <serialEventRun+0x2e>
   b7f3c:	f000 f996 	bl	b826c <_Z22__fetch_global_Serial1v>
   b7f40:	6803      	ldr	r3, [r0, #0]
   b7f42:	691b      	ldr	r3, [r3, #16]
   b7f44:	4798      	blx	r3
   b7f46:	2800      	cmp	r0, #0
   b7f48:	dd01      	ble.n	b7f4e <serialEventRun+0x2e>
        serialEvent1();
   b7f4a:	f3af 8000 	nop.w
}
   b7f4e:	bd08      	pop	{r3, pc}
	...

000b7f58 <_post_loop>:
{
   b7f58:	b508      	push	{r3, lr}
	serialEventRun();
   b7f5a:	f7ff ffe1 	bl	b7f20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f5e:	f7fe fd73 	bl	b6a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7f62:	4b01      	ldr	r3, [pc, #4]	; (b7f68 <_post_loop+0x10>)
   b7f64:	6018      	str	r0, [r3, #0]
}
   b7f66:	bd08      	pop	{r3, pc}
   b7f68:	2003e728 	.word	0x2003e728

000b7f6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f6c:	4805      	ldr	r0, [pc, #20]	; (b7f84 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7f6e:	4a06      	ldr	r2, [pc, #24]	; (b7f88 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7f70:	4906      	ldr	r1, [pc, #24]	; (b7f8c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7f72:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f74:	1a12      	subs	r2, r2, r0
   b7f76:	f000 ff05 	bl	b8d84 <memcpy>
    __backup_sram_signature = signature;
   b7f7a:	4b05      	ldr	r3, [pc, #20]	; (b7f90 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7f7c:	4a05      	ldr	r2, [pc, #20]	; (b7f94 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7f7e:	601a      	str	r2, [r3, #0]
}
   b7f80:	bd08      	pop	{r3, pc}
   b7f82:	bf00      	nop
   b7f84:	2003f400 	.word	0x2003f400
   b7f88:	2003f404 	.word	0x2003f404
   b7f8c:	000ba514 	.word	0x000ba514
   b7f90:	2003f400 	.word	0x2003f400
   b7f94:	9a271c1e 	.word	0x9a271c1e

000b7f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7f98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7f9a:	2300      	movs	r3, #0
   b7f9c:	9300      	str	r3, [sp, #0]
   b7f9e:	461a      	mov	r2, r3
   b7fa0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7fa4:	f7fe ff42 	bl	b6e2c <system_ctrl_set_result>
}
   b7fa8:	b003      	add	sp, #12
   b7faa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7fb0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7fb0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7fb2:	8843      	ldrh	r3, [r0, #2]
   b7fb4:	2b0a      	cmp	r3, #10
   b7fb6:	d008      	beq.n	b7fca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7fb8:	2b50      	cmp	r3, #80	; 0x50
   b7fba:	d10b      	bne.n	b7fd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7fbc:	4b09      	ldr	r3, [pc, #36]	; (b7fe4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7fbe:	681b      	ldr	r3, [r3, #0]
   b7fc0:	b14b      	cbz	r3, b7fd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7fc2:	b003      	add	sp, #12
   b7fc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7fc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7fca:	f7ff ffe5 	bl	b7f98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7fce:	b003      	add	sp, #12
   b7fd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7fd4:	2300      	movs	r3, #0
   b7fd6:	9300      	str	r3, [sp, #0]
   b7fd8:	461a      	mov	r2, r3
   b7fda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7fde:	f7fe ff25 	bl	b6e2c <system_ctrl_set_result>
}
   b7fe2:	e7f4      	b.n	b7fce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7fe4:	2003e724 	.word	0x2003e724

000b7fe8 <module_user_init_hook>:
{
   b7fe8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7fea:	4812      	ldr	r0, [pc, #72]	; (b8034 <module_user_init_hook+0x4c>)
   b7fec:	2100      	movs	r1, #0
   b7fee:	f7fe ffc7 	bl	b6f80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7ff2:	4b11      	ldr	r3, [pc, #68]	; (b8038 <module_user_init_hook+0x50>)
   b7ff4:	681a      	ldr	r2, [r3, #0]
   b7ff6:	4b11      	ldr	r3, [pc, #68]	; (b803c <module_user_init_hook+0x54>)
   b7ff8:	429a      	cmp	r2, r3
   b7ffa:	4b11      	ldr	r3, [pc, #68]	; (b8040 <module_user_init_hook+0x58>)
   b7ffc:	bf0c      	ite	eq
   b7ffe:	2201      	moveq	r2, #1
   b8000:	2200      	movne	r2, #0
   b8002:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8004:	d001      	beq.n	b800a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8006:	f7ff ffb1 	bl	b7f6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b800a:	f7fe fd0d 	bl	b6a28 <HAL_RNG_GetRandomNumber>
   b800e:	4604      	mov	r4, r0
    srand(seed);
   b8010:	f000 fece 	bl	b8db0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8014:	4b0b      	ldr	r3, [pc, #44]	; (b8044 <module_user_init_hook+0x5c>)
   b8016:	b113      	cbz	r3, b801e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8018:	4620      	mov	r0, r4
   b801a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b801e:	2100      	movs	r1, #0
   b8020:	4808      	ldr	r0, [pc, #32]	; (b8044 <module_user_init_hook+0x5c>)
   b8022:	f7fe ff15 	bl	b6e50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b802a:	4807      	ldr	r0, [pc, #28]	; (b8048 <module_user_init_hook+0x60>)
   b802c:	2100      	movs	r1, #0
   b802e:	f7fe bef3 	b.w	b6e18 <system_ctrl_set_app_request_handler>
   b8032:	bf00      	nop
   b8034:	000b7f15 	.word	0x000b7f15
   b8038:	2003f400 	.word	0x2003f400
   b803c:	9a271c1e 	.word	0x9a271c1e
   b8040:	2003e720 	.word	0x2003e720
   b8044:	00000000 	.word	0x00000000
   b8048:	000b7fb1 	.word	0x000b7fb1

000b804c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b804c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b804e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8050:	d902      	bls.n	b8058 <pinAvailable+0xc>
    return false;
   b8052:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8054:	b002      	add	sp, #8
   b8056:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8058:	f1a0 030b 	sub.w	r3, r0, #11
   b805c:	2b02      	cmp	r3, #2
   b805e:	d81a      	bhi.n	b8096 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8060:	4c17      	ldr	r4, [pc, #92]	; (b80c0 <pinAvailable+0x74>)
   b8062:	7821      	ldrb	r1, [r4, #0]
   b8064:	f3bf 8f5b 	dmb	ish
   b8068:	f011 0101 	ands.w	r1, r1, #1
   b806c:	d10b      	bne.n	b8086 <pinAvailable+0x3a>
   b806e:	4620      	mov	r0, r4
   b8070:	9101      	str	r1, [sp, #4]
   b8072:	f7fc f823 	bl	b40bc <__cxa_guard_acquire>
   b8076:	9901      	ldr	r1, [sp, #4]
   b8078:	b128      	cbz	r0, b8086 <pinAvailable+0x3a>
   b807a:	4812      	ldr	r0, [pc, #72]	; (b80c4 <pinAvailable+0x78>)
   b807c:	f7ff fa54 	bl	b7528 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8080:	4620      	mov	r0, r4
   b8082:	f7fc f820 	bl	b40c6 <__cxa_guard_release>
   b8086:	4b0f      	ldr	r3, [pc, #60]	; (b80c4 <pinAvailable+0x78>)
   b8088:	7818      	ldrb	r0, [r3, #0]
   b808a:	f7fe fdfd 	bl	b6c88 <hal_spi_is_enabled>
   b808e:	2800      	cmp	r0, #0
   b8090:	d1df      	bne.n	b8052 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8092:	2001      	movs	r0, #1
   b8094:	e7de      	b.n	b8054 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8096:	2801      	cmp	r0, #1
   b8098:	d809      	bhi.n	b80ae <pinAvailable+0x62>
   b809a:	f000 f8a7 	bl	b81ec <_Z19__fetch_global_Wirev>
   b809e:	2100      	movs	r1, #0
   b80a0:	7c00      	ldrb	r0, [r0, #16]
   b80a2:	f7fe fd61 	bl	b6b68 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b80a6:	f080 0001 	eor.w	r0, r0, #1
   b80aa:	b2c0      	uxtb	r0, r0
   b80ac:	e7d2      	b.n	b8054 <pinAvailable+0x8>
   b80ae:	3809      	subs	r0, #9
   b80b0:	2801      	cmp	r0, #1
   b80b2:	d8ee      	bhi.n	b8092 <pinAvailable+0x46>
   b80b4:	f000 f8da 	bl	b826c <_Z22__fetch_global_Serial1v>
   b80b8:	7c00      	ldrb	r0, [r0, #16]
   b80ba:	f7fe fe35 	bl	b6d28 <hal_usart_is_enabled>
   b80be:	e7f2      	b.n	b80a6 <pinAvailable+0x5a>
   b80c0:	2003e6b8 	.word	0x2003e6b8
   b80c4:	2003e6bc 	.word	0x2003e6bc

000b80c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80c8:	2823      	cmp	r0, #35	; 0x23
{
   b80ca:	b538      	push	{r3, r4, r5, lr}
   b80cc:	4604      	mov	r4, r0
   b80ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b80d0:	d80a      	bhi.n	b80e8 <pinMode+0x20>
   b80d2:	29ff      	cmp	r1, #255	; 0xff
   b80d4:	d008      	beq.n	b80e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b80d6:	f7ff ffb9 	bl	b804c <pinAvailable>
   b80da:	b128      	cbz	r0, b80e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b80dc:	4629      	mov	r1, r5
   b80de:	4620      	mov	r0, r4
}
   b80e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b80e4:	f7fe bcc0 	b.w	b6a68 <HAL_Pin_Mode>
}
   b80e8:	bd38      	pop	{r3, r4, r5, pc}

000b80ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b80ea:	b538      	push	{r3, r4, r5, lr}
   b80ec:	4604      	mov	r4, r0
   b80ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80f0:	f7fe fcc2 	bl	b6a78 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b80f4:	28ff      	cmp	r0, #255	; 0xff
   b80f6:	d010      	beq.n	b811a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b80f8:	2806      	cmp	r0, #6
   b80fa:	d804      	bhi.n	b8106 <digitalWrite+0x1c>
   b80fc:	234d      	movs	r3, #77	; 0x4d
   b80fe:	fa23 f000 	lsr.w	r0, r3, r0
   b8102:	07c3      	lsls	r3, r0, #31
   b8104:	d409      	bmi.n	b811a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8106:	4620      	mov	r0, r4
   b8108:	f7ff ffa0 	bl	b804c <pinAvailable>
   b810c:	b128      	cbz	r0, b811a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b810e:	4629      	mov	r1, r5
   b8110:	4620      	mov	r0, r4
}
   b8112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8116:	f7fe bcb7 	b.w	b6a88 <HAL_GPIO_Write>
}
   b811a:	bd38      	pop	{r3, r4, r5, pc}

000b811c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b811c:	b510      	push	{r4, lr}
   b811e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8120:	f7fe fcaa 	bl	b6a78 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8124:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8126:	b2db      	uxtb	r3, r3
   b8128:	2b01      	cmp	r3, #1
   b812a:	d908      	bls.n	b813e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b812c:	4620      	mov	r0, r4
   b812e:	f7ff ff8d 	bl	b804c <pinAvailable>
   b8132:	b120      	cbz	r0, b813e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8134:	4620      	mov	r0, r4
}
   b8136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b813a:	f7fe bcad 	b.w	b6a98 <HAL_GPIO_Read>
}
   b813e:	2000      	movs	r0, #0
   b8140:	bd10      	pop	{r4, pc}

000b8142 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8142:	280d      	cmp	r0, #13
{
   b8144:	b510      	push	{r4, lr}
   b8146:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8148:	bf9c      	itt	ls
   b814a:	340e      	addls	r4, #14
   b814c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b814e:	4620      	mov	r0, r4
   b8150:	f7ff ff7c 	bl	b804c <pinAvailable>
   b8154:	b150      	cbz	r0, b816c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8156:	2103      	movs	r1, #3
   b8158:	4620      	mov	r0, r4
   b815a:	f7fe fc7d 	bl	b6a58 <HAL_Validate_Pin_Function>
   b815e:	2803      	cmp	r0, #3
   b8160:	d104      	bne.n	b816c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8162:	4620      	mov	r0, r4
}
   b8164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8168:	f7fe bca6 	b.w	b6ab8 <hal_adc_read>
}
   b816c:	2000      	movs	r0, #0
   b816e:	bd10      	pop	{r4, pc}

000b8170 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8170:	b538      	push	{r3, r4, r5, lr}
   b8172:	4604      	mov	r4, r0
   b8174:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b8176:	f7ff ff69 	bl	b804c <pinAvailable>
   b817a:	b1f0      	cbz	r0, b81ba <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b817c:	2104      	movs	r1, #4
   b817e:	4620      	mov	r0, r4
   b8180:	f7fe fc6a 	bl	b6a58 <HAL_Validate_Pin_Function>
   b8184:	2804      	cmp	r0, #4
   b8186:	d105      	bne.n	b8194 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8188:	b2a9      	uxth	r1, r5
   b818a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b818c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8190:	f7fe bc8a 	b.w	b6aa8 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b8194:	2102      	movs	r1, #2
   b8196:	4620      	mov	r0, r4
   b8198:	f7fe fc5e 	bl	b6a58 <HAL_Validate_Pin_Function>
   b819c:	2802      	cmp	r0, #2
   b819e:	d10c      	bne.n	b81ba <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b81a0:	4620      	mov	r0, r4
   b81a2:	f7fe fc69 	bl	b6a78 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b81a6:	2801      	cmp	r0, #1
   b81a8:	d001      	beq.n	b81ae <_Z11analogWritetm+0x3e>
   b81aa:	2804      	cmp	r0, #4
   b81ac:	d105      	bne.n	b81ba <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b81ae:	4629      	mov	r1, r5
   b81b0:	4620      	mov	r0, r4
}
   b81b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b81b6:	f7fe bc87 	b.w	b6ac8 <hal_pwm_write_ext>
}
   b81ba:	bd38      	pop	{r3, r4, r5, pc}

000b81bc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81bc:	4770      	bx	lr
	...

000b81c0 <_Z17acquireWireBufferv>:
{
   b81c0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b81c2:	2520      	movs	r5, #32
   b81c4:	2314      	movs	r3, #20
{
   b81c6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b81c8:	6003      	str	r3, [r0, #0]
   b81ca:	6085      	str	r5, [r0, #8]
   b81cc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b81ce:	4906      	ldr	r1, [pc, #24]	; (b81e8 <_Z17acquireWireBufferv+0x28>)
   b81d0:	4628      	mov	r0, r5
   b81d2:	f000 f86f 	bl	b82b4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b81d6:	4904      	ldr	r1, [pc, #16]	; (b81e8 <_Z17acquireWireBufferv+0x28>)
	};
   b81d8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b81da:	4628      	mov	r0, r5
   b81dc:	f000 f86a 	bl	b82b4 <_ZnajRKSt9nothrow_t>
	};
   b81e0:	60e0      	str	r0, [r4, #12]
}
   b81e2:	4620      	mov	r0, r4
   b81e4:	bd38      	pop	{r3, r4, r5, pc}
   b81e6:	bf00      	nop
   b81e8:	000ba260 	.word	0x000ba260

000b81ec <_Z19__fetch_global_Wirev>:
{
   b81ec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81ee:	4d0e      	ldr	r5, [pc, #56]	; (b8228 <_Z19__fetch_global_Wirev+0x3c>)
   b81f0:	7829      	ldrb	r1, [r5, #0]
   b81f2:	f3bf 8f5b 	dmb	ish
   b81f6:	f011 0401 	ands.w	r4, r1, #1
{
   b81fa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81fc:	d111      	bne.n	b8222 <_Z19__fetch_global_Wirev+0x36>
   b81fe:	4628      	mov	r0, r5
   b8200:	f7fb ff5c 	bl	b40bc <__cxa_guard_acquire>
   b8204:	b168      	cbz	r0, b8222 <_Z19__fetch_global_Wirev+0x36>
   b8206:	a801      	add	r0, sp, #4
   b8208:	f7ff ffda 	bl	b81c0 <_Z17acquireWireBufferv>
   b820c:	aa01      	add	r2, sp, #4
   b820e:	4621      	mov	r1, r4
   b8210:	4806      	ldr	r0, [pc, #24]	; (b822c <_Z19__fetch_global_Wirev+0x40>)
   b8212:	f7fe ff3f 	bl	b7094 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8216:	4628      	mov	r0, r5
   b8218:	f7fb ff55 	bl	b40c6 <__cxa_guard_release>
   b821c:	4804      	ldr	r0, [pc, #16]	; (b8230 <_Z19__fetch_global_Wirev+0x44>)
   b821e:	f000 fda3 	bl	b8d68 <atexit>
	return wire;
}
   b8222:	4802      	ldr	r0, [pc, #8]	; (b822c <_Z19__fetch_global_Wirev+0x40>)
   b8224:	b007      	add	sp, #28
   b8226:	bd30      	pop	{r4, r5, pc}
   b8228:	2003e72c 	.word	0x2003e72c
   b822c:	2003e730 	.word	0x2003e730
   b8230:	000b81bd 	.word	0x000b81bd

000b8234 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8234:	4770      	bx	lr
	...

000b8238 <_Z20acquireSerial1Bufferv>:
{
   b8238:	b538      	push	{r3, r4, r5, lr}
   b823a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b823c:	2514      	movs	r5, #20
   b823e:	462a      	mov	r2, r5
   b8240:	2100      	movs	r1, #0
   b8242:	f000 fdad 	bl	b8da0 <memset>
   b8246:	8025      	strh	r5, [r4, #0]
   b8248:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b824a:	4907      	ldr	r1, [pc, #28]	; (b8268 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b824c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b824e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8250:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8252:	f000 f82f 	bl	b82b4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8256:	4904      	ldr	r1, [pc, #16]	; (b8268 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8258:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b825a:	4628      	mov	r0, r5
   b825c:	f000 f82a 	bl	b82b4 <_ZnajRKSt9nothrow_t>
    };
   b8260:	60e0      	str	r0, [r4, #12]
}
   b8262:	4620      	mov	r0, r4
   b8264:	bd38      	pop	{r3, r4, r5, pc}
   b8266:	bf00      	nop
   b8268:	000ba260 	.word	0x000ba260

000b826c <_Z22__fetch_global_Serial1v>:
{
   b826c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b826e:	4d0e      	ldr	r5, [pc, #56]	; (b82a8 <_Z22__fetch_global_Serial1v+0x3c>)
   b8270:	7829      	ldrb	r1, [r5, #0]
   b8272:	f3bf 8f5b 	dmb	ish
   b8276:	f011 0401 	ands.w	r4, r1, #1
{
   b827a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b827c:	d111      	bne.n	b82a2 <_Z22__fetch_global_Serial1v+0x36>
   b827e:	4628      	mov	r0, r5
   b8280:	f7fb ff1c 	bl	b40bc <__cxa_guard_acquire>
   b8284:	b168      	cbz	r0, b82a2 <_Z22__fetch_global_Serial1v+0x36>
   b8286:	a801      	add	r0, sp, #4
   b8288:	f7ff ffd6 	bl	b8238 <_Z20acquireSerial1Bufferv>
   b828c:	aa01      	add	r2, sp, #4
   b828e:	4621      	mov	r1, r4
   b8290:	4806      	ldr	r0, [pc, #24]	; (b82ac <_Z22__fetch_global_Serial1v+0x40>)
   b8292:	f7ff fd69 	bl	b7d68 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8296:	4628      	mov	r0, r5
   b8298:	f7fb ff15 	bl	b40c6 <__cxa_guard_release>
   b829c:	4804      	ldr	r0, [pc, #16]	; (b82b0 <_Z22__fetch_global_Serial1v+0x44>)
   b829e:	f000 fd63 	bl	b8d68 <atexit>
    return serial1;
}
   b82a2:	4802      	ldr	r0, [pc, #8]	; (b82ac <_Z22__fetch_global_Serial1v+0x40>)
   b82a4:	b007      	add	sp, #28
   b82a6:	bd30      	pop	{r4, r5, pc}
   b82a8:	2003e744 	.word	0x2003e744
   b82ac:	2003e748 	.word	0x2003e748
   b82b0:	000b8235 	.word	0x000b8235

000b82b4 <_ZnajRKSt9nothrow_t>:
   b82b4:	f7fb bef1 	b.w	b409a <_Znaj>

000b82b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b82b8:	4901      	ldr	r1, [pc, #4]	; (b82c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b82ba:	f000 b8f9 	b.w	b84b0 <_ZNKSt9type_infoeqERKS_>
   b82be:	bf00      	nop
   b82c0:	000ba27c 	.word	0x000ba27c

000b82c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b82c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b82c6:	2400      	movs	r4, #0
   b82c8:	2310      	movs	r3, #16
   b82ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b82ce:	6803      	ldr	r3, [r0, #0]
   b82d0:	4615      	mov	r5, r2
   b82d2:	699e      	ldr	r6, [r3, #24]
   b82d4:	6812      	ldr	r2, [r2, #0]
   b82d6:	466b      	mov	r3, sp
   b82d8:	e9cd 4400 	strd	r4, r4, [sp]
   b82dc:	47b0      	blx	r6
   b82de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b82e2:	f003 0306 	and.w	r3, r3, #6
   b82e6:	2b06      	cmp	r3, #6
   b82e8:	bf03      	ittte	eq
   b82ea:	9b00      	ldreq	r3, [sp, #0]
   b82ec:	602b      	streq	r3, [r5, #0]
   b82ee:	2001      	moveq	r0, #1
   b82f0:	4620      	movne	r0, r4
   b82f2:	b004      	add	sp, #16
   b82f4:	bd70      	pop	{r4, r5, r6, pc}

000b82f6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b82f6:	9800      	ldr	r0, [sp, #0]
   b82f8:	4290      	cmp	r0, r2
   b82fa:	bf14      	ite	ne
   b82fc:	2001      	movne	r0, #1
   b82fe:	2006      	moveq	r0, #6
   b8300:	4770      	bx	lr
	...

000b8304 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8304:	b510      	push	{r4, lr}
   b8306:	4b03      	ldr	r3, [pc, #12]	; (b8314 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8308:	6003      	str	r3, [r0, #0]
   b830a:	4604      	mov	r4, r0
   b830c:	f000 f8cd 	bl	b84aa <_ZNSt9type_infoD1Ev>
   b8310:	4620      	mov	r0, r4
   b8312:	bd10      	pop	{r4, pc}
   b8314:	000ba2bc 	.word	0x000ba2bc

000b8318 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8318:	b510      	push	{r4, lr}
   b831a:	4604      	mov	r4, r0
   b831c:	f7ff fff2 	bl	b8304 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8320:	4620      	mov	r0, r4
   b8322:	2108      	movs	r1, #8
   b8324:	f7fb febb 	bl	b409e <_ZdlPvj>
   b8328:	4620      	mov	r0, r4
   b832a:	bd10      	pop	{r4, pc}

000b832c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8330:	461f      	mov	r7, r3
   b8332:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8336:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b833a:	4598      	cmp	r8, r3
   b833c:	4606      	mov	r6, r0
   b833e:	4615      	mov	r5, r2
   b8340:	d107      	bne.n	b8352 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8342:	9907      	ldr	r1, [sp, #28]
   b8344:	f000 f8b4 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b8348:	b118      	cbz	r0, b8352 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b834a:	7165      	strb	r5, [r4, #5]
   b834c:	2000      	movs	r0, #0
   b834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8352:	4639      	mov	r1, r7
   b8354:	4630      	mov	r0, r6
   b8356:	f000 f8ab 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b835a:	2800      	cmp	r0, #0
   b835c:	d0f6      	beq.n	b834c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b835e:	2301      	movs	r3, #1
   b8360:	f8c4 8000 	str.w	r8, [r4]
   b8364:	7125      	strb	r5, [r4, #4]
   b8366:	71a3      	strb	r3, [r4, #6]
   b8368:	e7f0      	b.n	b834c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b836a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b836a:	b538      	push	{r3, r4, r5, lr}
   b836c:	4615      	mov	r5, r2
   b836e:	461c      	mov	r4, r3
   b8370:	f000 f89e 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b8374:	b120      	cbz	r0, b8380 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8376:	2308      	movs	r3, #8
   b8378:	60e3      	str	r3, [r4, #12]
   b837a:	2306      	movs	r3, #6
   b837c:	6025      	str	r5, [r4, #0]
   b837e:	7123      	strb	r3, [r4, #4]
   b8380:	bd38      	pop	{r3, r4, r5, pc}

000b8382 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8382:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8384:	4605      	mov	r5, r0
   b8386:	460c      	mov	r4, r1
   b8388:	9201      	str	r2, [sp, #4]
   b838a:	461e      	mov	r6, r3
   b838c:	f000 f890 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b8390:	b950      	cbnz	r0, b83a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8392:	2e03      	cmp	r6, #3
   b8394:	d808      	bhi.n	b83a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8396:	6823      	ldr	r3, [r4, #0]
   b8398:	9a01      	ldr	r2, [sp, #4]
   b839a:	695b      	ldr	r3, [r3, #20]
   b839c:	4629      	mov	r1, r5
   b839e:	4620      	mov	r0, r4
   b83a0:	b002      	add	sp, #8
   b83a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b83a6:	4718      	bx	r3
   b83a8:	b002      	add	sp, #8
   b83aa:	bd70      	pop	{r4, r5, r6, pc}

000b83ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b83ac:	b510      	push	{r4, lr}
   b83ae:	4b03      	ldr	r3, [pc, #12]	; (b83bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b83b0:	6003      	str	r3, [r0, #0]
   b83b2:	4604      	mov	r4, r0
   b83b4:	f7ff ffa6 	bl	b8304 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b83b8:	4620      	mov	r0, r4
   b83ba:	bd10      	pop	{r4, pc}
   b83bc:	000ba31c 	.word	0x000ba31c

000b83c0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b83c0:	b510      	push	{r4, lr}
   b83c2:	4604      	mov	r4, r0
   b83c4:	f7ff fff2 	bl	b83ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b83c8:	4620      	mov	r0, r4
   b83ca:	210c      	movs	r1, #12
   b83cc:	f7fb fe67 	bl	b409e <_ZdlPvj>
   b83d0:	4620      	mov	r0, r4
   b83d2:	bd10      	pop	{r4, pc}

000b83d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b83d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b83d6:	9f08      	ldr	r7, [sp, #32]
   b83d8:	4297      	cmp	r7, r2
   b83da:	4605      	mov	r5, r0
   b83dc:	460e      	mov	r6, r1
   b83de:	4614      	mov	r4, r2
   b83e0:	d00a      	beq.n	b83f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b83e2:	68a8      	ldr	r0, [r5, #8]
   b83e4:	6802      	ldr	r2, [r0, #0]
   b83e6:	9708      	str	r7, [sp, #32]
   b83e8:	6a15      	ldr	r5, [r2, #32]
   b83ea:	4631      	mov	r1, r6
   b83ec:	4622      	mov	r2, r4
   b83ee:	46ac      	mov	ip, r5
   b83f0:	b003      	add	sp, #12
   b83f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b83f6:	4760      	bx	ip
   b83f8:	4619      	mov	r1, r3
   b83fa:	9301      	str	r3, [sp, #4]
   b83fc:	f000 f858 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b8400:	9b01      	ldr	r3, [sp, #4]
   b8402:	2800      	cmp	r0, #0
   b8404:	d0ed      	beq.n	b83e2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8406:	2006      	movs	r0, #6
   b8408:	b003      	add	sp, #12
   b840a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b840c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b840c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8410:	460d      	mov	r5, r1
   b8412:	4619      	mov	r1, r3
   b8414:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8418:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b841c:	4681      	mov	r9, r0
   b841e:	4617      	mov	r7, r2
   b8420:	4698      	mov	r8, r3
   b8422:	f000 f845 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b8426:	b190      	cbz	r0, b844e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8428:	2d00      	cmp	r5, #0
   b842a:	6034      	str	r4, [r6, #0]
   b842c:	7137      	strb	r7, [r6, #4]
   b842e:	db09      	blt.n	b8444 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8430:	1961      	adds	r1, r4, r5
   b8432:	458a      	cmp	sl, r1
   b8434:	bf0c      	ite	eq
   b8436:	2106      	moveq	r1, #6
   b8438:	2101      	movne	r1, #1
   b843a:	71b1      	strb	r1, [r6, #6]
   b843c:	2000      	movs	r0, #0
   b843e:	b001      	add	sp, #4
   b8440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8444:	3502      	adds	r5, #2
   b8446:	d1f9      	bne.n	b843c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8448:	2301      	movs	r3, #1
   b844a:	71b3      	strb	r3, [r6, #6]
   b844c:	e7f6      	b.n	b843c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b844e:	4554      	cmp	r4, sl
   b8450:	d106      	bne.n	b8460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8452:	4659      	mov	r1, fp
   b8454:	4648      	mov	r0, r9
   b8456:	f000 f82b 	bl	b84b0 <_ZNKSt9type_infoeqERKS_>
   b845a:	b108      	cbz	r0, b8460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b845c:	7177      	strb	r7, [r6, #5]
   b845e:	e7ed      	b.n	b843c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8460:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8464:	6803      	ldr	r3, [r0, #0]
   b8466:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b846a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b846e:	69dc      	ldr	r4, [r3, #28]
   b8470:	463a      	mov	r2, r7
   b8472:	4643      	mov	r3, r8
   b8474:	4629      	mov	r1, r5
   b8476:	46a4      	mov	ip, r4
   b8478:	b001      	add	sp, #4
   b847a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b847e:	4760      	bx	ip

000b8480 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8484:	4607      	mov	r7, r0
   b8486:	460c      	mov	r4, r1
   b8488:	4615      	mov	r5, r2
   b848a:	461e      	mov	r6, r3
   b848c:	f7ff ff6d 	bl	b836a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8490:	b948      	cbnz	r0, b84a6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8492:	68b8      	ldr	r0, [r7, #8]
   b8494:	6803      	ldr	r3, [r0, #0]
   b8496:	699f      	ldr	r7, [r3, #24]
   b8498:	462a      	mov	r2, r5
   b849a:	4633      	mov	r3, r6
   b849c:	4621      	mov	r1, r4
   b849e:	46bc      	mov	ip, r7
   b84a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b84a4:	4760      	bx	ip
   b84a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b84aa <_ZNSt9type_infoD1Ev>:
   b84aa:	4770      	bx	lr

000b84ac <_ZNKSt9type_info14__is_pointer_pEv>:
   b84ac:	2000      	movs	r0, #0
   b84ae:	4770      	bx	lr

000b84b0 <_ZNKSt9type_infoeqERKS_>:
   b84b0:	4281      	cmp	r1, r0
   b84b2:	b508      	push	{r3, lr}
   b84b4:	d00e      	beq.n	b84d4 <_ZNKSt9type_infoeqERKS_+0x24>
   b84b6:	6840      	ldr	r0, [r0, #4]
   b84b8:	7803      	ldrb	r3, [r0, #0]
   b84ba:	2b2a      	cmp	r3, #42	; 0x2a
   b84bc:	d00c      	beq.n	b84d8 <_ZNKSt9type_infoeqERKS_+0x28>
   b84be:	6849      	ldr	r1, [r1, #4]
   b84c0:	780b      	ldrb	r3, [r1, #0]
   b84c2:	2b2a      	cmp	r3, #42	; 0x2a
   b84c4:	bf08      	it	eq
   b84c6:	3101      	addeq	r1, #1
   b84c8:	f000 fca0 	bl	b8e0c <strcmp>
   b84cc:	fab0 f080 	clz	r0, r0
   b84d0:	0940      	lsrs	r0, r0, #5
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	2001      	movs	r0, #1
   b84d6:	e7fc      	b.n	b84d2 <_ZNKSt9type_infoeqERKS_+0x22>
   b84d8:	2000      	movs	r0, #0
   b84da:	e7fa      	b.n	b84d2 <_ZNKSt9type_infoeqERKS_+0x22>

000b84dc <round>:
   b84dc:	ec53 2b10 	vmov	r2, r3, d0
   b84e0:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b84e4:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b84e8:	2913      	cmp	r1, #19
   b84ea:	b510      	push	{r4, lr}
   b84ec:	ee10 0a10 	vmov	r0, s0
   b84f0:	469e      	mov	lr, r3
   b84f2:	dc22      	bgt.n	b853a <round+0x5e>
   b84f4:	2900      	cmp	r1, #0
   b84f6:	db09      	blt.n	b850c <round+0x30>
   b84f8:	4c1f      	ldr	r4, [pc, #124]	; (b8578 <round+0x9c>)
   b84fa:	fa44 fc01 	asr.w	ip, r4, r1
   b84fe:	ea03 040c 	and.w	r4, r3, ip
   b8502:	4320      	orrs	r0, r4
   b8504:	d110      	bne.n	b8528 <round+0x4c>
   b8506:	ec43 2b10 	vmov	d0, r2, r3
   b850a:	bd10      	pop	{r4, pc}
   b850c:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   b8510:	3101      	adds	r1, #1
   b8512:	bf04      	itt	eq
   b8514:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   b8518:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   b851c:	2000      	movs	r0, #0
   b851e:	4673      	mov	r3, lr
   b8520:	4602      	mov	r2, r0
   b8522:	ec43 2b10 	vmov	d0, r2, r3
   b8526:	bd10      	pop	{r4, pc}
   b8528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   b852c:	fa43 f101 	asr.w	r1, r3, r1
   b8530:	448e      	add	lr, r1
   b8532:	ea2e 0e0c 	bic.w	lr, lr, ip
   b8536:	2000      	movs	r0, #0
   b8538:	e7f1      	b.n	b851e <round+0x42>
   b853a:	2933      	cmp	r1, #51	; 0x33
   b853c:	dd08      	ble.n	b8550 <round+0x74>
   b853e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8542:	d1e0      	bne.n	b8506 <round+0x2a>
   b8544:	4619      	mov	r1, r3
   b8546:	f000 f81f 	bl	b8588 <__adddf3>
   b854a:	ec41 0b10 	vmov	d0, r0, r1
   b854e:	bd10      	pop	{r4, pc}
   b8550:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8558:	fa24 fc0c 	lsr.w	ip, r4, ip
   b855c:	ea12 0f0c 	tst.w	r2, ip
   b8560:	d0d1      	beq.n	b8506 <round+0x2a>
   b8562:	2301      	movs	r3, #1
   b8564:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   b8568:	fa03 f101 	lsl.w	r1, r3, r1
   b856c:	1840      	adds	r0, r0, r1
   b856e:	bf28      	it	cs
   b8570:	449e      	addcs	lr, r3
   b8572:	ea20 000c 	bic.w	r0, r0, ip
   b8576:	e7d2      	b.n	b851e <round+0x42>
   b8578:	000fffff 	.word	0x000fffff

000b857c <__aeabi_drsub>:
   b857c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8580:	e002      	b.n	b8588 <__adddf3>
   b8582:	bf00      	nop

000b8584 <__aeabi_dsub>:
   b8584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8588 <__adddf3>:
   b8588:	b530      	push	{r4, r5, lr}
   b858a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b858e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8592:	ea94 0f05 	teq	r4, r5
   b8596:	bf08      	it	eq
   b8598:	ea90 0f02 	teqeq	r0, r2
   b859c:	bf1f      	itttt	ne
   b859e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b85a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b85a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b85aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b85ae:	f000 80e2 	beq.w	b8776 <__adddf3+0x1ee>
   b85b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b85b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b85ba:	bfb8      	it	lt
   b85bc:	426d      	neglt	r5, r5
   b85be:	dd0c      	ble.n	b85da <__adddf3+0x52>
   b85c0:	442c      	add	r4, r5
   b85c2:	ea80 0202 	eor.w	r2, r0, r2
   b85c6:	ea81 0303 	eor.w	r3, r1, r3
   b85ca:	ea82 0000 	eor.w	r0, r2, r0
   b85ce:	ea83 0101 	eor.w	r1, r3, r1
   b85d2:	ea80 0202 	eor.w	r2, r0, r2
   b85d6:	ea81 0303 	eor.w	r3, r1, r3
   b85da:	2d36      	cmp	r5, #54	; 0x36
   b85dc:	bf88      	it	hi
   b85de:	bd30      	pophi	{r4, r5, pc}
   b85e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b85e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b85e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b85ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b85f0:	d002      	beq.n	b85f8 <__adddf3+0x70>
   b85f2:	4240      	negs	r0, r0
   b85f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b85f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b85fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8600:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8604:	d002      	beq.n	b860c <__adddf3+0x84>
   b8606:	4252      	negs	r2, r2
   b8608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b860c:	ea94 0f05 	teq	r4, r5
   b8610:	f000 80a7 	beq.w	b8762 <__adddf3+0x1da>
   b8614:	f1a4 0401 	sub.w	r4, r4, #1
   b8618:	f1d5 0e20 	rsbs	lr, r5, #32
   b861c:	db0d      	blt.n	b863a <__adddf3+0xb2>
   b861e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8622:	fa22 f205 	lsr.w	r2, r2, r5
   b8626:	1880      	adds	r0, r0, r2
   b8628:	f141 0100 	adc.w	r1, r1, #0
   b862c:	fa03 f20e 	lsl.w	r2, r3, lr
   b8630:	1880      	adds	r0, r0, r2
   b8632:	fa43 f305 	asr.w	r3, r3, r5
   b8636:	4159      	adcs	r1, r3
   b8638:	e00e      	b.n	b8658 <__adddf3+0xd0>
   b863a:	f1a5 0520 	sub.w	r5, r5, #32
   b863e:	f10e 0e20 	add.w	lr, lr, #32
   b8642:	2a01      	cmp	r2, #1
   b8644:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8648:	bf28      	it	cs
   b864a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b864e:	fa43 f305 	asr.w	r3, r3, r5
   b8652:	18c0      	adds	r0, r0, r3
   b8654:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b865c:	d507      	bpl.n	b866e <__adddf3+0xe6>
   b865e:	f04f 0e00 	mov.w	lr, #0
   b8662:	f1dc 0c00 	rsbs	ip, ip, #0
   b8666:	eb7e 0000 	sbcs.w	r0, lr, r0
   b866a:	eb6e 0101 	sbc.w	r1, lr, r1
   b866e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8672:	d31b      	bcc.n	b86ac <__adddf3+0x124>
   b8674:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8678:	d30c      	bcc.n	b8694 <__adddf3+0x10c>
   b867a:	0849      	lsrs	r1, r1, #1
   b867c:	ea5f 0030 	movs.w	r0, r0, rrx
   b8680:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8684:	f104 0401 	add.w	r4, r4, #1
   b8688:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b868c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8690:	f080 809a 	bcs.w	b87c8 <__adddf3+0x240>
   b8694:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8698:	bf08      	it	eq
   b869a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b869e:	f150 0000 	adcs.w	r0, r0, #0
   b86a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b86a6:	ea41 0105 	orr.w	r1, r1, r5
   b86aa:	bd30      	pop	{r4, r5, pc}
   b86ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b86b0:	4140      	adcs	r0, r0
   b86b2:	eb41 0101 	adc.w	r1, r1, r1
   b86b6:	3c01      	subs	r4, #1
   b86b8:	bf28      	it	cs
   b86ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b86be:	d2e9      	bcs.n	b8694 <__adddf3+0x10c>
   b86c0:	f091 0f00 	teq	r1, #0
   b86c4:	bf04      	itt	eq
   b86c6:	4601      	moveq	r1, r0
   b86c8:	2000      	moveq	r0, #0
   b86ca:	fab1 f381 	clz	r3, r1
   b86ce:	bf08      	it	eq
   b86d0:	3320      	addeq	r3, #32
   b86d2:	f1a3 030b 	sub.w	r3, r3, #11
   b86d6:	f1b3 0220 	subs.w	r2, r3, #32
   b86da:	da0c      	bge.n	b86f6 <__adddf3+0x16e>
   b86dc:	320c      	adds	r2, #12
   b86de:	dd08      	ble.n	b86f2 <__adddf3+0x16a>
   b86e0:	f102 0c14 	add.w	ip, r2, #20
   b86e4:	f1c2 020c 	rsb	r2, r2, #12
   b86e8:	fa01 f00c 	lsl.w	r0, r1, ip
   b86ec:	fa21 f102 	lsr.w	r1, r1, r2
   b86f0:	e00c      	b.n	b870c <__adddf3+0x184>
   b86f2:	f102 0214 	add.w	r2, r2, #20
   b86f6:	bfd8      	it	le
   b86f8:	f1c2 0c20 	rsble	ip, r2, #32
   b86fc:	fa01 f102 	lsl.w	r1, r1, r2
   b8700:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8704:	bfdc      	itt	le
   b8706:	ea41 010c 	orrle.w	r1, r1, ip
   b870a:	4090      	lslle	r0, r2
   b870c:	1ae4      	subs	r4, r4, r3
   b870e:	bfa2      	ittt	ge
   b8710:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8714:	4329      	orrge	r1, r5
   b8716:	bd30      	popge	{r4, r5, pc}
   b8718:	ea6f 0404 	mvn.w	r4, r4
   b871c:	3c1f      	subs	r4, #31
   b871e:	da1c      	bge.n	b875a <__adddf3+0x1d2>
   b8720:	340c      	adds	r4, #12
   b8722:	dc0e      	bgt.n	b8742 <__adddf3+0x1ba>
   b8724:	f104 0414 	add.w	r4, r4, #20
   b8728:	f1c4 0220 	rsb	r2, r4, #32
   b872c:	fa20 f004 	lsr.w	r0, r0, r4
   b8730:	fa01 f302 	lsl.w	r3, r1, r2
   b8734:	ea40 0003 	orr.w	r0, r0, r3
   b8738:	fa21 f304 	lsr.w	r3, r1, r4
   b873c:	ea45 0103 	orr.w	r1, r5, r3
   b8740:	bd30      	pop	{r4, r5, pc}
   b8742:	f1c4 040c 	rsb	r4, r4, #12
   b8746:	f1c4 0220 	rsb	r2, r4, #32
   b874a:	fa20 f002 	lsr.w	r0, r0, r2
   b874e:	fa01 f304 	lsl.w	r3, r1, r4
   b8752:	ea40 0003 	orr.w	r0, r0, r3
   b8756:	4629      	mov	r1, r5
   b8758:	bd30      	pop	{r4, r5, pc}
   b875a:	fa21 f004 	lsr.w	r0, r1, r4
   b875e:	4629      	mov	r1, r5
   b8760:	bd30      	pop	{r4, r5, pc}
   b8762:	f094 0f00 	teq	r4, #0
   b8766:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b876a:	bf06      	itte	eq
   b876c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8770:	3401      	addeq	r4, #1
   b8772:	3d01      	subne	r5, #1
   b8774:	e74e      	b.n	b8614 <__adddf3+0x8c>
   b8776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b877a:	bf18      	it	ne
   b877c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8780:	d029      	beq.n	b87d6 <__adddf3+0x24e>
   b8782:	ea94 0f05 	teq	r4, r5
   b8786:	bf08      	it	eq
   b8788:	ea90 0f02 	teqeq	r0, r2
   b878c:	d005      	beq.n	b879a <__adddf3+0x212>
   b878e:	ea54 0c00 	orrs.w	ip, r4, r0
   b8792:	bf04      	itt	eq
   b8794:	4619      	moveq	r1, r3
   b8796:	4610      	moveq	r0, r2
   b8798:	bd30      	pop	{r4, r5, pc}
   b879a:	ea91 0f03 	teq	r1, r3
   b879e:	bf1e      	ittt	ne
   b87a0:	2100      	movne	r1, #0
   b87a2:	2000      	movne	r0, #0
   b87a4:	bd30      	popne	{r4, r5, pc}
   b87a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b87aa:	d105      	bne.n	b87b8 <__adddf3+0x230>
   b87ac:	0040      	lsls	r0, r0, #1
   b87ae:	4149      	adcs	r1, r1
   b87b0:	bf28      	it	cs
   b87b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b87b6:	bd30      	pop	{r4, r5, pc}
   b87b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b87bc:	bf3c      	itt	cc
   b87be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b87c2:	bd30      	popcc	{r4, r5, pc}
   b87c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b87c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b87cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b87d0:	f04f 0000 	mov.w	r0, #0
   b87d4:	bd30      	pop	{r4, r5, pc}
   b87d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b87da:	bf1a      	itte	ne
   b87dc:	4619      	movne	r1, r3
   b87de:	4610      	movne	r0, r2
   b87e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b87e4:	bf1c      	itt	ne
   b87e6:	460b      	movne	r3, r1
   b87e8:	4602      	movne	r2, r0
   b87ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b87ee:	bf06      	itte	eq
   b87f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b87f4:	ea91 0f03 	teqeq	r1, r3
   b87f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b87fc:	bd30      	pop	{r4, r5, pc}
   b87fe:	bf00      	nop

000b8800 <__aeabi_ui2d>:
   b8800:	f090 0f00 	teq	r0, #0
   b8804:	bf04      	itt	eq
   b8806:	2100      	moveq	r1, #0
   b8808:	4770      	bxeq	lr
   b880a:	b530      	push	{r4, r5, lr}
   b880c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8810:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8814:	f04f 0500 	mov.w	r5, #0
   b8818:	f04f 0100 	mov.w	r1, #0
   b881c:	e750      	b.n	b86c0 <__adddf3+0x138>
   b881e:	bf00      	nop

000b8820 <__aeabi_i2d>:
   b8820:	f090 0f00 	teq	r0, #0
   b8824:	bf04      	itt	eq
   b8826:	2100      	moveq	r1, #0
   b8828:	4770      	bxeq	lr
   b882a:	b530      	push	{r4, r5, lr}
   b882c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8830:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8834:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8838:	bf48      	it	mi
   b883a:	4240      	negmi	r0, r0
   b883c:	f04f 0100 	mov.w	r1, #0
   b8840:	e73e      	b.n	b86c0 <__adddf3+0x138>
   b8842:	bf00      	nop

000b8844 <__aeabi_f2d>:
   b8844:	0042      	lsls	r2, r0, #1
   b8846:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b884a:	ea4f 0131 	mov.w	r1, r1, rrx
   b884e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8852:	bf1f      	itttt	ne
   b8854:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8858:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b885c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8860:	4770      	bxne	lr
   b8862:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8866:	bf08      	it	eq
   b8868:	4770      	bxeq	lr
   b886a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b886e:	bf04      	itt	eq
   b8870:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8874:	4770      	bxeq	lr
   b8876:	b530      	push	{r4, r5, lr}
   b8878:	f44f 7460 	mov.w	r4, #896	; 0x380
   b887c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8884:	e71c      	b.n	b86c0 <__adddf3+0x138>
   b8886:	bf00      	nop

000b8888 <__aeabi_ul2d>:
   b8888:	ea50 0201 	orrs.w	r2, r0, r1
   b888c:	bf08      	it	eq
   b888e:	4770      	bxeq	lr
   b8890:	b530      	push	{r4, r5, lr}
   b8892:	f04f 0500 	mov.w	r5, #0
   b8896:	e00a      	b.n	b88ae <__aeabi_l2d+0x16>

000b8898 <__aeabi_l2d>:
   b8898:	ea50 0201 	orrs.w	r2, r0, r1
   b889c:	bf08      	it	eq
   b889e:	4770      	bxeq	lr
   b88a0:	b530      	push	{r4, r5, lr}
   b88a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b88a6:	d502      	bpl.n	b88ae <__aeabi_l2d+0x16>
   b88a8:	4240      	negs	r0, r0
   b88aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b88ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b88b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b88b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b88ba:	f43f aed8 	beq.w	b866e <__adddf3+0xe6>
   b88be:	f04f 0203 	mov.w	r2, #3
   b88c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b88c6:	bf18      	it	ne
   b88c8:	3203      	addne	r2, #3
   b88ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b88ce:	bf18      	it	ne
   b88d0:	3203      	addne	r2, #3
   b88d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b88d6:	f1c2 0320 	rsb	r3, r2, #32
   b88da:	fa00 fc03 	lsl.w	ip, r0, r3
   b88de:	fa20 f002 	lsr.w	r0, r0, r2
   b88e2:	fa01 fe03 	lsl.w	lr, r1, r3
   b88e6:	ea40 000e 	orr.w	r0, r0, lr
   b88ea:	fa21 f102 	lsr.w	r1, r1, r2
   b88ee:	4414      	add	r4, r2
   b88f0:	e6bd      	b.n	b866e <__adddf3+0xe6>
   b88f2:	bf00      	nop

000b88f4 <__aeabi_dmul>:
   b88f4:	b570      	push	{r4, r5, r6, lr}
   b88f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b88fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b88fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8902:	bf1d      	ittte	ne
   b8904:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8908:	ea94 0f0c 	teqne	r4, ip
   b890c:	ea95 0f0c 	teqne	r5, ip
   b8910:	f000 f8de 	bleq	b8ad0 <__aeabi_dmul+0x1dc>
   b8914:	442c      	add	r4, r5
   b8916:	ea81 0603 	eor.w	r6, r1, r3
   b891a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b891e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8922:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8926:	bf18      	it	ne
   b8928:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b892c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8934:	d038      	beq.n	b89a8 <__aeabi_dmul+0xb4>
   b8936:	fba0 ce02 	umull	ip, lr, r0, r2
   b893a:	f04f 0500 	mov.w	r5, #0
   b893e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8942:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8946:	fbe0 e503 	umlal	lr, r5, r0, r3
   b894a:	f04f 0600 	mov.w	r6, #0
   b894e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8952:	f09c 0f00 	teq	ip, #0
   b8956:	bf18      	it	ne
   b8958:	f04e 0e01 	orrne.w	lr, lr, #1
   b895c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8960:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8964:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8968:	d204      	bcs.n	b8974 <__aeabi_dmul+0x80>
   b896a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b896e:	416d      	adcs	r5, r5
   b8970:	eb46 0606 	adc.w	r6, r6, r6
   b8974:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8978:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b897c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8980:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8984:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8988:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b898c:	bf88      	it	hi
   b898e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8992:	d81e      	bhi.n	b89d2 <__aeabi_dmul+0xde>
   b8994:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8998:	bf08      	it	eq
   b899a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b899e:	f150 0000 	adcs.w	r0, r0, #0
   b89a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b89a6:	bd70      	pop	{r4, r5, r6, pc}
   b89a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b89ac:	ea46 0101 	orr.w	r1, r6, r1
   b89b0:	ea40 0002 	orr.w	r0, r0, r2
   b89b4:	ea81 0103 	eor.w	r1, r1, r3
   b89b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b89bc:	bfc2      	ittt	gt
   b89be:	ebd4 050c 	rsbsgt	r5, r4, ip
   b89c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b89c6:	bd70      	popgt	{r4, r5, r6, pc}
   b89c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b89cc:	f04f 0e00 	mov.w	lr, #0
   b89d0:	3c01      	subs	r4, #1
   b89d2:	f300 80ab 	bgt.w	b8b2c <__aeabi_dmul+0x238>
   b89d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b89da:	bfde      	ittt	le
   b89dc:	2000      	movle	r0, #0
   b89de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b89e2:	bd70      	pople	{r4, r5, r6, pc}
   b89e4:	f1c4 0400 	rsb	r4, r4, #0
   b89e8:	3c20      	subs	r4, #32
   b89ea:	da35      	bge.n	b8a58 <__aeabi_dmul+0x164>
   b89ec:	340c      	adds	r4, #12
   b89ee:	dc1b      	bgt.n	b8a28 <__aeabi_dmul+0x134>
   b89f0:	f104 0414 	add.w	r4, r4, #20
   b89f4:	f1c4 0520 	rsb	r5, r4, #32
   b89f8:	fa00 f305 	lsl.w	r3, r0, r5
   b89fc:	fa20 f004 	lsr.w	r0, r0, r4
   b8a00:	fa01 f205 	lsl.w	r2, r1, r5
   b8a04:	ea40 0002 	orr.w	r0, r0, r2
   b8a08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8a0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8a10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8a14:	fa21 f604 	lsr.w	r6, r1, r4
   b8a18:	eb42 0106 	adc.w	r1, r2, r6
   b8a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a20:	bf08      	it	eq
   b8a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a26:	bd70      	pop	{r4, r5, r6, pc}
   b8a28:	f1c4 040c 	rsb	r4, r4, #12
   b8a2c:	f1c4 0520 	rsb	r5, r4, #32
   b8a30:	fa00 f304 	lsl.w	r3, r0, r4
   b8a34:	fa20 f005 	lsr.w	r0, r0, r5
   b8a38:	fa01 f204 	lsl.w	r2, r1, r4
   b8a3c:	ea40 0002 	orr.w	r0, r0, r2
   b8a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8a48:	f141 0100 	adc.w	r1, r1, #0
   b8a4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a50:	bf08      	it	eq
   b8a52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a56:	bd70      	pop	{r4, r5, r6, pc}
   b8a58:	f1c4 0520 	rsb	r5, r4, #32
   b8a5c:	fa00 f205 	lsl.w	r2, r0, r5
   b8a60:	ea4e 0e02 	orr.w	lr, lr, r2
   b8a64:	fa20 f304 	lsr.w	r3, r0, r4
   b8a68:	fa01 f205 	lsl.w	r2, r1, r5
   b8a6c:	ea43 0302 	orr.w	r3, r3, r2
   b8a70:	fa21 f004 	lsr.w	r0, r1, r4
   b8a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a78:	fa21 f204 	lsr.w	r2, r1, r4
   b8a7c:	ea20 0002 	bic.w	r0, r0, r2
   b8a80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8a84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a88:	bf08      	it	eq
   b8a8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a8e:	bd70      	pop	{r4, r5, r6, pc}
   b8a90:	f094 0f00 	teq	r4, #0
   b8a94:	d10f      	bne.n	b8ab6 <__aeabi_dmul+0x1c2>
   b8a96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8a9a:	0040      	lsls	r0, r0, #1
   b8a9c:	eb41 0101 	adc.w	r1, r1, r1
   b8aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8aa4:	bf08      	it	eq
   b8aa6:	3c01      	subeq	r4, #1
   b8aa8:	d0f7      	beq.n	b8a9a <__aeabi_dmul+0x1a6>
   b8aaa:	ea41 0106 	orr.w	r1, r1, r6
   b8aae:	f095 0f00 	teq	r5, #0
   b8ab2:	bf18      	it	ne
   b8ab4:	4770      	bxne	lr
   b8ab6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8aba:	0052      	lsls	r2, r2, #1
   b8abc:	eb43 0303 	adc.w	r3, r3, r3
   b8ac0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8ac4:	bf08      	it	eq
   b8ac6:	3d01      	subeq	r5, #1
   b8ac8:	d0f7      	beq.n	b8aba <__aeabi_dmul+0x1c6>
   b8aca:	ea43 0306 	orr.w	r3, r3, r6
   b8ace:	4770      	bx	lr
   b8ad0:	ea94 0f0c 	teq	r4, ip
   b8ad4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8ad8:	bf18      	it	ne
   b8ada:	ea95 0f0c 	teqne	r5, ip
   b8ade:	d00c      	beq.n	b8afa <__aeabi_dmul+0x206>
   b8ae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8ae4:	bf18      	it	ne
   b8ae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8aea:	d1d1      	bne.n	b8a90 <__aeabi_dmul+0x19c>
   b8aec:	ea81 0103 	eor.w	r1, r1, r3
   b8af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8af4:	f04f 0000 	mov.w	r0, #0
   b8af8:	bd70      	pop	{r4, r5, r6, pc}
   b8afa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8afe:	bf06      	itte	eq
   b8b00:	4610      	moveq	r0, r2
   b8b02:	4619      	moveq	r1, r3
   b8b04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b08:	d019      	beq.n	b8b3e <__aeabi_dmul+0x24a>
   b8b0a:	ea94 0f0c 	teq	r4, ip
   b8b0e:	d102      	bne.n	b8b16 <__aeabi_dmul+0x222>
   b8b10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8b14:	d113      	bne.n	b8b3e <__aeabi_dmul+0x24a>
   b8b16:	ea95 0f0c 	teq	r5, ip
   b8b1a:	d105      	bne.n	b8b28 <__aeabi_dmul+0x234>
   b8b1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8b20:	bf1c      	itt	ne
   b8b22:	4610      	movne	r0, r2
   b8b24:	4619      	movne	r1, r3
   b8b26:	d10a      	bne.n	b8b3e <__aeabi_dmul+0x24a>
   b8b28:	ea81 0103 	eor.w	r1, r1, r3
   b8b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8b38:	f04f 0000 	mov.w	r0, #0
   b8b3c:	bd70      	pop	{r4, r5, r6, pc}
   b8b3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8b46:	bd70      	pop	{r4, r5, r6, pc}

000b8b48 <__aeabi_ddiv>:
   b8b48:	b570      	push	{r4, r5, r6, lr}
   b8b4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8b4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8b52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8b56:	bf1d      	ittte	ne
   b8b58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8b5c:	ea94 0f0c 	teqne	r4, ip
   b8b60:	ea95 0f0c 	teqne	r5, ip
   b8b64:	f000 f8a7 	bleq	b8cb6 <__aeabi_ddiv+0x16e>
   b8b68:	eba4 0405 	sub.w	r4, r4, r5
   b8b6c:	ea81 0e03 	eor.w	lr, r1, r3
   b8b70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8b74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8b78:	f000 8088 	beq.w	b8c8c <__aeabi_ddiv+0x144>
   b8b7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8b80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8b84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8b88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8b8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8b90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8b94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8b98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8b9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8ba0:	429d      	cmp	r5, r3
   b8ba2:	bf08      	it	eq
   b8ba4:	4296      	cmpeq	r6, r2
   b8ba6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8baa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8bae:	d202      	bcs.n	b8bb6 <__aeabi_ddiv+0x6e>
   b8bb0:	085b      	lsrs	r3, r3, #1
   b8bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   b8bb6:	1ab6      	subs	r6, r6, r2
   b8bb8:	eb65 0503 	sbc.w	r5, r5, r3
   b8bbc:	085b      	lsrs	r3, r3, #1
   b8bbe:	ea4f 0232 	mov.w	r2, r2, rrx
   b8bc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8bc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8bca:	ebb6 0e02 	subs.w	lr, r6, r2
   b8bce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8bd2:	bf22      	ittt	cs
   b8bd4:	1ab6      	subcs	r6, r6, r2
   b8bd6:	4675      	movcs	r5, lr
   b8bd8:	ea40 000c 	orrcs.w	r0, r0, ip
   b8bdc:	085b      	lsrs	r3, r3, #1
   b8bde:	ea4f 0232 	mov.w	r2, r2, rrx
   b8be2:	ebb6 0e02 	subs.w	lr, r6, r2
   b8be6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8bea:	bf22      	ittt	cs
   b8bec:	1ab6      	subcs	r6, r6, r2
   b8bee:	4675      	movcs	r5, lr
   b8bf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8bf4:	085b      	lsrs	r3, r3, #1
   b8bf6:	ea4f 0232 	mov.w	r2, r2, rrx
   b8bfa:	ebb6 0e02 	subs.w	lr, r6, r2
   b8bfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c02:	bf22      	ittt	cs
   b8c04:	1ab6      	subcs	r6, r6, r2
   b8c06:	4675      	movcs	r5, lr
   b8c08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8c0c:	085b      	lsrs	r3, r3, #1
   b8c0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c12:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c1a:	bf22      	ittt	cs
   b8c1c:	1ab6      	subcs	r6, r6, r2
   b8c1e:	4675      	movcs	r5, lr
   b8c20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8c24:	ea55 0e06 	orrs.w	lr, r5, r6
   b8c28:	d018      	beq.n	b8c5c <__aeabi_ddiv+0x114>
   b8c2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8c2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8c32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8c36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8c3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8c3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8c42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8c46:	d1c0      	bne.n	b8bca <__aeabi_ddiv+0x82>
   b8c48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8c4c:	d10b      	bne.n	b8c66 <__aeabi_ddiv+0x11e>
   b8c4e:	ea41 0100 	orr.w	r1, r1, r0
   b8c52:	f04f 0000 	mov.w	r0, #0
   b8c56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8c5a:	e7b6      	b.n	b8bca <__aeabi_ddiv+0x82>
   b8c5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8c60:	bf04      	itt	eq
   b8c62:	4301      	orreq	r1, r0
   b8c64:	2000      	moveq	r0, #0
   b8c66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8c6a:	bf88      	it	hi
   b8c6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8c70:	f63f aeaf 	bhi.w	b89d2 <__aeabi_dmul+0xde>
   b8c74:	ebb5 0c03 	subs.w	ip, r5, r3
   b8c78:	bf04      	itt	eq
   b8c7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8c7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8c82:	f150 0000 	adcs.w	r0, r0, #0
   b8c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8c8a:	bd70      	pop	{r4, r5, r6, pc}
   b8c8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8c90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8c94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8c98:	bfc2      	ittt	gt
   b8c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8ca2:	bd70      	popgt	{r4, r5, r6, pc}
   b8ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ca8:	f04f 0e00 	mov.w	lr, #0
   b8cac:	3c01      	subs	r4, #1
   b8cae:	e690      	b.n	b89d2 <__aeabi_dmul+0xde>
   b8cb0:	ea45 0e06 	orr.w	lr, r5, r6
   b8cb4:	e68d      	b.n	b89d2 <__aeabi_dmul+0xde>
   b8cb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8cba:	ea94 0f0c 	teq	r4, ip
   b8cbe:	bf08      	it	eq
   b8cc0:	ea95 0f0c 	teqeq	r5, ip
   b8cc4:	f43f af3b 	beq.w	b8b3e <__aeabi_dmul+0x24a>
   b8cc8:	ea94 0f0c 	teq	r4, ip
   b8ccc:	d10a      	bne.n	b8ce4 <__aeabi_ddiv+0x19c>
   b8cce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8cd2:	f47f af34 	bne.w	b8b3e <__aeabi_dmul+0x24a>
   b8cd6:	ea95 0f0c 	teq	r5, ip
   b8cda:	f47f af25 	bne.w	b8b28 <__aeabi_dmul+0x234>
   b8cde:	4610      	mov	r0, r2
   b8ce0:	4619      	mov	r1, r3
   b8ce2:	e72c      	b.n	b8b3e <__aeabi_dmul+0x24a>
   b8ce4:	ea95 0f0c 	teq	r5, ip
   b8ce8:	d106      	bne.n	b8cf8 <__aeabi_ddiv+0x1b0>
   b8cea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8cee:	f43f aefd 	beq.w	b8aec <__aeabi_dmul+0x1f8>
   b8cf2:	4610      	mov	r0, r2
   b8cf4:	4619      	mov	r1, r3
   b8cf6:	e722      	b.n	b8b3e <__aeabi_dmul+0x24a>
   b8cf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8cfc:	bf18      	it	ne
   b8cfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8d02:	f47f aec5 	bne.w	b8a90 <__aeabi_dmul+0x19c>
   b8d06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8d0a:	f47f af0d 	bne.w	b8b28 <__aeabi_dmul+0x234>
   b8d0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8d12:	f47f aeeb 	bne.w	b8aec <__aeabi_dmul+0x1f8>
   b8d16:	e712      	b.n	b8b3e <__aeabi_dmul+0x24a>

000b8d18 <__aeabi_d2iz>:
   b8d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8d1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8d20:	d215      	bcs.n	b8d4e <__aeabi_d2iz+0x36>
   b8d22:	d511      	bpl.n	b8d48 <__aeabi_d2iz+0x30>
   b8d24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8d28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8d2c:	d912      	bls.n	b8d54 <__aeabi_d2iz+0x3c>
   b8d2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8d36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8d3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8d3e:	fa23 f002 	lsr.w	r0, r3, r2
   b8d42:	bf18      	it	ne
   b8d44:	4240      	negne	r0, r0
   b8d46:	4770      	bx	lr
   b8d48:	f04f 0000 	mov.w	r0, #0
   b8d4c:	4770      	bx	lr
   b8d4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8d52:	d105      	bne.n	b8d60 <__aeabi_d2iz+0x48>
   b8d54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8d58:	bf08      	it	eq
   b8d5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8d5e:	4770      	bx	lr
   b8d60:	f04f 0000 	mov.w	r0, #0
   b8d64:	4770      	bx	lr
   b8d66:	bf00      	nop

000b8d68 <atexit>:
   b8d68:	2300      	movs	r3, #0
   b8d6a:	4601      	mov	r1, r0
   b8d6c:	461a      	mov	r2, r3
   b8d6e:	4618      	mov	r0, r3
   b8d70:	f000 b8fe 	b.w	b8f70 <__register_exitproc>

000b8d74 <atoi>:
   b8d74:	220a      	movs	r2, #10
   b8d76:	2100      	movs	r1, #0
   b8d78:	f000 b8f0 	b.w	b8f5c <strtol>

000b8d7c <atol>:
   b8d7c:	220a      	movs	r2, #10
   b8d7e:	2100      	movs	r1, #0
   b8d80:	f000 b8ec 	b.w	b8f5c <strtol>

000b8d84 <memcpy>:
   b8d84:	440a      	add	r2, r1
   b8d86:	4291      	cmp	r1, r2
   b8d88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8d8c:	d100      	bne.n	b8d90 <memcpy+0xc>
   b8d8e:	4770      	bx	lr
   b8d90:	b510      	push	{r4, lr}
   b8d92:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8d96:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8d9a:	4291      	cmp	r1, r2
   b8d9c:	d1f9      	bne.n	b8d92 <memcpy+0xe>
   b8d9e:	bd10      	pop	{r4, pc}

000b8da0 <memset>:
   b8da0:	4402      	add	r2, r0
   b8da2:	4603      	mov	r3, r0
   b8da4:	4293      	cmp	r3, r2
   b8da6:	d100      	bne.n	b8daa <memset+0xa>
   b8da8:	4770      	bx	lr
   b8daa:	f803 1b01 	strb.w	r1, [r3], #1
   b8dae:	e7f9      	b.n	b8da4 <memset+0x4>

000b8db0 <srand>:
   b8db0:	b538      	push	{r3, r4, r5, lr}
   b8db2:	4b10      	ldr	r3, [pc, #64]	; (b8df4 <srand+0x44>)
   b8db4:	681d      	ldr	r5, [r3, #0]
   b8db6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8db8:	4604      	mov	r4, r0
   b8dba:	b9b3      	cbnz	r3, b8dea <srand+0x3a>
   b8dbc:	2018      	movs	r0, #24
   b8dbe:	f7fe f8af 	bl	b6f20 <malloc>
   b8dc2:	4602      	mov	r2, r0
   b8dc4:	63a8      	str	r0, [r5, #56]	; 0x38
   b8dc6:	b920      	cbnz	r0, b8dd2 <srand+0x22>
   b8dc8:	4b0b      	ldr	r3, [pc, #44]	; (b8df8 <srand+0x48>)
   b8dca:	480c      	ldr	r0, [pc, #48]	; (b8dfc <srand+0x4c>)
   b8dcc:	2142      	movs	r1, #66	; 0x42
   b8dce:	f7fe f8cf 	bl	b6f70 <__assert_func>
   b8dd2:	490b      	ldr	r1, [pc, #44]	; (b8e00 <srand+0x50>)
   b8dd4:	4b0b      	ldr	r3, [pc, #44]	; (b8e04 <srand+0x54>)
   b8dd6:	e9c0 1300 	strd	r1, r3, [r0]
   b8dda:	4b0b      	ldr	r3, [pc, #44]	; (b8e08 <srand+0x58>)
   b8ddc:	6083      	str	r3, [r0, #8]
   b8dde:	230b      	movs	r3, #11
   b8de0:	8183      	strh	r3, [r0, #12]
   b8de2:	2100      	movs	r1, #0
   b8de4:	2001      	movs	r0, #1
   b8de6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8dea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8dec:	2200      	movs	r2, #0
   b8dee:	611c      	str	r4, [r3, #16]
   b8df0:	615a      	str	r2, [r3, #20]
   b8df2:	bd38      	pop	{r3, r4, r5, pc}
   b8df4:	2003e57c 	.word	0x2003e57c
   b8df8:	000ba355 	.word	0x000ba355
   b8dfc:	000ba36c 	.word	0x000ba36c
   b8e00:	abcd330e 	.word	0xabcd330e
   b8e04:	e66d1234 	.word	0xe66d1234
   b8e08:	0005deec 	.word	0x0005deec

000b8e0c <strcmp>:
   b8e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8e10:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8e14:	2a01      	cmp	r2, #1
   b8e16:	bf28      	it	cs
   b8e18:	429a      	cmpcs	r2, r3
   b8e1a:	d0f7      	beq.n	b8e0c <strcmp>
   b8e1c:	1ad0      	subs	r0, r2, r3
   b8e1e:	4770      	bx	lr

000b8e20 <strlen>:
   b8e20:	4603      	mov	r3, r0
   b8e22:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8e26:	2a00      	cmp	r2, #0
   b8e28:	d1fb      	bne.n	b8e22 <strlen+0x2>
   b8e2a:	1a18      	subs	r0, r3, r0
   b8e2c:	3801      	subs	r0, #1
   b8e2e:	4770      	bx	lr

000b8e30 <strncpy>:
   b8e30:	b510      	push	{r4, lr}
   b8e32:	3901      	subs	r1, #1
   b8e34:	4603      	mov	r3, r0
   b8e36:	b132      	cbz	r2, b8e46 <strncpy+0x16>
   b8e38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8e3c:	f803 4b01 	strb.w	r4, [r3], #1
   b8e40:	3a01      	subs	r2, #1
   b8e42:	2c00      	cmp	r4, #0
   b8e44:	d1f7      	bne.n	b8e36 <strncpy+0x6>
   b8e46:	441a      	add	r2, r3
   b8e48:	2100      	movs	r1, #0
   b8e4a:	4293      	cmp	r3, r2
   b8e4c:	d100      	bne.n	b8e50 <strncpy+0x20>
   b8e4e:	bd10      	pop	{r4, pc}
   b8e50:	f803 1b01 	strb.w	r1, [r3], #1
   b8e54:	e7f9      	b.n	b8e4a <strncpy+0x1a>
	...

000b8e58 <_strtol_l.constprop.0>:
   b8e58:	2b01      	cmp	r3, #1
   b8e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8e5e:	d001      	beq.n	b8e64 <_strtol_l.constprop.0+0xc>
   b8e60:	2b24      	cmp	r3, #36	; 0x24
   b8e62:	d906      	bls.n	b8e72 <_strtol_l.constprop.0+0x1a>
   b8e64:	f7fe f87c 	bl	b6f60 <__errno>
   b8e68:	2316      	movs	r3, #22
   b8e6a:	6003      	str	r3, [r0, #0]
   b8e6c:	2000      	movs	r0, #0
   b8e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8e72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8f58 <_strtol_l.constprop.0+0x100>
   b8e76:	460d      	mov	r5, r1
   b8e78:	462e      	mov	r6, r5
   b8e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8e7e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8e82:	f017 0708 	ands.w	r7, r7, #8
   b8e86:	d1f7      	bne.n	b8e78 <_strtol_l.constprop.0+0x20>
   b8e88:	2c2d      	cmp	r4, #45	; 0x2d
   b8e8a:	d132      	bne.n	b8ef2 <_strtol_l.constprop.0+0x9a>
   b8e8c:	782c      	ldrb	r4, [r5, #0]
   b8e8e:	2701      	movs	r7, #1
   b8e90:	1cb5      	adds	r5, r6, #2
   b8e92:	2b00      	cmp	r3, #0
   b8e94:	d05b      	beq.n	b8f4e <_strtol_l.constprop.0+0xf6>
   b8e96:	2b10      	cmp	r3, #16
   b8e98:	d109      	bne.n	b8eae <_strtol_l.constprop.0+0x56>
   b8e9a:	2c30      	cmp	r4, #48	; 0x30
   b8e9c:	d107      	bne.n	b8eae <_strtol_l.constprop.0+0x56>
   b8e9e:	782c      	ldrb	r4, [r5, #0]
   b8ea0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8ea4:	2c58      	cmp	r4, #88	; 0x58
   b8ea6:	d14d      	bne.n	b8f44 <_strtol_l.constprop.0+0xec>
   b8ea8:	786c      	ldrb	r4, [r5, #1]
   b8eaa:	2310      	movs	r3, #16
   b8eac:	3502      	adds	r5, #2
   b8eae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8eb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8eb6:	f04f 0c00 	mov.w	ip, #0
   b8eba:	fbb8 f9f3 	udiv	r9, r8, r3
   b8ebe:	4666      	mov	r6, ip
   b8ec0:	fb03 8a19 	mls	sl, r3, r9, r8
   b8ec4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8ec8:	f1be 0f09 	cmp.w	lr, #9
   b8ecc:	d816      	bhi.n	b8efc <_strtol_l.constprop.0+0xa4>
   b8ece:	4674      	mov	r4, lr
   b8ed0:	42a3      	cmp	r3, r4
   b8ed2:	dd24      	ble.n	b8f1e <_strtol_l.constprop.0+0xc6>
   b8ed4:	f1bc 0f00 	cmp.w	ip, #0
   b8ed8:	db1e      	blt.n	b8f18 <_strtol_l.constprop.0+0xc0>
   b8eda:	45b1      	cmp	r9, r6
   b8edc:	d31c      	bcc.n	b8f18 <_strtol_l.constprop.0+0xc0>
   b8ede:	d101      	bne.n	b8ee4 <_strtol_l.constprop.0+0x8c>
   b8ee0:	45a2      	cmp	sl, r4
   b8ee2:	db19      	blt.n	b8f18 <_strtol_l.constprop.0+0xc0>
   b8ee4:	fb06 4603 	mla	r6, r6, r3, r4
   b8ee8:	f04f 0c01 	mov.w	ip, #1
   b8eec:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8ef0:	e7e8      	b.n	b8ec4 <_strtol_l.constprop.0+0x6c>
   b8ef2:	2c2b      	cmp	r4, #43	; 0x2b
   b8ef4:	bf04      	itt	eq
   b8ef6:	782c      	ldrbeq	r4, [r5, #0]
   b8ef8:	1cb5      	addeq	r5, r6, #2
   b8efa:	e7ca      	b.n	b8e92 <_strtol_l.constprop.0+0x3a>
   b8efc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8f00:	f1be 0f19 	cmp.w	lr, #25
   b8f04:	d801      	bhi.n	b8f0a <_strtol_l.constprop.0+0xb2>
   b8f06:	3c37      	subs	r4, #55	; 0x37
   b8f08:	e7e2      	b.n	b8ed0 <_strtol_l.constprop.0+0x78>
   b8f0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8f0e:	f1be 0f19 	cmp.w	lr, #25
   b8f12:	d804      	bhi.n	b8f1e <_strtol_l.constprop.0+0xc6>
   b8f14:	3c57      	subs	r4, #87	; 0x57
   b8f16:	e7db      	b.n	b8ed0 <_strtol_l.constprop.0+0x78>
   b8f18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8f1c:	e7e6      	b.n	b8eec <_strtol_l.constprop.0+0x94>
   b8f1e:	f1bc 0f00 	cmp.w	ip, #0
   b8f22:	da05      	bge.n	b8f30 <_strtol_l.constprop.0+0xd8>
   b8f24:	2322      	movs	r3, #34	; 0x22
   b8f26:	6003      	str	r3, [r0, #0]
   b8f28:	4646      	mov	r6, r8
   b8f2a:	b942      	cbnz	r2, b8f3e <_strtol_l.constprop.0+0xe6>
   b8f2c:	4630      	mov	r0, r6
   b8f2e:	e79e      	b.n	b8e6e <_strtol_l.constprop.0+0x16>
   b8f30:	b107      	cbz	r7, b8f34 <_strtol_l.constprop.0+0xdc>
   b8f32:	4276      	negs	r6, r6
   b8f34:	2a00      	cmp	r2, #0
   b8f36:	d0f9      	beq.n	b8f2c <_strtol_l.constprop.0+0xd4>
   b8f38:	f1bc 0f00 	cmp.w	ip, #0
   b8f3c:	d000      	beq.n	b8f40 <_strtol_l.constprop.0+0xe8>
   b8f3e:	1e69      	subs	r1, r5, #1
   b8f40:	6011      	str	r1, [r2, #0]
   b8f42:	e7f3      	b.n	b8f2c <_strtol_l.constprop.0+0xd4>
   b8f44:	2430      	movs	r4, #48	; 0x30
   b8f46:	2b00      	cmp	r3, #0
   b8f48:	d1b1      	bne.n	b8eae <_strtol_l.constprop.0+0x56>
   b8f4a:	2308      	movs	r3, #8
   b8f4c:	e7af      	b.n	b8eae <_strtol_l.constprop.0+0x56>
   b8f4e:	2c30      	cmp	r4, #48	; 0x30
   b8f50:	d0a5      	beq.n	b8e9e <_strtol_l.constprop.0+0x46>
   b8f52:	230a      	movs	r3, #10
   b8f54:	e7ab      	b.n	b8eae <_strtol_l.constprop.0+0x56>
   b8f56:	bf00      	nop
   b8f58:	000ba3c6 	.word	0x000ba3c6

000b8f5c <strtol>:
   b8f5c:	4613      	mov	r3, r2
   b8f5e:	460a      	mov	r2, r1
   b8f60:	4601      	mov	r1, r0
   b8f62:	4802      	ldr	r0, [pc, #8]	; (b8f6c <strtol+0x10>)
   b8f64:	6800      	ldr	r0, [r0, #0]
   b8f66:	f7ff bf77 	b.w	b8e58 <_strtol_l.constprop.0>
   b8f6a:	bf00      	nop
   b8f6c:	2003e57c 	.word	0x2003e57c

000b8f70 <__register_exitproc>:
   b8f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f74:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9030 <__register_exitproc+0xc0>
   b8f78:	4606      	mov	r6, r0
   b8f7a:	f8d8 0000 	ldr.w	r0, [r8]
   b8f7e:	461f      	mov	r7, r3
   b8f80:	460d      	mov	r5, r1
   b8f82:	4691      	mov	r9, r2
   b8f84:	f000 f856 	bl	b9034 <__retarget_lock_acquire_recursive>
   b8f88:	4b25      	ldr	r3, [pc, #148]	; (b9020 <__register_exitproc+0xb0>)
   b8f8a:	681c      	ldr	r4, [r3, #0]
   b8f8c:	b934      	cbnz	r4, b8f9c <__register_exitproc+0x2c>
   b8f8e:	4c25      	ldr	r4, [pc, #148]	; (b9024 <__register_exitproc+0xb4>)
   b8f90:	601c      	str	r4, [r3, #0]
   b8f92:	4b25      	ldr	r3, [pc, #148]	; (b9028 <__register_exitproc+0xb8>)
   b8f94:	b113      	cbz	r3, b8f9c <__register_exitproc+0x2c>
   b8f96:	681b      	ldr	r3, [r3, #0]
   b8f98:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8f9c:	6863      	ldr	r3, [r4, #4]
   b8f9e:	2b1f      	cmp	r3, #31
   b8fa0:	dd07      	ble.n	b8fb2 <__register_exitproc+0x42>
   b8fa2:	f8d8 0000 	ldr.w	r0, [r8]
   b8fa6:	f000 f847 	bl	b9038 <__retarget_lock_release_recursive>
   b8faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8fb2:	b34e      	cbz	r6, b9008 <__register_exitproc+0x98>
   b8fb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8fb8:	b988      	cbnz	r0, b8fde <__register_exitproc+0x6e>
   b8fba:	4b1c      	ldr	r3, [pc, #112]	; (b902c <__register_exitproc+0xbc>)
   b8fbc:	b923      	cbnz	r3, b8fc8 <__register_exitproc+0x58>
   b8fbe:	f8d8 0000 	ldr.w	r0, [r8]
   b8fc2:	f000 f838 	bl	b9036 <__retarget_lock_release>
   b8fc6:	e7f0      	b.n	b8faa <__register_exitproc+0x3a>
   b8fc8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8fcc:	f7fd ffa8 	bl	b6f20 <malloc>
   b8fd0:	2800      	cmp	r0, #0
   b8fd2:	d0f4      	beq.n	b8fbe <__register_exitproc+0x4e>
   b8fd4:	2300      	movs	r3, #0
   b8fd6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8fda:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8fde:	6863      	ldr	r3, [r4, #4]
   b8fe0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8fe4:	2201      	movs	r2, #1
   b8fe6:	409a      	lsls	r2, r3
   b8fe8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8fec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8ff0:	4313      	orrs	r3, r2
   b8ff2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8ff6:	2e02      	cmp	r6, #2
   b8ff8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8ffc:	bf02      	ittt	eq
   b8ffe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9002:	4313      	orreq	r3, r2
   b9004:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9008:	6863      	ldr	r3, [r4, #4]
   b900a:	f8d8 0000 	ldr.w	r0, [r8]
   b900e:	1c5a      	adds	r2, r3, #1
   b9010:	3302      	adds	r3, #2
   b9012:	6062      	str	r2, [r4, #4]
   b9014:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9018:	f000 f80e 	bl	b9038 <__retarget_lock_release_recursive>
   b901c:	2000      	movs	r0, #0
   b901e:	e7c6      	b.n	b8fae <__register_exitproc+0x3e>
   b9020:	2003e7e8 	.word	0x2003e7e8
   b9024:	2003e75c 	.word	0x2003e75c
   b9028:	00000000 	.word	0x00000000
   b902c:	000b6f21 	.word	0x000b6f21
   b9030:	2003e5e0 	.word	0x2003e5e0

000b9034 <__retarget_lock_acquire_recursive>:
   b9034:	4770      	bx	lr

000b9036 <__retarget_lock_release>:
   b9036:	4770      	bx	lr

000b9038 <__retarget_lock_release_recursive>:
   b9038:	4770      	bx	lr

000b903a <link_code_end>:
	...

000b903c <dynalib_user>:
   b903c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b904c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b905c:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b906c:	6e69 6f00 7475 7000 6d77 6400 0077 7761     in.out.pwm.dw.aw
   b907c:	7600 0077 6552 656c 7361 0065 7562 7474     .vw.Release.butt
   b908c:	6e6f 002e 694c 6867 3a74 0020 6567 3976     on..Light: .gev9
   b909c:	6c55 4857 7075 3853 4379 4a42 7732 4470     UlWHupS8yCBJ2wpD
   b90ac:	4458 6d4e 5436 4d48 3075 536f 2000 0046     XDNm6THMu0oS. F.
   b90bc:	4320 4c00 6769 7468 7020 696f 746e 7020      C.Light point p
   b90cc:	7361 6573 2e64                               assed..

000b90d3 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b90d3:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b90e3:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b90f3:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b9103:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b9113:	0064 754a 206c 3420 3220 3230 2032 3132     d.Jul  4 2022 21
   b9123:	333a 3a34 3330 0000                          :34:03...

000b912c <_ZL4font>:
   b912c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b913c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b914c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b915c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b916c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b917c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b918c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b919c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b91ac:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b91bc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b91cc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b91dc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b91ec:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b91fc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b920c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b921c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b922c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b923c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b924c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b925c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b926c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b927c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b928c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b929c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b92ac:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b92bc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b92cc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b92dc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b92ec:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b92fc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b930c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b931c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b932c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b933c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b934c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b935c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b936c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b937c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b938c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b939c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b93ac:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b93bc:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b93cc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b93dc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b93ec:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b93fc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b940c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b941c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b942c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b943c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b944c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b945c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b946c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b947c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b948c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b949c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b94ac:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b94bc:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b94cc:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b94dc:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b94ec:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b94fc:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b950c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b951c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b952c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b953c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b954c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b955c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b956c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b957c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b958c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b959c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b95ac:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b95bc:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b95cc:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b95dc:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b95ec:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b95fc:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b960c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b961c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b962c <_ZTV12Adafruit_GFX>:
	...
   b963c:	5a9d 000b 73e9 000b 40a5 000b 54a3 000b     .Z...s...@...T..
   b964c:	54a5 000b 54d7 000b 54b3 000b 54c5 000b     .T...T...T...T..
   b965c:	53e5 000b 54a3 000b 56cf 000b 56cd 000b     .S...T...V...V..
   b966c:	54ef 000b 552d 000b 5567 000b 55ad 000b     .T..-U..gU...U..
   b967c:	55c9 000b 564d 000b 6564 6166 6c75 2074     .U..MV..default 
   b968c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b969c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b96ac:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b96bc:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b96c8 <_ZTVN8particle11SPISettingsE>:
	...
   b96d0:	5bd9 000b 5bab 000b 5bad 000b               .[...[...[..

000b96dc <_ZL12splash1_data>:
   b96dc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b96ec:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b96fc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b970c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b971c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b972c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b9744:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b9754:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b9764:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b9774:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b9784:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b9794:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b97a4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b97b4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b97c4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b97d4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b97e4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b97f4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b9804:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b9814:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b9824:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b9834:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b9844:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b9854:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b986c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b9884:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b9894:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b98a4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b98b4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b98c4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b98d4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b98e4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b98f4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b9904:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b9914:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9924:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b9934:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b9944:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b9954:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b9964:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b9974:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b9984:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b9994:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b999c <_ZL12splash2_data>:
   b999c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b99ac:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b99bc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b99d8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b99e8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b99f8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9a08:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9a18:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9a28:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9a38:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9a48:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9a58:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9a68:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b9a78:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b9a88:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9a98:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9aa8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9ab8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9ac8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9ad8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9ae8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9af8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9b08:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9b18:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9b30:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9b40:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9b50:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9b60:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9b70:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9b7c <_ZTV16Adafruit_SSD1306>:
	...
   b9b84:	5c2d 000b 5c45 000b 5a9d 000b 73e9 000b     -\..E\...Z...s..
   b9b94:	5c59 000b 54a3 000b 54a5 000b 54d7 000b     Y\...T...T...T..
   b9ba4:	54b3 000b 54c5 000b 53e5 000b 54a3 000b     .T...T...S...T..
   b9bb4:	56cf 000b 5df7 000b 639f 000b 6351 000b     .V...]...c..Qc..
   b9bc4:	5567 000b 55ad 000b 55c9 000b 564d 000b     gU...U...U..MV..

000b9bd4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9bd4:	8000 e0c0 f8f0 fefc                         ........

000b9bdc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9bdc:	0100 0703 1f0f 7f3f                         ......?.

000b9be4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9be4:	d5ae a880                                   ....

000b9be8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9be8:	00d3 8d40                                   ..@.

000b9bec <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9bec:	0020 c8a1                                    ...

000b9bf0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9bf0:	40db a6a4 af2e                              .@....

000b9bf6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9bf6:	02da 8f81                                   ....

000b9bfa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9bfa:	12da                                         ...

000b9bfd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9bfd:	02da                                         ...

000b9c00 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9c00:	0022 21ff 0000 0000                         "..!....

000b9c08 <_ZL22BlynkReadHandlerVector>:
   b9c08:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c18:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c28:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c38:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c48:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c58:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c68:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c78:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c88:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9c98:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9ca8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9cb8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9cc8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9cd8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9ce8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9cf8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d08:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d18:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d28:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d38:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d48:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d58:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d68:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d78:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d88:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9d98:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9da8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9db8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9dc8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9dd8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9de8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..
   b9df8:	688f 000b 688f 000b 688f 000b 688f 000b     .h...h...h...h..

000b9e08 <_ZL23BlynkWriteHandlerVector>:
   b9e08:	6891 000b 6891 000b 41c1 000b 6891 000b     .h...h...A...h..
   b9e18:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e28:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e38:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e48:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e58:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e68:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e78:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e88:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9e98:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ea8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9eb8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ec8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ed8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ee8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ef8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f08:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f18:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f28:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f38:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f48:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f58:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f68:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f78:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f88:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9f98:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9fa8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9fb8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9fc8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9fd8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9fe8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..
   b9ff8:	6891 000b 6891 000b 6891 000b 6891 000b     .h...h...h...h..

000ba008 <_ZTV16OledWingAdafruit>:
	...
   ba010:	68bd 000b 68dd 000b 5a9d 000b 73e9 000b     .h...h...Z...s..
   ba020:	5c59 000b 54a3 000b 54a5 000b 54d7 000b     Y\...T...T...T..
   ba030:	54b3 000b 54c5 000b 53e5 000b 54a3 000b     .T...T...S...T..
   ba040:	56cf 000b 5df7 000b 639f 000b 6351 000b     .V...]...c..Qc..
   ba050:	5567 000b 55ad 000b 55c9 000b 564d 000b     gU...U...U..MV..

000ba060 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000ba068 <_ZTVN5spark13EthernetClassE>:
	...
   ba070:	701f 000b 7015 000b 700b 000b 7001 000b     .p...p...p...p..
   ba080:	6ff5 000b 6fe9 000b 72c5 000b 72cd 000b     .o...o...r...r..
   ba090:	6fdd 000b 6fd5 000b 6fcb 000b 6fc1 000b     .o...o...o...o..
   ba0a0:	72fd 000b                                   .r..

000ba0a4 <_ZTV7TwoWire>:
	...
   ba0ac:	703d 000b 7087 000b 705f 000b 703f 000b     =p...p.._p..?p..
   ba0bc:	7067 000b 706f 000b 7077 000b 707f 000b     gp..op..wp...p..

000ba0cc <_ZTV9IPAddress>:
	...
   ba0d4:	7151 000b 7141 000b 7143 000b 7061 0070     Qq..Aq..Cq..app.

000ba0e4 <_ZTVN5spark12NetworkClassE>:
	...
   ba0ec:	7285 000b 728f 000b 7299 000b 72a3 000b     .r...r...r...r..
   ba0fc:	72ad 000b 72b9 000b 72c5 000b 72cd 000b     .r...r...r...r..
   ba10c:	72d5 000b 72e1 000b 72e9 000b 72f3 000b     .r...r...r...r..
   ba11c:	72fd 000b                                   .r..

000ba120 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba120:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   ba130:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000ba140 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba148:	777d 000b 77a1 000b 7cd3 000b 77af 000b     }w...w...|...w..
   ba158:	7781 000b                                   .w..

000ba15c <_ZTV9TCPClient>:
	...
   ba164:	782d 000b 7861 000b 76f9 000b 7713 000b     -x..ax...v...w..
   ba174:	7b69 000b 773d 000b 79df 000b 7771 000b     i{..=w...y..qw..
   ba184:	7a71 000b 78b1 000b 7a0d 000b 7c1d 000b     qz...x...z...|..
   ba194:	79ad 000b 7773 000b 7725 000b 77b5 000b     .y..sw..%w...w..
   ba1a4:	7891 000b 5925 252d 2d6d 6425 2554 3a48     .x..%Y-%m-%dT%H:
   ba1b4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba1c4 <_ZTV11USARTSerial>:
	...
   ba1cc:	7ced 000b 7d59 000b 7d31 000b 73e9 000b     .|..Y}..1}...s..
   ba1dc:	7d01 000b 7d1d 000b 7d0f 000b 7d2b 000b     .}...}...}..+}..
   ba1ec:	7cef 000b 7cf3 000b                         .|...|..

000ba1f4 <_ZTV9USBSerial>:
	...
   ba1fc:	7d97 000b 7dff 000b 7dd5 000b 73e9 000b     .}...}...}...s..
   ba20c:	7dc7 000b 7d99 000b 7da9 000b 7df9 000b     .}...}...}...}..
   ba21c:	7db9 000b 7d91 000b                         .}...}..

000ba224 <_ZTVN5spark9WiFiClassE>:
	...
   ba22c:	7ef7 000b 7eed 000b 7ee3 000b 7e99 000b     .~...~...~...~..
   ba23c:	7ed7 000b 7ecb 000b 72c5 000b 72cd 000b     .~...~...r...r..
   ba24c:	7ebf 000b 7eb7 000b 7ead 000b 7ea3 000b     .~...~...~...~..
   ba25c:	72fd 000b                                   .r..

000ba260 <_ZSt7nothrow>:
	...

000ba261 <_ZTSSt19_Sp_make_shared_tag>:
   ba261:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba271:	6572 5f64 6174 0067 0000                     red_tag....

000ba27c <_ZTISt19_Sp_make_shared_tag>:
   ba27c:	a2bc 000b a261 000b                         ....a...

000ba284 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba284:	a31c 000b a290 000b a340 000b               ........@...

000ba290 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba290:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba2a0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba2b0:	0045 0000                                   E...

000ba2b4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba2b4:	0000 0000 a284 000b 8305 000b 8319 000b     ................
   ba2c4:	84ad 000b 84ad 000b 8383 000b 82c5 000b     ................
   ba2d4:	836b 000b 832d 000b 82f7 000b               k...-.......

000ba2e0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba2e0:	a31c 000b a2ec 000b a284 000b               ............

000ba2ec <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba2ec:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba2fc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba30c:	666e 456f 0000 0000                         nfoE....

000ba314 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba314:	0000 0000 a2e0 000b 83ad 000b 83c1 000b     ................
   ba324:	84ad 000b 84ad 000b 8383 000b 82c5 000b     ................
   ba334:	8481 000b 840d 000b 83d5 000b               ............

000ba340 <_ZTISt9type_info>:
   ba340:	a2bc 000b a348 000b                         ....H...

000ba348 <_ZTSSt9type_info>:
   ba348:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba358:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba368:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   ba378:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   ba388:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   ba398:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   ba3a8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   ba3b8:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000ba3c5 <_ctype_>:
   ba3c5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba3d5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba3e5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba3f5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba405:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba415:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba425:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba435:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba445:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba4c6 <link_const_variable_data_end>:
	...

000ba4c8 <link_constructors_location>:
   ba4c8:	000b5391 	.word	0x000b5391
   ba4cc:	000b6fb1 	.word	0x000b6fb1
   ba4d0:	000b7029 	.word	0x000b7029
   ba4d4:	000b7275 	.word	0x000b7275
   ba4d8:	000b73d5 	.word	0x000b73d5
   ba4dc:	000b7511 	.word	0x000b7511
   ba4e0:	000b76d5 	.word	0x000b76d5
   ba4e4:	000b7cd9 	.word	0x000b7cd9
   ba4e8:	000b7f01 	.word	0x000b7f01

000ba4ec <link_constructors_end>:
   ba4ec:	00000000 	.word	0x00000000
